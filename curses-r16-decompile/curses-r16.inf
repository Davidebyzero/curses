! "curses-r16.z5", 259072 bytes
! Z-machine version 5, release 16, serial 951024
!
! Decompiled by Reform release 6, serial 040226
! using symbol file "curses-r16.reform"

! Grammar

Verb 'start' 'stop'
    * noun						-> Start
;

Verb 'stack'
    * noun						-> Stack
    * noun 'with' held					-> Stack
    * held 'on' noun					-> Insert
    * held 'onto' noun					-> Insert
    * held 'in' noun					-> Insert
;

Verb 'pinch' 'slap'
    * creature						-> Attack
    * noun						-> Take
;

Verb 'scratch'
    * noun						-> Clean
;

Verb 'ring'
    * noun						-> Push
;

Verb 'lay'
    * noun 'on' noun					-> PutOn
;

Verb 'bet' 'gamble' 'wager'
    * 							-> Gamble
    * 'with' noun					-> Gamble
;

Verb 'change' 'flip'
    * noun						-> SwitchOn
;

Verb 'reverse' 'revolve'
    * noun						-> Turn
;

Verb 'roll' 'shoot' 'toss'
    * noun						-> Drop
;

Verb 'pet' 'stroke' 'tickle'
    * noun						-> Touch
;

Verb 'etch' 'inscribe' 'scribe' 'write'
    * special						-> Inscribe
    * special 'on' noun					-> InscribeOn
;

Verb 'make' 'wish'
    * 							-> Wish
    * 'wish'						-> Wish
    * 'a//' 'wish'					-> Wish
    * 'for' special					-> Wish
;

Verb 'knock'
    * 'on' noun						-> Knock
    * 'at' noun						-> Knock
;

Verb 'anoint' 'oil'
    * noun						-> Anoint
;

Verb 'float' 'sail'
    * 							-> Sail
    * 'away'						-> Sail
;

Verb 'anoppe' 'eppona'
    * 							-> Anoppe
;

Verb 'hypnotise' 'hypnotize'
    * creature						-> Hypnotize
    * creature 'with' noun				-> Hypnotize
;

Verb 'pace'
    * 							-> Pace
    * routine181728					-> PaceDir
;

Verb 'milk'
    * noun						-> Milk
;

Verb 'lagach'
    * 							-> Lagach
;

Verb 'shantih'
    * 							-> Shantih
    * special						-> Shantih
    * special special					-> Shantih
;

Verb 'plover' 'plugh' 'xyzzy'
    * 							-> Xyzzy
;

Verb 'slide'
    * readchar						-> Slide
;

Verb 'lean' 'prop' 'rest' 'support'
    * held 'against' noun				-> Lean
    * held 'on' noun					-> Lean
    * 'up' noun 'with' held				-> PropWith
    * noun 'with' held					-> PropWith
;

Verb 'beep' 'bleep' 'chirp'
    * 							-> Beep
;

Verb 'dance' 'tango' 'waltz'
    * 'with' creature					-> Dance
;

Verb 'add' 'join' 'mend' 'repair'
    * noun						-> Repair
    * noun 'to' noun					-> Repair
;

Verb 'diagnose'
    * 							-> Diagnose
;

Verb 'play'
    * 'croquet'						-> PlayCroquet
    * 'with' held					-> Blow
    * held						-> Blow
;

Verb 'achetez'
    * special						-> Buy
;

Verb 'beckon' 'direct' 'gesture' 'point'
    * noun						-> PointVague
    * 'at' noun						-> PointAt
    * held 'at' noun					-> Point
;

Verb 'strike'
    * noun						-> Strike
    * noun 'with' held					-> Kill
;

Verb 'rip' 'tear'
    * 							-> Rip
    * 'down' noun					-> RipDown
    * noun						-> Rip
;

Verb 'tighten' 'tweak' 'unwind' 'wind' 'wrench'
    * noun						-> Turn
    * noun 'with' noun					-> TurnWith
;

Verb 'frisk'
    * animate						-> Search
;

Verb 'wash'
    * 'my' 'mouth' 'with' held				-> Wash
    * 'my' 'mouth' 'out' 'with' held			-> Wash
    * 'mouth' 'with' held				-> Wash
    * 'mouth' 'out' 'with' held				-> Wash
;

Verb 'board' 'embark'
    * noun						-> Enter
;

Verb 'exhibit' 'reveal'
    * 							-> Sing
;

Verb 'hang' 'mount'
    * noun 'on' noun					-> Insert
    * noun 'onto' noun					-> Insert
    * 'up' noun 'on' noun				-> Insert
    * 'up' noun 'onto' noun				-> Insert
    * noun 'up' 'on' noun				-> Insert
    * noun 'up' 'onto' noun				-> Insert
;

Verb 'kick'
    * noun						-> Attack
;

Verb 'ram'
    * special						-> Ram
;

Verb 'time'
    * 							-> Time
;

Verb 'help'
    * 							-> Help
    * special						-> HelpSpecial
;

Verb 'hint' 'hints'
    * 							-> Hints
;

Verb 'pretty'
    * 							-> Pretty
;

Verb 'plain'
    * 							-> Plain
;

Verb 'dig'
    * 							-> Dig
    * 'with' held					-> DigWith
    * special						-> Dig
;

Verb 'hop' 'jump' 'skip'
    * 							-> Jump
    * 'over' noun					-> JumpOver
;

Verb 'chop' 'cut' 'prune' 'slice'
    * noun						-> Cut
;

Verb 'fill'
    * noun						-> Fill
;

Verb 'drink' 'sip' 'swallow'
    * 							-> Drink
    * noun						-> Drink
;

Verb 'burn' 'light'
    * noun						-> Burn
    * noun 'with' held					-> Burn
;

Verb 'attach' 'fasten' 'fix' 'tie'
    * noun						-> Repair
    * noun 'to' noun					-> Repair
;

Verb 'clean' 'dust' 'polish' 'rub' 'scrub' 'shine' 'sweep' 'wipe'
    * noun						-> Clean
;

Verb 'feel' 'fondle' 'grope' 'touch'
    * noun						-> Touch
;

Verb 'taste'
    * noun						-> Taste
;

Verb 'hear' 'listen'
    * 							-> Listen
    * noun						-> Listen
    * 'to' noun						-> Listen
;

Verb 'smell' 'sniff'
    * 							-> Smell
    * noun						-> Smell
;

Verb 'think'
    * 							-> Think
;

Verb 'embrace' 'hug' 'kiss'
    * creature						-> Kiss
;

Verb 'awake' 'awaken' 'wake'
    * 							-> Wake
    * 'up'						-> Wake
    * creature						-> WakeOther
    * creature 'up'					-> WakeOther
    * 'up' creature					-> WakeOther
;

Verb 'pray'
    * 							-> Pray
;

Verb 'blow'
    * held						-> Blow
;

Verb 'swing'
    * noun						-> Swing
    * 'on' noun						-> Swing
    * 'on' noun						-> Swing
;

Verb 'dive' 'swim'
    * 							-> Swim
;

Verb 'squash' 'squeeze'
    * noun						-> Squeeze
;

Verb 'buy' 'purchase'
    * special						-> Buy
;

Verb 'climb' 'scale'
    * noun						-> Climb
    * 'up' noun						-> Climb
    * 'over' noun					-> Climb
;

Verb 'sing'
    * 							-> Sing
;

Verb 'peel'
    * noun						-> Take
    * 'off' noun					-> Take
;

Verb 'nap' 'sleep'
    * 							-> Sleep
;

Verb 'eat'
    * held						-> Eat
;

Verb 'ask'
    * creature 'about' ConTopicJ			-> Ask
    * creature 'for' noun				-> AskFor
;

Verb 'tell'
    * creature 'about' ConTopicJ			-> Tell
;

Verb 'answer' 'say' 'shout' 'speak'
    * 							-> Shout
    * 'lagach' 'to' noun				-> Lagach
    * ConTopicJ 'to' creature				-> Answer
;

Verb 'wait' 'z//'
    * 							-> Wait
;

Verb 'attack' 'break' 'crack' 'destroy' 'fight' 'hit' 'kill' 'murder' 'punch' 'smash' 'thump' 'torture' 'wreck'
    * noun						-> Attack
    * noun 'with' held					-> Kill
;

Verb 'unlock'
    * noun 'with' held					-> Unlock
;

Verb 'lock'
    * noun 'with' held					-> Lock
;

Verb 'switch'
    * noun						-> SwitchOn
    * noun 'on'						-> SwitchOn
    * noun 'off'					-> SwitchOff
    * 'on' noun						-> SwitchOn
    * 'off' noun					-> SwitchOff
;

Verb 'rotate' 'screw' 'turn' 'twist' 'unscrew'
    * noun						-> Turn
    * noun 'on'						-> SwitchOn
    * noun 'off'					-> SwitchOff
    * 'on' noun						-> SwitchOn
    * 'off' noun					-> SwitchOff
    * noun 'inside' 'out'				-> Turn
    * noun 'around'					-> Turn
    * 'round' noun					-> Turn
    * noun 'with' held					-> TurnWith
    * noun 'to' ConTopicJ				-> Consult
;

Verb 'clear' 'move' 'press' 'push' 'shift'
    * noun						-> Push
    * noun noun						-> PushDir
    * noun 'to' noun					-> Transfer
;

Verb 'drag' 'pull'
    * noun						-> Pull
;

Verb 'adjust' 'set'
    * noun						-> Set
    * noun 'to' special					-> SetTo
;

Verb 'wave'
    * 							-> WaveHands
    * noun						-> Wave
;

Verb 'search'
    * noun						-> Search
;

Verb 'bother' 'curses' 'darn' 'drat'
    * 							-> Mild
    * special						-> Mild
;

Verb 'damn' 'fuck' 'shit' 'sod'
    * 							-> Strong
    * special						-> Strong
;

Verb 'sorry'
    * 							-> Sorry
;

Verb 'no'
    * 							-> No
;

Verb 'y//' 'yes'
    * 							-> Yes
;

Verb 'read'
    * noun						-> Read
    * 'about' ConTopic 'in' noun			-> Consult
    * ConTopic 'in' noun				-> Consult
;

Verb 'check' 'describe' 'examine' 'watch' 'x//'
    * noun						-> Read
    * 'reflectio' 'of' noun				-> Examine
    * noun 'in' noun					-> Examine
;

Verb 'exit' 'out' 'outside'
    * 							-> Exit
;

Verb 'in' 'inside'
    * 							-> Enter
;

Verb 'lie' 'sit'
    * 'on' noun						-> Enter
    * 'in' noun						-> Enter
    * 'inside' noun					-> Enter
    * 							-> Lie
    * 'down'						-> LieDown
    * 'down' 'on' noun					-> Enter
;

Verb 'cross' 'enter'
    * 							-> Enter
    * noun						-> Enter
;

Verb 'close' 'cover' 'shut'
    * noun						-> Close
    * 'up'						-> Close
    * 'off' noun					-> SwitchOff
    * noun 'with' noun					-> CloseWith
;

Verb 'open' 'uncover' 'undo' 'unwrap'
    * noun						-> Open
    * noun 'with' held					-> Unlock
;

Verb 'consult'
    * noun 'about' ConTopicJ				-> Consult
    * noun 'on' ConTopicJ				-> Consult
;

Verb 'l//' 'look'
    * 							-> Look
    * 'at' noun						-> Read
    * 'inside' noun					-> Search
    * 'in' noun						-> Search
    * 'into' noun					-> Search
    * 'under' noun					-> LookUnder
    * 'through' noun					-> Search
    * 'up' ConTopic 'in' noun				-> Consult
    * 'up' ConTopicI 'on' noun				-> Consult
    * 'up' ConTopicJ					-> LookUp
;

Verb 'i//' 'inv' 'inventory'
    * 							-> Inv
    * 'tall'						-> InvTall
    * 'wide'						-> InvWide
;

Verb 'go' 'leave' 'run' 'walk'
    * 							-> VagueGo
    * noun=IsDirection					-> Go
    * noun						-> Enter
    * 'into' noun					-> Enter
    * 'in' noun						-> Enter
    * 'inside' noun					-> Enter
    * 'through' noun					-> Enter
    * routine181728					-> PaceDir
;

Verb 'display' 'present' 'show'
    * creature held					-> ShowR
    * held 'to' creature				-> Show
    * 'off'						-> Sing
;

Verb 'feed' 'give' 'offer' 'pay'
    * creature held					-> GiveR
    * held 'to' creature				-> Give
    * 'over' held 'to' creature				-> Give
;

Verb 'discard' 'drop' 'throw'
    * multiheld						-> Drop
    * multiexcept 'in' noun				-> Insert
    * multiexcept 'into' noun				-> Insert
    * multiexcept 'on' noun				-> PutOn
    * multiexcept 'onto' noun				-> PutOn
    * multiexcept 'down' noun				-> Insert
    * held 'at' noun					-> ThrowAt
    * held 'against' noun				-> ThrowAt
;

Verb 'transfer'
    * noun 'to' noun					-> Transfer
;

Verb 'empty'
    * noun						-> Empty
    * 'out' noun					-> Empty
    * noun 'out'					-> Empty
    * noun 'to' noun					-> EmptyT
    * noun 'into' noun					-> EmptyT
    * noun 'on' noun					-> EmptyT
    * noun 'onto' noun					-> EmptyT
;

Verb 'insert'
    * multiexcept 'in' noun				-> Insert
    * multiexcept 'into' noun				-> Insert
;

Verb 'put'
    * multiexcept 'in' noun				-> Insert
    * multiexcept 'inside' noun				-> Insert
    * multiexcept 'into' noun				-> Insert
    * multiexcept 'on' noun				-> PutOn
    * multiexcept 'onto' noun				-> PutOn
    * 'on' held						-> Wear
    * 'down' multiheld					-> Drop
    * multiheld 'down'					-> Drop
;

Verb 'don' 'wear'
    * held						-> Wear
;

Verb 'disrobe' 'doff' 'shed'
    * held						-> Disrobe
;

Verb 'remove'
    * held						-> Disrobe
    * multi						-> Take
    * multiinside 'from' noun				-> Remove
;

Verb 'stand'
    * 							-> Exit
    * 'up'						-> Exit
    * 'on' noun						-> Enter
;

Verb 'pick'
    * 'up' multi					-> Take
    * multi 'up'					-> Take
;

Verb 'carry' 'get' 'hold' 'take'
    * 'out'						-> Exit
    * 'off'						-> Exit
    * 'up'						-> Exit
    * multi						-> Take
    * multiinside 'from' noun				-> Remove
    * 'in' noun						-> Enter
    * 'into' noun					-> Enter
    * 'on' noun						-> Enter
    * multiinside 'off' noun				-> Remove
    * 'off' worn					-> Disrobe
    * 'off' noun					-> TakeOff
    * 'inventory'					-> Inv
    * routine181800					-> PaceDir
;

Verb 'objects'
    * 							-> Objects
;

Verb 'places'
    * 							-> Places
;

Verb 'version'
    * 							-> Version
;

Verb 'notify'
    * 'on'						-> NotifyOn
    * 'off'						-> NotifyOff
;

Verb 'nouns' 'pronouns'
    * 							-> Nouns
;

Verb 'brief' 'normal'
    * 							-> Brief
;

Verb 'long' 'verbose'
    * 							-> Verbose
;

Verb 'short' 'superbrie'
    * 							-> Superbrief
;

Verb 'noscript' 'unscript'
    * 							-> ScriptOff
;

Verb 'script'
    * 							-> ScriptOn
    * 'off'						-> ScriptOff
    * 'on'						-> ScriptOn
;

Verb 'save'
    * 							-> Save
;

Verb 'verify'
    * 							-> Verify
;

Verb 'restart'
    * 							-> Restart
;

Verb 'restore'
    * 							-> Restore
;

Verb 'die' 'q//' 'quit'
    * 							-> Quit
;

Verb 'full' 'fullscore'
    * 							-> FullScore
    * 'score'						-> FullScore
;

Verb 'score'
    * 							-> Score
;

! Object tree


Object Compass "compass"	! 1 / 0x1
  has	concealed;

Object -> n_obj "north wall"	! 2 / 0x2
  with	name 'n//' 'north' 'wall',
	w_to w_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> s_obj "south wall"	! 3 / 0x3
  with	name 's//' 'south' 'wall',
	w_to ne_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> e_obj "east wall"	! 4 / 0x4
  with	name 'e//' 'east' 'wall',
	w_to se_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> w_obj "west wall"	! 5 / 0x5
  with	name 'w//' 'west' 'wall',
	w_to nw_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> ne_obj "northeast wall"	! 6 / 0x6
  with	name 'ne' 'northeast' 'wall',
	w_to sw_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> se_obj "southeast wall"	! 7 / 0x7
  with	name 'se' 'southeast' 'wall',
	w_to u_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> nw_obj "northwest wall"	! 8 / 0x8
  with	name 'nw' 'northwest' 'wall',
	w_to d_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> sw_obj "southwest wall"	! 9 / 0x9
  with	name 'sw' 'southwest' 'wall',
	w_to out_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> u_obj "ceiling"	! 10 / 0xa
  with	name 'u//' 'up' 'ceiling',
	w_to in_obj,
	article "the",
	time_left 0,
  has	scenery;

Object -> d_obj "floor"	! 11 / 0xb
  with	name 'd//' 'down' 'floor',
	w_to thedark,
	article "the",
	time_left 0,
  has	scenery;

Object -> out_obj "outside"	! 12 / 0xc
  with	w_to lm_object,
	article "the",
	time_left 0,
  has	scenery;

Object -> in_obj "inside"	! 13 / 0xd
  with	w_to yourself,
	article "the",
	time_left 0,
  has	scenery;

Object thedark "Darkness"	! 14 / 0xe
  with	initial nothing,
	description "It is pitch dark, and you can't see a thing.",
	short "Darkness",
  has	;

Object yourself "yourself"	! 15 / 0xf
  with	after routine262140,
	before routine262140,
	life routine262140,
	orders nothing,
	description "As good-looking as ever.",
	describe NULL,
	time_left 0,
	daemon routine262140,
	each_turn routine262140,
	capacity 100,
	short nothing,
	parse_name nothing,
  has	animate concealed proper transparent;

Object lm_object "lm"	! 16 / 0x10
  with	after LMAfter,
  has	;

Object rod_of_fire "Fire"	! 17 / 0x11
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'fire',
	rod_action RodOfFireAction,
	angel_hint "This is rather dangerous, I'm afraid. Use only on vegetative matter.",
  has	rod_attr unidentiifed_rod;

Object rod_of_returning "Returning"	! 18 / 0x12
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'returning',
	rod_action RodOfReturningAction,
	devil_hint "Well, that's not very useful, is it?  I'd go on strike if I were you.",
  has	rod_attr unidentiifed_rod;

Object rod_of_stalking "Stalking"	! 19 / 0x13
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'stalking',
	rod_action RodOfStalkingAction,
	devil_hint "It has no horticultural application.",
  has	rod_attr unidentiifed_rod;

Object rod_of_infinity "Infinity"	! 20 / 0x14
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque' 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'infinity',
	rod_action RodOfInfinityAction,
	angel_hint "Well, where might you have seen infinity before?",
  has	rod_attr unidentiifed_rod;

Object rod_of_husbandry "Husbandry"	! 21 / 0x15
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'husbandry',
	rod_action RodOfHusbandryAction,
	angel_hint "Perhaps you should look up ~husbandry~ in a dictionary.",
  has	rod_attr unidentiifed_rod;

Object rod_of_bronze "Bronze"	! 22 / 0x16
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'bronze',
	rod_action RodOfBronzeAction,
	angel_hint "Bronze is the key here. Have you seen any other bronze anywhere?",
  has	rod_attr unidentiifed_rod;

Object rod_of_sacrifice "Sacrifice"	! 23 / 0x17
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'sacrifice',
	rod_action RodOfSacrificeAction,
	angel_hint "Far, far too dangerous. The age of martyrs in the church is long gone, you know.",
  has	rod_attr unidentiifed_rod;

Object rod_of_luck "Luck"	! 24 / 0x18
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'luck',
	rod_action RodOfLuckAction,
	angel_hint "Well, if there's such a thing as luck, maybe this would help.",
  has	rod_attr unidentiifed_rod;

Object rod_of_ice "Ice"	! 25 / 0x19
  with	name 'rod' 'of' 'mahogany' 'featureless' 'plaque' 'rod' 'of' 'mahogany' 'featureless' 'plaque',
	after RodAfter,
	nw_to nothing,
	u_to rod_display_after,
	d_to "featureless mahogany rods",
	article "a",
	short rod_short,
	parse_name RodParse,
	rod_word 'ice',
	rod_action RodOfIceAction,
	angel_hint "Use only at heated moments, when affairs are delicately balanced.",
  has	rod_attr unidentiifed_rod;

Object rod_of_language "Language"	! 26 / 0x1a
  with	name 'rod' 'of' 'language',
	after RodAfter,
	nw_to MasterGameRods,
	u_to rod_display_after,
	article "the",
	short rod_short,
	parse_name RodParse,
	rod_action RodOfLanguageAction,
  has	rod_attr;

Object rod_of_returning2 "Returning"	! 27 / 0x1b
  with	name 'rod' 'of' 'returning',
	after RodAfter,
	nw_to MasterGameRods,
	u_to rod_display_after,
	article "the",
	short rod_short,
	parse_name RodParse,
	rod_action RodOfReturningAction,
  has	rod_attr;

Object rod_of_life "Life"	! 28 / 0x1c
  with	name 'life' 'high' 'rod' 'of',
	after LifeDeathLoveAfter RodAfter,
	before LifeDeathLoveBefore,
	nw_to rod_func1,
	u_to rod_display_after,
	initial "The High Rods of Life, Love and Death lean together in a pyramid at the top of the steep slope, balanced rather delicately.",
	description " .An adamantine rod, bearing a sculpted ",
	article "the",
	short rod_short,
	parse_name RodParse,
	rod_action LifeAction,
	angel_hint "Astonishing!  One of the three high Rods!",
  has	rod_attr high_rod;

Object rod_of_death "Death"	! 29 / 0x1d
  with	name 'death' 'high' 'rod' 'of',
	after LifeDeathLoveAfter RodAfter,
	before LifeDeathLoveBefore,
	nw_to rod_func1,
	u_to rod_display_after,
	description " .An adamantine rod, bearing a sculpted ",
	article "the",
	short rod_short,
	parse_name RodParse,
	rod_action LifeAction,
	angel_hint "Astonishing!  One of the three high Rods!",
  has	concealed rod_attr high_rod;

Object rod_of_love "Love"	! 30 / 0x1e
  with	name 'love' 'high' 'rod' 'of',
	after LifeDeathLoveAfter RodAfter,
	before LifeDeathLoveBefore,
	nw_to rod_func1,
	u_to rod_display_after,
	description " .An adamantine rod, bearing a sculpted ",
	article "the",
	short rod_short,
	parse_name RodParse,
	rod_action LifeAction,
	angel_hint "Astonishing!  One of the three high Rods!",
  has	concealed rod_attr high_rod;

Object crumpled_piece_of_paper "crumpled piece of paper"	! 31 / 0x1f
  with	name 'crumpled' 'paper',
	nw_to n_obj,
	description "   Things to do:^^   1. Find map^   2. Phone airport to check parking^   3. Health forms...^^and so on. Let's face it, 1. is more enticing than the rest put together.",
	devil_hint "Immensely useful, that.",
  has	;

Object electric_torch "electric torch"	! 32 / 0x20
  with	name 'electric' 'torch' 'compartment',
	after TorchAfter,
	before TorchBefore,
	nw_to s_obj,
	description "The torch has a battery compartment which can be reached by opening it up.",
	article "an",
	daemon TorchTimer,
	devil_hint "Pity you can't change the batteries.",
  has	container light moved openable;

Object -> old_smudged_battery "old smudged battery"	! 33 / 0x21
  with	name 'old' 'smudged' 'battery',
	nw_to s_obj,
	article "an",
	number 200,
  has	battery_flag;

Object chocolate_biscuit "chocolate biscuit"	! 34 / 0x22
  with	name 'chocolate' 'biscuit',
	before BiscuitBefore,
	description "Oatmeal covered with plain chocolate, since you ask.",
	devil_hint "I bet you didn't know that chocolate biscuit manufacturers are damned in perpetuity?  I'm afraid the chapters about that in the Old Testaments were lost, though, and now no-one can remember why.",
  has	edible moved;

Object Attic "Attic"	! 35 / 0x23
  with	name 'beams' 'wiring' 'floor' 'floorboards',
	n_to Old_Winery,
	s_to Old_Furniture,
	e_to Servants_Room,
	d_to hinged_trapdoor,
	description "The attics, full of low beams and awkward angles, begin here in a relatively tidy area which extends north, south and east. The wooden floorboards seem fairly sound, just as well considering how heavy all these teachests are. But the old wiring went years ago, and there's no electric light.",
	section T_MODERN,
  has	;

Object -> hinged_trapdoor "hinged trapdoor"	! 36 / 0x24
  with	name 'hinged' 'trap' 'door' 'trapdoor',
	after TrapdoorAfter,
	before TrapdoorBefore,
	n_to House,
	s_to "There is a closed trapdoor in the middle of the floor.",
	w_to thedark,
	initial "A hinged trapdoor in the floor stands open, and light streams in from below.",
  has	door light open openable static;

Object -> teachests "teachests"	! 37 / 0x25
  with	name 'tea' 'chests' 'teachests' 'chest' 'teachest',
	after TeachestsAfter,
	description "Open-topped. You could easily look inside, if so minded.",
	article "some",
  has	container open scenery;

Object -> -> Meldrewes_History "History of the Meldrews (vol. II)"	! 38 / 0x26
  with	name 'book' 'history',
	after HistoryAfter,
	nw_to n_obj,
	description "It was to have been the Honourable Peter Meldrew's life's work, a two-volume edition giving the definitive family history. Unfortunately, although he claimed to have hunted for evidence to the ends of the earth, he never could find a detail he wanted for volume I, and it was never published. Somehow, this typifies your family, and consulting this worthy book about your ancestors makes you realise what an uncanny knack they had for never quite achieving anything.^^Unless, of course, you count having an awful lot of children. So many Meldrews are listed here that you'll have to look them up individually.",
	article "the",
	parse_name ConsultableParsename,
	devil_hint "What a boring old book!  There's nobody worth looking up.",
  has	concealed consultable;

Object antique_jewellery_box "antique jewellery box"	! 39 / 0x27
  with	name 'antique' 'jewellery' 'box',
	e_to delicate_gold_key,
	initial "In one corner is a jewellery box, which had previously been hidden by the open trapdoor.",
	description "A graceful lady's box, bearing the initials A. M. and engraved with a drawing of what seems to be a rabbit's foot.",
	article "an",
	angel_hint "Try investigating the world of the romantic novel, out on the balconies of life.",
  has	concealed container lockable locked openable;

Object -> four_leafed_clover "four-leafed clover"	! 40 / 0x28
  with	name 'four' 'leafed' 'clover',
	description "Actually a four-leafed sprig of herb paris (Paris Quadrifolia) in the shape of a fourfold true-love knot. But that was good enough for Alison.",
	rod_assoc rod_of_luck,
	angel_hint "Not much use as it is, is it?",
  has	hidden_rod;

Object House "House"	! 41 / 0x29
  with	before HouseBefore,
	section T_MODERN,
  has	light;

Object Servants_Room "Servant's Room"	! 42 / 0x2a
  with	name 'bedside' 'table',
	after ServantsRoomAfter,
	n_to nothing,
	w_to Attic,
	d_to nothing,
	description "Once upon a time, servants in great houses lived in awful little crevices and excuses for rooms like this one. They must have been in permanent danger of suffocation, for there are no windows and only a doorway to the west. A bed is still kept here, and the sight of it brings on drowsiness in all this warm stuffy air. All you want to do is curl up and sleep.",
	section T_MODERN,
  has	;

Object -> classical_dictionary "classical dictionary"	! 43 / 0x2b
  with	name 'hobsons' 'choice' 'classical' 'dictionary' 'book',
	after DictionaryAfter,
	nw_to n_obj,
	initial "There's a little book on the tiny bedside table.",
	description "~Hobson's: A Choice Classical Dictionary~. It claims to have numerous entries.",
	article "Hobson's",
	parse_name ConsultableParsename,
	devil_hint "Lots of naughty words in that one.",
  has	consultable;

Object -> servants_bed "camp bed"	! 44 / 0x2c
  with	name 'camp' 'bed',
  has	enterable scenery supporter;

Object -> old_striped_scarf "old striped scarf"	! 45 / 0x2d
  with	name 'old' 'striped' 'scarf',
	initial "An old striped scarf hangs up behind the doorway.",
	description "This is an old Biblioll College scarf, made by Dunn and Co. (naturally). It has four stripes: royal blue, emerald, dark grey and scarlet.",
	article "an",
	devil_hint "The very height of fashion, if you ignore the colours and wear it regardless.",
  has	clothing;

Object tight_door "tight door"	! 46 / 0x2e
  with	name 'tight' 'door',
	initial "A tight door stands open in the northern wall, giving onto the servants' staircase.",
  has	static;

Object Old_Furniture "Old Furniture"	! 47 / 0x2f
  with	name 'armchairs' 'umbrella' 'table' 'stand' 'rubbish' 'armchair',
	n_to Attic,
	se_to Over_the_East_Wing,
	description "Scruffy old furniture is piled up here: armchairs with springs coming out, umbrella stands, a badly scratched cupboard, a table with one leg missing... You try to remember why you keep all this rubbish, and fail. Anyway the attic continues to the southeast.",
	cant_go "The attic turns from north to southeast here.",
	section T_MODERN,
  has	;

Object -> furniture "furniture"	! 48 / 0x30
  with	name 'furniture',
	description "Nothing there, but that cupboard looks interesting.",
  has	scenery;

Object -> scratched_cupboard "scratched cupboard"	! 49 / 0x31
  with	name 'scratched' 'cupboard',
  has	container open openable scenery;

Object -> -> bird_whistle "bird whistle"	! 50 / 0x32
  with	name 'bird' 'whistle' 'harrison',
	after WhistleAfter,
	description "A patent ~Harrison~ bird-whistle, according to the slogan on one side.",
	devil_hint "It has a calm, soothing effect.",
  has	;

Object -> -> gift_wrapped_parcel "gift-wrapped parcel"	! 51 / 0x33
  with	name 'gift' 'parcel',
	after ParcelAfter,
	devil_hint "Shame the wrapping paper won't come off.",
  has	;

Object -> -> medicine_bottle "mb"	! 55 / 0x37
  with	name 'medicine' 'bottle',
	after MedicineAfter,
	initial nothing,
	description "~Antidote only: no preventative effect.~",
	short MedicineShort,
	devil_hint "These bottles can even survive long drops, so perhaps you should try fire.",
  has	container locked openable;

Object -> -> -> red_tablet "red tablet"	! 56 / 0x38
  with	name 'red' 'pill' 'tablet',
	before TabletBefore,
	devil_hint "This drug is for fun, it isn't an antidote. And it tastes gorgeous...",
  has	edible scored;

Object box_of_chocolates "box of chocolates"	! 52 / 0x34
  with	name 'box' 'of' 'chocolate' 'chocs',
	devil_hint "Far too nice to give to anybody else. In fact...",
  has	edible;

Object wrapping_paper "wrapping paper with reindeer on"	! 53 / 0x35
  with	name 'wrapping' 'paper' 'reindeer',
	article "some",
	devil_hint "The reindeer have enormous significance.",
  has	;

Object postcard_of_the_Champs_Elysees "postcard of the Champs-Elysees"	! 54 / 0x36
  with	name 'postcard' 'card',
	before PostcardBefore,
	nw_to n_obj,
	description "It is addressed to the house, and postmarked 1963, but has no message. Odd, that.",
	devil_hint "There's no message there to read.",
  has	;

Object Over_the_East_Wing "Over the East Wing"	! 57 / 0x39
  with	name 'steps',
	s_to Disused_Observatory,
	e_to East_Annexe,
	w_to Dark_Room,
	nw_to Old_Furniture,
	d_to Disused_Observatory,
	initial OverEastWingInitial,
	description "The air is dusty and warm, almost making you choke in this rather empty area. The attic turns from northwest to east, and there is also a tight doorway leading west. A short flight of wooden steps leads down and to the south.",
	section T_MODERN,
  has	;

Object -> Austin "Austin"	! 58 / 0x3a
  with	name 'austin' 'cat' 'ginger' 'tail',
	after AustinAfter,
	before AustinBefore,
	life AustinLife,
	initial "Austin, your incorrigible ginger cat, lounges around here.",
	description "(Aunt Jemima has two cats, Jane and Austin, but she finds Austin especially annoying - about the only point you have ever agreed with her about.)^^Austin, a ginger with a long tail and an uncompromisingly lazy expression, is the kind of cat who hates being pushed around.",
	daemon AustinDemon,
  has	animate proper;

Object Dark_Room "Dark Room"	! 59 / 0x3b
  with	before DarkRoomBefore,
	e_to Over_the_East_Wing,
	description "This is a roughly-furnished photographer's dark room, used by your grandfather years ago. There's nothing much here now, since you threw the chemicals out in case the children found them.",
	cant_go "The only doorway is back east.",
	section T_MODERN,
  has	;

Object -> sepia_photograph "sepia photograph"	! 60 / 0x3c
  with	name 'sepia' 'photo' 'photograp' 'plaque',
	initial "Mounted on a plaque is an old sepia photograph of a man.",
	description "The photograph is one of the very early ones which looks as if it was taken in the dark because the chemicals have gradually oxidised. The poor man in the frame (Mr Roger Meldrew, Esquire) looks as if he was propped up by a big clamp to hold him still for five minutes, and that's because he was.",
	article "the old",
  has	static;

Object -> hanging_cord "hanging cord"	! 61 / 0x3d
  with	name 'hanging' 'cord',
	after HangingCordAfter,
	initial "You bump your head on the cord hanging from the ceiling, for the umpteenth time.",
	description "It is attached to the ceiling.",
  has	static;

Object -> -> golden_orb "glowing golden orb"	! 393 / 0x189
  with	name 'glowing' 'golden' 'orb',
	after GlowingOrbAfter,
	initial "Sitting on the grass, beside the well, is a glowing golden orb.",
	description "A treasure in every sense, but misted over, like condensation on a cold window. Odd shapes seem visible through the haze: a horse's head, castle walls, a priest's crook.",
  has	scored;

Object -> photographers_flash "photographer's flash"	! 63 / 0x3f
  with	name 'photograp' 'flash' 'compartment',
	after FlashAFter,
	nw_to s_obj,
	initial "A rather more modern photographer's flash lies on a shelf to one side.",
	description "The kind of black box which often sits on top of a camera, used to illuminate otherwise dim scenes. It has an openable compartment on the side, with room left inside for a battery and a timer mechanism (which seem to be optional extras).",
	angel_hint "When you can get this working, perhaps you should take it somewhere prominent.",
  has	container openable;

Object red_lamp "red lamp"	! 62 / 0x3e
  with	name 'red' 'lamp' 'light' 'developing',
	description "Things do look subtly different in this light.",
  has	scenery;

Object Disused_Observatory "Disused Observatory"	! 64 / 0x40
  with	name 'mural' 'zodiac' 'beam' 'stand',
	before ObservatoryBefore,
	n_to Over_the_East_Wing,
	s_to Souvenirs_Room,
	w_to Library_Storage,
	u_to Over_the_East_Wing,
	d_to Souvenirs_Room,
	description "Once upon a time, this small circular room had a dome and a telescope, but it leaked dreadfully and so now there's a proper roof.^^A circular mural painted with the signs of the zodiac is interrupted by a short flight of stairs leading up to the north, a smoke detector, a west doorway to a shadowy alcove and the continuation of the stairs down and to the south.",
	section T_MODERN,
  has	;

Object -> smoke_detector "smoke detector"	! 65 / 0x41
  with	name 'smoke' 'detector' 'alarm' 'fire',
	description "It isn't at all clear on what principle the detector works. It looks like a smoke detector, certainly. But you just left the contractors to sort out all those boring fire prevention matters for themselves.^^They were a slap-dash firm, too, from what you remember. They put the little white thing high up, right in the middle of the Capricorn scene on the mural. And even if there was a fire, chances are it would be useless.",
  has	scenery;

Object -> solid_glass_ball "solid glass ball"	! 66 / 0x42
  with	name 'glass' 'ball',
	after GlassBallAfter,
	initial "Mounted on the old telescope stand is what looks like a solid glass ball.",
  has	static;

Object Library_Storage "Library Storage"	! 67 / 0x43
  with	name 'tank',
	e_to Disused_Observatory,
	description "Once upon a time, the house library was used as a gun-room, and all the unwanted books kept up here. Now this is just another awkward cranny, with a water tank and some pipes in one corner which are something to do with the central heating.",
	cant_go "From here, you can only squeeze back east to the observatory.",
	section T_MODERN,
  has	;

Object -> water_pipe "water pipe"	! 68 / 0x44
  with	name 'water' 'pipe' 'joint' 'pipes',
	after WaterPipeAfter,
	description "The joint on the water pipe looks none too sturdy.",
  has	concealed static;

Object -> romantic_novel "romantic novel"	! 69 / 0x45
  with	name 'romance' 'romantic' 'novel' 'book',
	after RomanticNovelAfter,
	nw_to n_obj,
	initial "A romantic novel and a book of poetry are the only books left, and they're propping up a water pipe near a rather loose joint - it really is time you called a plumber to sort this one out.",
	description "~Coronets for the Cotton Girl~, by Miss Marie Swelldon, published London, 1912. It's all about the happy-go-lucky daughter of a Yorkshire mill owner and her adventures marrying into the aristocracy.",
	parse_name ConsultableParsename,
	devil_hint "Don't bother reading or thinking about it. Nothing to do with your family.",
  has	consultable;

Object -> book_of_Twenties_poetry "book of Twenties poetry"	! 70 / 0x46
  with	name 'poetry' 'book',
	after PoetryAfter,
	nw_to n_obj,
	parse_name ConsultableParsename,
	devil_hint "My my, a golden age for clear, simple poetry. At last, an end to the dreary obscurity of Tennyson, Kipling and Hardy.",
  has	concealed consultable;

Object Souvenirs_Room "Souvenirs Room"	! 71 / 0x47
  with	name 'souvenirs' 'holiday' 'snaps' 'beam',
	after SouvenirsRoomAfter,
	before SouvenirsRoomBefore,
	n_to Disused_Observatory,
	s_to SouvenirsRoomSouth,
	u_to Disused_Observatory,
	description "This is where you ought to have left the wretched map, in the family lumber-room of souvenirs and holiday snaps. You checked it thoroughly earlier, and can't bear the thought of searching it all again. A slide projector is aimed at the whitewashed south wall, one of the outside walls of the house. The only way to go is back up to the observatory.",
	section T_MODERN,
  has	;

Object -> slide_projector "slide projector"	! 72 / 0x48
  with	name 'slide' 'projector' 'switch' 'dial' 'slot' 'focus',
	after ProjectorAfter,
	before ProjectorBefore,
	description "It has an on/off switch on the side, and a slot for holding whatever is to be projected. There is also a little dial on the back, perhaps for the focus.",
  has	container open scenery switchable;

Object -> south_wall "south wall"	! 73 / 0x49
  with	after SouthWallAfter,
	n_to nothing,
	w_to ne_obj,
  has	concealed door open scenery static;

Object East_Annexe "East Annexe"	! 74 / 0x4a
  with	name 'gap' 'tiles' 'roof',
	after EastAnnexeAfter,
	n_to cupboard_door,
	s_to Dead_End,
	w_to Over_the_East_Wing,
	description " .This tight annexe at the eastern end of the house is piled up with old loft insulation rolls, left over from the last time the job was done (whenever that was). A gap between the tiles of the roof (which you really must mend before winter) lets a little natural light in",
	section T_MODERN,
  has	light;

Object -> insulation_rolls "insulation rolls"	! 75 / 0x4b
  with	name 'insulation' 'rolls' 'roll',
	after InsulationAfter,
	article "some",
  has	scenery;

Object -> -> new_battery "new-looking battery"	! 76 / 0x4c
  with	name 'new' 'battery',
	nw_to s_obj,
	number 300,
	devil_hint "That is a difficult puzzle, yes.",
  has	battery_flag;

Object -> cupboard_door "cupboard door"	! 77 / 0x4d
  with	name 'cupboard' 'door',
	after CupboardAfter,
	n_to Inside_Cupboard,
	s_to "In the north wall is an intriguing closed cupboard door.",
	e_to small_brass_key,
	w_to w_obj,
	initial "In the north wall is an open cupboard door, large enough to step inside.",
  has	door lockable openable static;

Object Dead_End "Dead End"	! 78 / 0x4e
  with	name 'soot' 'chimney' 'sweeping' 'gear',
	after DeadEndAfter,
	n_to East_Annexe,
	s_to secret_door,
	e_to nothing,
	d_to nothing,
	description "The winding attic comes to a dead end here, and particularly dirty it is too, what with soot everywhere from the broken old chimney sweeping gear.",
	section T_MODERN,
  has	;

Object -> canvas_rucksack "canvas rucksack"	! 79 / 0x4f
  with	name 'canvas' 'rucksack' 'sack',
	initial "Great Scott!  That old canvas rucksack must be the very one your famous ancestor, the African explorer Ebenezer Meldrew, brought back from the Zambezi Expedition of 1882!",
	description "On second thoughts, now you look at more closely, it seems to be the rucksack you bought to go to Paris with five years ago.",
	devil_hint "It might be handy, if only it could carry anything.",
  has	clothing container open openable;

Object secret_door "secret door"	! 80 / 0x50
  with	name 'secret' 'door',
	n_to Alisons_Writing_Room,
	s_to "The secret door is closed.",
	w_to ne_obj,
	initial "A secret door stands open in the south wall!",
  has	concealed door open openable static;

Object fire_escape "fire escape"	! 81 / 0x51
  with	name 'fire' 'escape' 'hatchway' 'hatch',
	n_to Beside_the_Drive,
	w_to thedark,
	initial "A hatchway in the east wall, onto an old iron fire escape, is open and light floods in through it. (Some fool must have set the alarm off.)",
  has	door open static;

Object Inside_Cupboard "Inside Cupboard"	! 82 / 0x52
  with	s_to East_Annexe,
	w_to big_iron_fireplace,
	u_to cranked_skylight,
	description "This is a surprisingly spacious cupboard, which you can't recall ever visiting before today. You really ought to use this convenient empty room for something...",
	section T_MODERN,
  has	;

Object -> painting_of_Mad_Isaac_Meldrewe "painting of Mad Isaac Meldrewe"	! 83 / 0x53
  with	name 'painting' 'of' 'mad' 'isaac' 'picture',
	before IsaacPaintingBefore,
	life LagachLife,
	initial "A large painting of Mad Isaac Meldrewe, your eighteenth-century ancestor, is propped up against the west wall.",
	description "It used to hang in the downstairs landing, and the red, deranged eyes annoyed everybody who passed. Then Aunt Jemima picked up the ridiculous idea that it was by Sir Joshua Reynolds and had it valued. Happily it wasn't and, to cut a long story long, it ended up here.",
	devil_hint "Carry this with you everywhere you go.",
  has	;

Object -> big_iron_fireplace "big iron fireplace"	! 84 / 0x54
  with	name 'iron' 'fireplace' 'chimney',
	before FireplaceBefore,
	n_to Chimney,
	w_to nw_obj,
	initial "There is a big iron fireplace in the west wall.",
  has	concealed container door open static;

Object -> cranked_skylight "cranked skylight"	! 85 / 0x55
  with	name 'crank' 'cranked' 'skylight' 'handle',
	after SkylightAfter,
	n_to Roof,
	s_to "Above you is a blacked-out skylight with a crank handle.",
	w_to in_obj,
	initial "The skylight above is open, and the sky does indeed light the room.",
	description "It was painted out black during the first wave of Zeppelin air raids in World War I. This is completely irrelevant, but you did ask.",
  has	door static;

Object -> gas_mask "gas mask"	! 86 / 0x56
  with	name 'gas' 'mask' 'gasmask',
	before GasMaskBefore,
	devil_hint "The cork filters have gone. It's useless now.",
  has	clothing;

Object Roof "Roof"	! 87 / 0x57
  with	name 'roof' 'balcony' 'skylight' 'tiles' 'tile' 'catwalk',
	nw_to Battlements,
	d_to Inside_Cupboard,
	description "This is a recessed area of the roof, open to the skies but screened from below. There used to be a flagpole here, but not any more. An open skylight leads down, and a fairly safe catwalk leads northwest. However, the red-tiled roof is vertiginous and you have vertigo, which makes it especially annoying that there's an odd little balcony too far away to the south.",
	cant_go "William Wordsworth once described poetry as emotion recollected in tranquillity. If so, hospitals must be full of people turning out verses about what it was like to fall off the roof of a high building. Perhaps it might be better not to join them.",
	section T_MODERN,
  has	light;

Object Battlements "Battlements"	! 88 / 0x58
  with	name 'battlements' 'crenellations',
	se_to Roof,
	description "The old crenellated battlements of the house. An Englishman's home is, of course, his castle, but Meldrew Hall never saw much fighting and these military-looking features were just a seventeenth-century fashion. They also weren't intended for standing on, and the only safe way to proceed is back southeast.^^It is peculiarly cold here.",
	cant_go "The rooftop is far too dangerous in that direction.",
	section T_MODERN,
  has	light;

Object -> iron_key "gothic-looking iron key"	! 89 / 0x59
  with	name 'gothic' 'looking' 'iron' 'key' 'gothic-looking',
	after GothicKeyAfter,
	nw_to Compass,
	initial IronKeyInitial,
	devil_hint "Unfortunately, what you need this for is up in the clouds.",
  has	scored;

Object -> Sir_Joshua_Meldrewe "Sir Joshua Meldrewe"	! 90 / 0x5a
  with	name 'ghost' 'of' 'sir' 'joshua' 'meldrewe' 'meldrew' 'georgian',
	life GhostLife,
	description "He is dressed in a grey shadow of Georgian finery.",
	article "the ghost of",
	number 0,
	daemon JoshuaMeldreweDaemon,
  has	animate concealed;

Object Chimney "Chimney"	! 91 / 0x5b
  with	after ChimneyAfter,
	e_to Inside_Cupboard,
	d_to Priest_s_Hole,
	description "The chimney is cramped, sooty, unpleasant and has no floor to speak of, so you are held up only by jamming your feet against the walls. To the east, through the fireplace, is the cupboard.",
	cant_go "Not a chance!",
	section T_MODERN,
  has	;

Object -> sooty_old_stick "sooty old stick"	! 92 / 0x5c
  with	name 'sooty' 'stick',
	initial "Wedged loosely in beside you is a sooty old stick.",
	rod_assoc rod_of_fire,
	devil_hint "It's exactly what it seems.",
  has	hidden_rod;

Object Priest_s_Hole "Priest's Hole"	! 93 / 0x5d
  with	name 'cross' 'padded' 'chute' 'crawl',
	after PriestHoleAfter,
	u_to Chimney,
	d_to hatch,
	description "Good heavens, so the house has a priest hole after all!  It was always a family legend but nobody seemed to know quite where it was. Apart from a cross painted on one wall and a padded floor (to absorb the noise), this spartan cranny is featureless. Nevertheless there is a spooky air of the supernatural about... A narrow crawl leads up into the chimney.",
	section T_MODERN,
  has	scored;

Object -> hatch "hatch"	! 94 / 0x5e
  with	name 'hatch' 'door',
	n_to Cellar_West,
	s_to "Low down on one wall is a little hatch door, which if it were open would be large enough to enter.",
	e_to small_brass_key,
	w_to thedark,
	initial "An open hatch-door in the wall at floor level reveals a chute leading down into darkness.",
	description "Perhaps the attic key might unlock it?  It does look modern compared to everything else here.",
  has	door lockable locked openable static;

Object -> ancient_prayer_book "ancient prayer book"	! 95 / 0x5f
  with	name 'diary' 'ancient' 'prayer' 'book',
	after PrayerBookAfter,
	nw_to n_obj,
	initial "The dust and grime on the floor almost obscures an ancient prayer book.",
	description "Despite appearances, this is not a prayer book after all but is Mad Isaac's diary of supernatural investigations!  The script is cursive and cursory as he rambles on through all those theories about the Curse. There's so much of it that you'd better just look up particular years.",
	article "an",
	parse_name ConsultableParsename,
	devil_hint "The really good research was in his earlier years.",
  has	consultable;

Object Alisons_Writing_Room "Alison's Writing Room"	! 96 / 0x60
  with	name 'engraving' 'dice' 'outline' 'sixes' 'door',
	after WritingRoomAfter,
	before WritingRoomBefore,
	n_to Dead_End,
	s_to windows,
	description " .A pleasantly furnished, if now mildewed, box room. There are engravings of Alison's heroines: Christina Rossetti, Elizabeth Browning, Emily Dickinson and Queen Victoria, an unlikely quartet. The wallpaper is done out in a dice motif, and a square outline of sixes surrounds a rather small door leading back north into the attics.^^",
	cant_go "There's just the secret north door, unless of course you count the windows.",
	section T_MODERN,
  has	light;

Object -> comfortable_bed "comfortable bed"	! 97 / 0x61
  with	name 'comfortable' 'bed',
	after ComfyBedAfter,
  has	enterable light scenery supporter;

Object -> windows "windows"	! 98 / 0x62
  with	name 'windows' 'window' 'latticed' 'glass' 'lattice',
	after WindowAfter,
	n_to Tiny_Balcony,
	s_to "Blue sky can be seen through south-facing windows, latticed with black lead and shut tight.",
	w_to ne_obj,
	initial "Black-latticed windows open on a beautiful summer's day.",
  has	door static;

Object -> long_vanity_mirror "long vanity mirror"	! 99 / 0x63
  with	name 'long' 'vanity' 'mirror',
	after MirrorAfter,
	initial "There is a long vanity mirror beside the bed.",
  has	static;

Object Tiny_Balcony "Tiny Balcony"	! 100 / 0x64
  with	name 'roof' 'motorway' 'garden',
	n_to Alisons_Writing_Room,
	description "A tiny balcony around Miss Alison's windows, offering fresh air, blue skies and a magnificent view over the gardens down to the droning motorway in the distance. The roof is too perilous to scale even if you had a good reason (which you haven't), so you had better go back north.",
	cant_go "The rooftop is far too dangerous in that direction.",
	section T_MODERN,
  has	light;

Object -> window_sill "window sill"	! 101 / 0x65
  with	name 'window' 'sill',
	after WindowSillAfter,
	initial "The balcony is only a foot or so beneath the window-sill, and only about four feet square.",
	description "You look down on a low, bare window-sill.",
  has	static;

Object -> delicate_gold_key "delicate gold key"	! 102 / 0x66
  with	name 'delicate' 'gold' 'key',
	nw_to Compass,
	devil_hint "Gold and lead are naturally related, so you want to find a lead box to open.",
  has	concealed scored;

Object Old_Winery "Old Winery"	! 103 / 0x67
  with	name 'banister' 'rail' 'crack' 'paraphern',
	after OldWineryBefore,
	before routine84820,
	s_to Attic,
	e_to Storage_Room,
	w_to Conservatory,
	d_to Conservatory,
	description "This small cavity at the north end of the attic once housed all manner of home-made wine paraphernalia, now lost and unlamented. Steps, provided with a good strong banister rail, lead down and to the west, and the banister rail continues along a passage east.",
	number 0,
	daemon OldWineryDaemon,
	section T_MODERN,
  has	;

Object -> demijohn "labelled glass demijohn"	! 104 / 0x68
  with	name 'demijohn' 'glass' 'bottle' 'label',
	after DemijohnAfter,
	description "Faded ink on the label reads: Elderberry '63.",
  has	container openable static transparent;

Object -> -> obj105_nasty_looking_red_battery "nasty-looking red battery"	! 105 / 0x69
  with	name 'nasty' 'red' 'battery',
	nw_to s_obj,
	description "On the side is the word ~Achtung~.",
	devil_hint "It's provided for your torch, and not for anything else.",
  has	battery_flag;

Object -> -> tourist_map "tourist map"	! 106 / 0x6a
  with	name 'hamburg' 'tourist' 'map',
	after TouristMapAfter,
	nw_to n_obj,
	description "The good news is that it has excellent grid references, which are easy to look up. The bad news is that it is a map of central Hamburg.",
	devil_hint "Purely decorative.",
  has	;

Object Conservatory "Aunt Jemima's Lair"	! 107 / 0x6b
  with	name 'objets' 'trouves' 'pottery' 'bric' 'brac',
	before ConservatoryBefore,
	s_to Airing_Cupboard,
	e_to Old_Winery,
	w_to Potting_Room,
	nw_to House,
	u_to Old_Winery,
	description "This used to be called the Conservatory, before Aunt Jemima took it over to potter about with plants, painting and indeed (on occasion) pottery. She has filled the place with objets trouves and bric-a-brac, and hung up a home-made calendar of watercolours. Even the old airing cupboard to the south is cluttered.^^An open doorway leads back southwest onto the upstairs landing, and you can hear the chaotic noise of suitcases being manhandled about - good thing nobody's seen you. A narrow staircase leads up and to the east into the attic.^^Jemima herself seems to be in the potting room to the west.",
	section T_MODERN,
  has	light;

Object -> daisy_calendar "daisy calendar"	! 108 / 0x6c
  with	name 'calendar' 'page' 'pages' 'daisy',
	after CalendarAfter,
	time_left 5,
  has	scenery;

Object Airing_Cupboard "Airing Cupboard"	! 109 / 0x6d
  with	name 'coffee' 'mugs' 'sculpture' 'racks' 'mug',
	n_to Conservatory,
	description "A space about six feet square. The old drying racks now contain odd ceramic sculptures almost but not quite unrecognisable as coffee mugs. One corner is filled with an enormous pile of tie-dyed sheets, from Aunt Jemima's infamous Sixties Revival period of last October.",
	cant_go "The only way to go from here is back north.",
	section T_MODERN,
  has	light;

Object -> pile_of_sheets "pile of sheets"	! 110 / 0x6e
  with	name 'pile' 'of' 'sheets' 'sheet',
	after SheetsAFter,
	daemon SheetsDaemon,
  has	scenery;

Object -> antiquated_wireless "antiquated wireless"	! 111 / 0x6f
  with	name 'switch' 'cabinet' 'radio' 'wireless',
	after WirelessAfter,
	before WirelessBefore,
	description "It rolls on casters, and has a bakelite on/off switch.",
	describe WirelessDescribe,
	article "an",
	number 0,
	daemon WirelessDaemon,
  has	concealed static switchable;

Object Potting_Room "Potting Room"	! 112 / 0x70
  with	name 'plants' 'flowers' 'seeds' 'trowels',
	before PottingRoomBefore,
	e_to Conservatory,
	description "This light room is full of pot plants, flowers, seeds, ornamental trowels and other miscellaneous garden implements.",
	cant_go "The only exit is back east to the conservatory.",
	section T_MODERN,
  has	light;

Object -> old_gardeners__gloves "old gardeners' gloves"	! 113 / 0x71
  with	name 'old' 'gardeners' 'gloves',
	after GlovesAfter,
	initial "A pair of yellow rubber gloves hangs from a hook on one wall.",
	article "some",
	devil_hint "Good for nothing. Why would you want gloves on?",
  has	clothing scored;

Object -> Jemima "Jemima"	! 114 / 0x72
  with	name 'aunt' 'jemima',
	life JemimaLife,
	initial "Aunt Jemima, who has for years collected varieties of daisy, is engaged in her regular annual pastime of deciding which species make the best chains.",
	description "She's been fiddling about with those cut flowers all afternoon. And she's a bit upset at being left alone in the house while you're off on holiday, so best not to get on her bad side. You really ought to make it up to her somehow.",
	article "Aunt",
	number 0,
	daemon JemimaDaemon,
  has	animate proper;

Object daisy_chain "daisy chain"	! 115 / 0x73
  with	name 'daisy' 'chain' 'daisychain',
	after DaisyChainAfter,
	u_to DaisyUp,
	number 11,
	devil_hint "Dangerous to wear. But at least any sort of daisies will do.",
  has	clothing;

Object Storage_Room "Storage Room"	! 116 / 0x74
  with	after StorageRoomAfter,
	w_to Old_Winery,
	description "A disused storage room off the winery. In one wall is an opening onto an ominous dark shaft, and beside it is a big Victorian-steam-engine style wheel with a handle on.",
	cant_go "The only doorway is back west to the winery.",
	section T_MODERN,
  has	;

Object -> wheel2 "wheel"	! 117 / 0x75
  with	name 'wheel' 'handle' 'catch' 'safety',
	after WheelAfter,
	description "There is a concealed safety catch (poorly) hidden on the wheel.",
  has	on scenery switchable;

Object -> dumbwaiter "dumbwaiter"	! 118 / 0x76
  with	name 'dumb' 'waiter' 'dumbwaiter',
	initial "Inside the dark shaft is the old dumbwaiter.",
	article "the old",
  has	container enterable open static;

Object -> -> pulley_ropes "pulley ropes"	! 121 / 0x79
  with	name 'pulley' 'rope' 'ropes',
	after RopesAfter,
	initial "The dumbwaiter hangs on strong pulley ropes which stretch up and down from here.",
	article "the",
  has	static;

Object -> -> chicken_wishbone "chicken wishbone"	! 122 / 0x7a
  with	name 'wish' 'bone' 'wishbone' 'chicken',
	after WishboneBefore,
	description "The half which didn't get the wish, actually.",
	devil_hint "It isn't even mentioned in any of the books I've read.",
  has	;

Object -> dark_shaft_obj "dark shaft"	! 119 / 0x77
  with	name 'shaft' 'dark',
	before ShaftBefore,
	description "Uninviting.",
  has	container open scenery;

Object -> steel_wrench "steel wrench"	! 120 / 0x78
  with	name 'steel' 'wrench',
	before WrenchBefore,
	initial "A steel wrench gathers dust in the corner.",
  has	;

Object Dark_Shaft "Dark Shaft"	! 123 / 0x7b
  with	after Shaft2After,
	before ShaftAfter,
	n_to Dark_Passage,
	d_to Cellars,
	description "Halfway up, or else halfway down, and a dreary place it is too: nothing but a dark corridor leading north.",
	section T_MODERN,
  has	;

Object Dark_Passage "Dark Passage"	! 124 / 0x7c
  with	name 'coal' 'dust',
	after DarkPassageAfter,
	n_to metal_door,
	s_to Dark_Shaft,
	e_to sandstone_recess,
	d_to sandstone_recess,
	description "A passage which slants very slightly down to the south, which is full of coal dust, to which you are unfortunately allergic. Not somewhere to linger.",
	number 2,
	section T_MODERN,
  has	;

Object -> sandstone_recess "sandstone recess"	! 125 / 0x7d
  with	name 'sandstone' 'recess' 'shallow',
	n_to Sandstone_Passage,
	s_to "There is a shallow sandstone recess in the east wall.",
	w_to se_obj,
	initial "A secret passage slants down to the east through a sandstone recess.",
  has	door static;

Object -> metal_door "metal door"	! 126 / 0x7e
  with	name 'metal' 'door',
	before MetalDoorBefore,
	n_to Garden_Stream,
	s_to "At the north end is a closed metal door.",
	e_to small_brass_key,
	w_to w_obj,
	initial "At the north end is a metal door, standing open.",
  has	door lockable locked openable static;

Object Cellars "Cellars"	! 127 / 0x7f
  with	after CellarsAfter,
	s_to Cellars_South,
	e_to Wine_Cellars,
	w_to Cellar_West,
	description "Cobwebbed old cellars. There is nothing to see except an opening in one wall onto a dark shaft, and a big Victorian-steam-engine style wheel beside it with a handle on. The cellar continues east-to-west and south.",
	section T_MODERN,
  has	;

Object -> wheel "wheel"	! 128 / 0x80
  with	name 'wheel' 'handle' 'catch' 'safety',
	after WheelAfter,
	description "There is a concealed safety catch (poorly) hidden on the wheel.",
  has	on scenery switchable;

Object -> dark_shaft_obj2 "dark shaft"	! 129 / 0x81
  with	name 'shaft' 'dark',
	description "Uninviting.",
  has	container enterable open scenery;

Object -> little_window "little window"	! 130 / 0x82
  with	name 'little' 'window' 'vent' 'windowven' 'window-v',
	initial "There is a little closed window-vent low in the north wall.",
	description "You can just make out an impression of golden light.",
  has	static;

Object -> robot_mouse "robot mouse"	! 131 / 0x83
  with	name 'robot' 'mouse',
	life MouseLife,
	initial "In one corner is a dust-covered robot mouse.",
	description "Remember the late 1970s, when a craze for home-made robots swept the home computing world?  No, perhaps not, but here is a left-over from it anyway. The mouse is quite large (almost a foot wide and tall), and has a big smile painted on its metal chassis. It has surprisingly modern circuitry in, though, and is even humming very faintly, so someone must have put some work in on it recently.",
	devil_hint "It can't even follow orders.",
  has	talkable;

Object Wine_Cellars "Wine Cellars"	! 132 / 0x84
  with	name 'wine' 'woodlice' 'hexagonal' 'racks' 'shaft',
	after WineCellarsAfter,
	w_to Cellars,
	u_to WineCellarsUp,
	description " .The wine cellars are now quite badly stocked, many of the hexagonal racks being home only to woodlice now. Much of what there is was laid in by your father and has corked",
	cant_go "This is the eastern end of the cellars, from which you can only go west.",
	section T_MODERN,
  has	;

Object Cellars_South "Cellars South"	! 133 / 0x85
  with	n_to Cellars,
	description "The bricking-up of this cellar seems incomplete, because there is a hole about ten or eleven inches across in the west wall. You peer at this with interest but nothing is within reach inside, and it is far too small for you to wriggle through. The cellars go back north, and so, it would appear, do you.",
	section T_MODERN,
  has	;

Object -> hole_in_the_wall "hole in the wall"	! 134 / 0x86
  with	name 'hole' 'mousehole',
	after HoleAfter,
	life HoleLife,
  has	scenery talkable;

Object -> -> small_brass_key "small brass key"	! 135 / 0x87
  with	name 'small' 'brass' 'attic' 'key',
	nw_to Compass,
	initial "Lying where the mouse dropped it is a small brass-coloured key.",
	description "Brass is of course a non-magnetic copper-zinc alloy, so presumably this key also contains iron.",
	devil_hint "It isn't the attic key, I fear.",
  has	;

Object Cellar_West "Cellar West"	! 136 / 0x88
  with	s_to Hellish_Place,
	e_to Cellars,
	nw_to ironbound_door,
	d_to Hellish_Place,
	description "The west end of a disused and shadowy old cellar. It was bricked up when you were a child - you never did find out why. Perhaps the golden, jewelled staircase leading down into smoky mists to the south might be something to do with it.",
	section T_MODERN,
  has	;

Object -> ironbound_door "ironbound door"	! 137 / 0x89
  with	name 'iron' 'ironbound' 'door',
	after IronboundDoorAfter,
	n_to Infinity_Symbol,
	s_to "In the northwest wall is a heavy, imposing ironbound door.",
	e_to wrought_iron_key,
	w_to d_obj,
	initial "In the northwest wall the ironbound door stands open.",
	description "There are times when your life seems an endless sequence of locked doors, each harder to pass than the last. This one, though, has a feeling of the ultimate about it.",
	article "an",
  has	door lockable locked openable static;

Object Infinity_Symbol "Infinity Symbol"	! 138 / 0x8a
  with	name 'marble' 'disc' 'webs' 'icicle',
	before LemniscusBefore,
	se_to Cellar_West,
	description "An eerie, dark cave carved from crystal icicles of rock and strewn with great spiders' webs hung from the ragged stone, inhabited only by dead white insects. A narrow crevice opens out to an iron doorway and the warmth of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol.^^You shiver with foreboding, but inexplicably feel that the map you're looking for must be somewhere near here.",
	section T_MODERN,
  has	light scored;

Object -> circular_arc "circular arc"	! 139 / 0x8b
  with	name 'wells' 'circular' 'arc' 'socket' 'sockets' 'well',
	after ArcAfter,
	number 0,
  has	scenery;

Object -> lemniscus "lemniscus"	! 140 / 0x8c
  with	name 'lemniscus' 'infinity' 'symbol',
  has	scenery;

Object spherical_opening "spherical opening"	! 141 / 0x8d
  with	name 'gold' 'golden' 'spherical' 'opening' 'cavity',
	after SphericalOpeningAfter,
	initial "There is now a small spherical opening in one wall.",
	description "It would just hold a ball the size of your palm.",
  has	static;

Object Sandstone_Passage "Sandstone Passage"	! 142 / 0x8e
  with	e_to The_Octagon,
	w_to Dark_Passage,
	u_to Dark_Passage,
	d_to The_Octagon,
	description "A flight of sandstone steps, cut in the 1920s when an Egyptological craze was sweeping England, slants down from the coal-dust passage to the east.",
	section T_MODERN,
  has	light;

Object The_Octagon "The Octagon"	! 143 / 0x8f
  with	before OctagonBefore,
	w_to Sandstone_Passage,
	se_to White_Hallway,
	u_to Sandstone_Passage,
	description "A broad, dark octagonal room devoted to dull exhibits of the disastrous Nile Valley Expedition of '21 - the few good ones were donated to the British Museum. A back staircase leads west to the unbuilt extension, while the entrance seems to be the cobwebbed passage southeast. High windows on the northern face let in dim light.",
	cant_go "The only exits are via the southeast passage and the back staircase.",
	section T_MODERN,
  has	light;

Object -> little_window "little window"	! 144 / 0x90
  with	name 'little' 'window' 'vent',
	initial "There is a little window-vent high in the southwest wall.",
	description "You can just make out an impression of cellars.",
  has	static;

Object -> gilded_model_coffin "gilded model coffin"	! 145 / 0x91
  with	name 'gilded' 'model' 'coffin' 'lid' 'inscription',
	after CoffinAfter,
	before CoffinBefore,
	initial "A rather morbid, gilded model coffin rests here in peace.",
	description " .The lid bears an inscription in strange hieroglyphics:^",
  has	container openable static;

Object -> ragged_scroll "ragged scroll"	! 146 / 0x92
  with	name 'ragged' 'white' 'parchment' 'scroll',
	nw_to n_obj,
	initial "Leaned against one of the eight corners is a ragged white parchment scroll.",
	description "A lamentably naff tourist's gift, this seems to be a ~replica~ of one of the papyri on which some lost Greek play or other was written. Some nonsense about the priestess of Apollo being summoned by music, etcetera.^^It has all the charm of a tea-towel of, oh, say the Taj Mahal made out of curry.",
	devil_hint "What taste! What artistry!",
  has	;

Object -> framed_charcoal_sketch "framed charcoal sketch"	! 147 / 0x93
  with	name 'frame' 'framed' 'charcoal' 'sketch' 'of' 'alexandria',
	after SketchAfter,
	initial "A little charcoal sketch is framed on one wall.",
	description "Behind the frame seems to be an artist's impression of the great Palace of Alexandria as it might once have been.",
	devil_hint "It's the frame which really sets it off.",
  has	;

Object charcoal_sketch "charcoal sketch"	! 148 / 0x94
  with	name 'charcoal' 'sketch' 'of' 'alexandria',
	n_to Causeway,
	description "A miniature artist's impression of the great Palace of Alexandria as it might once have been.^^(No, the impression is miniature, not the artist.)",
	devil_hint "Charcoal is so unrealistic, don't you agree?  Besides, it's far too large and clumsy.",
  has	scored;

Object dog_eared_old_letter "dog-eared old letter"	! 149 / 0x95
  with	name 'old' 'letter',
	nw_to n_obj,
	description " .A faint typewritten letter, postmarked Cairo, October 1920, with a handwritten note signed simply ~Ellingsworth~:^^Hartley - Thought you might be able to date some of these queer pictograms and determinitives, early New Kingdom?  Pottery unclear, work continues^",
	devil_hint "The ravings of a madman. Ignore it.",
  has	;

Object White_Hallway "White Hallway"	! 150 / 0x96
  with	s_to Halfway_up_the_Stairs,
	ne_to Bricked_Path,
	nw_to The_Octagon,
	u_to Halfway_up_the_Stairs,
	description "A low, white hallway adjoining the Octagon, converted from what was once the scullery and the servants' pantry. A tight, dark staircase runs up and south; and a diagonal bricked path runs out northeast to the gardens.",
	section T_MODERN,
  has	light;

Object -> picture_hook "picture hook"	! 151 / 0x97
  with	name 'picture' 'hook',
	after HookAfter,
	initial "Up on one wall is a picture hook.",
  has	static;

Object -> umbrella_stand "umbrella stand"	! 152 / 0x98
  with	name 'umbrella' 'stand' 'elephants' 'foot',
	initial "There's an old-fashioned elephant's foot umbrella stand beside the garden doorway.",
	description "A deep old elephant's-foot umbrella stand.",
	article "an",
  has	container open static;

Object -> -> model_golden_sceptre "model golden sceptre"	! 430 / 0x1ae
  with	name 'model' 'golden' 'gold' 'sceptre',
	after SceptreAfter,
	before SceptreBefore,
	initial nothing,
	description "A copy, half-size, of the one from Tutenkhamun's sarcophagus. It isn't real gold, either.",
	number 0,
	angel_hint "Of no use to anyone these last two thousand years, sorry!",
  has	;

Object Halfway_up_the_Stairs "Halfway up the Stairs"	! 153 / 0x99
  with	u_to HalfwayUpStairsUp,
	d_to White_Hallway,
	description "This dark, steep staircase zigzagging through the house once gave the servants access throughout. But those days are long gone and now all the doors are locked up.",
	section T_MODERN,
  has	;

Object Unreal_City "Unreal City"	! 154 / 0x9a
  with	n_to Shadowy_Hallway,
	e_to Near_Ring_Road,
	w_to Down_by_River,
	description "This is a city side street, but as if seen through the grey of despair. People stream by, some of whom you almost recognise, as if dead. The street runs east-west, and to the north is a doorway into a grubby tenement building.",
	each_turn UnrealEachTurn,
	section T_UNREAL,
  has	light scored;

Object Shadowy_Hallway "Shadowy Hallway"	! 155 / 0x9b
  with	s_to Unreal_City,
	e_to Bohemia,
	u_to Consulting_Room,
	description "This shambolic flat, extending to the east, shares a filthy hallway with the one upstairs. To the south, passers-by pass by along the street. Peeling-away posters have been stuck up on top of each other on the walls, in such a way that you can only read the most recent.",
	section T_UNREAL,
  has	light;

Object -> poster "poster"	! 156 / 0x9c
  with	name 'poster' 'posters' 'peeling',
	after PosterAfter,
	description "~Bateaux Phlebas - toujours le dernier mot~. You briefly wish you had a dog called Toto, so as to be able to say ~Toto, I've got a feeling we're not in England any more.~",
	devil_hint "What a very useful piece of paper. Pity there's writing on it.",
  has	scenery;

Object Bohemia "Bohemia"	! 157 / 0x9d
  with	name 'easels' 'brushes' 'paint',
	w_to Shadowy_Hallway,
	initial BohemiaInitial,
	description "Flats occupied by starving-but-noble artists can be romantic and stylish despite the squalor. This one, however, is simply a one-room hovel, caked with paint, littered with brushes and improvised easels, and you can't help standing on tiptoe here.",
	section T_UNREAL,
  has	light;

Object -> Impressionist_painting "Impressionist painting"	! 158 / 0x9e
  with	name 'impressionist' 'painting' 'mural',
	life LagachLife,
	initial nothing,
	description "The bottom corner is signed simply ~Helene~.",
	article "an",
  has	static talkable;

Object Consulting_Room "Consulting Room"	! 159 / 0x9f
  with	name 'sevenbran' 'candelabra' 'sticks' 'table',
	after ConsultingRoomAfter,
	w_to "Peculiarly, the hanging curtain seems to be solid iron when you walk into it.",
	d_to Shadowy_Hallway,
	description "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads west. In the centre of the room is a table, on which is an electric bell push and a wicked Tarot pack.",
	section T_UNREAL,
  has	light;

Object -> Tarot_pack "Tarot pack"	! 160 / 0xa0
  with	name 'wicked' 'tarot' 'pack' 'deck',
	after TarotPackAfter,
  has	scenery;

Object -> curtain "curtain"	! 161 / 0xa1
  with	name 'curtain' 'bead',
  has	scenery;

Object -> bell_push "bell push"	! 162 / 0xa2
  with	name 'bell' 'push',
	after BellPushAfter,
  has	scenery;

Object Madame_Sosostris "Madame Sosostris, famous clairvoyante"	! 163 / 0xa3
  with	name 'sosostris' 'madame' 'clairvoyant',
	life routine97492,
	description "She has a bad cold, but nevertheless is known to be the wisest woman in Europe.",
  has	animate proper;

Object Death_card "Grim Reaper"	! 164 / 0xa4
  with	name 'death' 'grim' 'reaper' 'card' 'tarot',
	after TarotAfter,
	n_to Ruined_Castle_Cafe,
	nw_to "Tarot cards",
	description "Hood, scythe, skeleton, implacable grin: yes, it's the Reaper all right.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "It's vital you slide right along with this one.",
  has	card;

Object Fool_card "Fool"	! 165 / 0xa5
  with	name 'fool' 'card' 'tarot',
	after TarotAfter,
	n_to Ruined_Castle_Cafe,
	nw_to "Tarot cards",
	description "The Fool is a man looking directly ahead as he steps off the edge of a cliff.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "Don't worry, he won't slide down the cliff.",
  has	card;

Object Drowned_Sailor_card "Drowned Sailor"	! 166 / 0xa6
  with	name 'drowned' 'sailor' 'card' 'tarot',
	after TarotAfter,
	n_to Ruined_Castle_Cafe,
	nw_to "Tarot cards",
	description "Those are pearls that were his eyes...",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "He's one of my colleagues now, of course.",
  has	card;

Object oak_quarterstaff "oak quarterstaff"	! 167 / 0xa7
  with	name 'oak' 'staff' 'quarterst',
	article "an",
	rod_assoc rod_of_bronze,
	devil_hint "Shoddy workmanship, but never mind, it's only a staff and who needs those any more?",
  has	hidden_rod;

Object Down_by_River "Down by River"	! 168 / 0xa8
  with	name 'rats' 'mounds' 'rubbish',
	after DownByRiverAfter,
	e_to Unreal_City,
	w_to DownByRiverWest,
	description "Down at the end of the street, the brown urban waters carry by unpleasant rubbish, and rats scuttle up and over the mounds washed up around you.",
	section T_UNREAL,
  has	light;

Object -> silk_handkerchief "silk handkerchief"	! 169 / 0xa9
  with	name 'silk' 'handkerchier' 'hanky' 'hankie',
	after HandkerchiefAfter,
	initial "On one especially repellent mound is, of all things, a fine silk handkerchief.",
	description "Monogrammed J. A. P., but that's no great matter.",
	devil_hint "People had no style in those days, before they invented paper tissues. I mean this tatty cloth is hardly attractive, is it?",
  has	;

Object -> tourist_boat "tourist boat"	! 170 / 0xaa
  with	name 'tourist' 'boat' 'bateau',
	after TouristBoatAfter,
	n_to On_board_the_Phlebas,
	s_to "On the far bank is a glass-roofed tourist boat. As much as you like to explore, you can't see how to attract its attention.",
	w_to nw_obj,
	initial "Moored close to the bank is a glass-roofed tourist boat.",
	description "The side reads: PHLEBAS.",
  has	door static;

Object On_board_the_Phlebas "On board the Phlebas"	! 171 / 0xab
  with	name 'wheel',
	e_to Down_by_River,
	description "A tourist river-boat, glass-roofed. You can climb out to the shore to the east. At the helm is a very strange man, at times almost a straw dummy, almost perhaps a hollow cut-out made of paper. He (or it) turns the wheel and casts his eyes to windward.",
	section T_UNREAL,
  has	light;

Object -> hollow_man "hollow man"	! 172 / 0xac
  with	name 'hollow' 'man',
	life HollowManLife,
	initial "The hollow man mechanically says: ~Where to, guv'nor?  Me with my big mouth, I gone and done it again, calling you the guv'nor. I was down Margate Sands way once, had a bloke come on board, he thought any old destination would do, like a real place, like anywhere was real... We are the hollow men, I says, he didn't like that... Hurry up, please, it's time.~",
	description "Every now and then he whimpers.",
	article "the",
  has	animate;

Object Near_Ring_Road "Near Ring Road"	! 173 / 0xad
  with	name 'metro' 'pedestria' 'army',
	w_to Unreal_City,
	d_to Chatelet_les_Halles,
	description "A dry, desolate waste of buildings borders here on a main road, so full of black-suited pedestrians off to work at banks that you can't force your way any further east. Once in a while a few of the bowler-hatted army step into the street and down some steps below a Metropolitan sign.",
	cant_go "You can't force your way through the tide of bankers.",
	each_turn UnrealEachTurn,
	section T_UNREAL,
  has	light;

Object Chatelet_les_Halles "Chatelet-les-Halles"	! 174 / 0xae
  with	name 'gates',
	after ChateletAfter,
	u_to Near_Ring_Road,
	description "This is a vast underground station in great rectangular caverns, deep beneath the streets. You are outside the ticket gates, near a flight of steps back up to the city, and since you haven't a ticket you're likely to stay that way.",
	cant_go "Back up the stairs for you. Call yourself a traveller...",
	section T_UNREAL,
  has	light;

Object -> surly_shopkeeper "surly shopkeeper"	! 175 / 0xaf
  with	name 'surly' 'man' 'shopkeepe',
	life ShopkeeperLife,
	initial "Behind a kiosk, a surly-looking man is selling guide books and maps.",
	description "His jumper is unstriped, and there are no onions around his neck. Nonetheless he has a rather Gallic, disgruntled look to him. Perhaps he's a former Socialist cabinet minister.",
  has	animate;

Object tourist_map_of_Paris "tourist map of Paris"	! 176 / 0xb0
  with	name 'tourist' 'map' 'of' 'paris',
	description "Just the way you remember yours having been.",
	devil_hint "Burn it!  Burn it at once!",
	angel_hint "What a very useful map!  Now you can go on holiday.",
  has	;

Object Museum_Foyer "Museum Foyer"	! 177 / 0xb1
  with	name 'shadows' 'bats' 'lamps' 'rain',
	s_to FoyerSouth,
	ne_to Revolving_Door1,
	description "The Museum of Arcana is deserted after nightfall and only dimly lit by distant sodium street-lamps. Outside it is a stormy October night and rain beats against the windowpanes. Shadows swoop and dive in the air like bats.^^The revolving door to northeast, which leads out, seems to be solidly blocked off. But a dim passage runs south, through a strange metal corridor.",
	cant_go "There's no apparent way but south.",
	section T_HAMBURG,
  has	light scored;

Object -> revolving_door_obj "revolving door"	! 178 / 0xb2
  with	name 'revolving' 'door',
	after RevolvingDoorAfter,
	description "Why not go northeast and look inside?",
  has	scenery;

Object -> publicity_poster "publicity poster"	! 179 / 0xb3
  with	name 'poster' 'publicity' 'pretentio' 'exhibition',
	initial "A publicity poster is displayed for passers-by outside to see.",
	description "One of those pretentious exhibition posters. Your German is just about adequate to the task:^^~Cults of the Druids - a Major Retrospective, October-November 1988~.",
  has	static;

Object Revolving_Door1 "Revolving Door"	! 180 / 0xb4
  with	n_to RevolvingDoorNorth,
	e_to "The door only turns clockwise.",
	nw_to Museum_Foyer,
	description "Inside one quarter of the cramped revolving door, which is blocked off from the world outside and opens only onto the foyer, southwest.",
	cant_go "To north and east are the walls of the door.",
	section T_HAMBURG,
  has	light;

Object -> door1 "door"	! 181 / 0xb5
  with	name 'door' 'revolving',
	after MuseumDoorAfter,
	description "You stand within it.",
  has	scenery;

Object Revolving_Door2 "Revolving Door"	! 182 / 0xb6
  with	n_to RevolvingDoorNorth,
	e_to "The door only turns clockwise.",
	nw_to Museum_Foyer,
	description "Inside one quarter of the cramped revolving door, which is blocked off from the world outside and opens only onto the foyer, southwest.",
	cant_go "To north and east are the walls of the door.",
	section T_HAMBURG,
  has	light;

Object -> door2 "door"	! 183 / 0xb7
  with	name 'door' 'revolving',
	after MuseumDoorAfter,
	description "You stand within it.",
  has	scenery;

Object -> beach_ball "beach ball"	! 184 / 0xb8
  with	name 'striped' 'beach' 'ball',
	after BeachBallAfter,
	before BeachBallBefore,
	initial "A colourful, striped inflated beach ball bounces around.",
  has	;

Object Hall_of_Exhibits "Hall of Exhibits"	! 185 / 0xb9
  with	n_to Museum_Foyer,
	e_to Cabinet_Room,
	w_to Dark_Staircase,
	description "A great square gloomy room, just south of the foyer. There are square lintelled doorways east and west. The storm is dark, and the windows are high, but there's just enough light to see by.",
	section T_HAMBURG,
  has	light;

Object -> Tarot_box "Tarot box"	! 186 / 0xba
  with	name 'box' 'of' 'tarot',
	after TarotBoxAfter,
	initial "Resting on a little display table is a Tarot box.",
	devil_hint "There's nothing worthwhile in it.",
  has	container openable;

Object -> -> Castle "Castle"	! 190 / 0xbe
  with	name 'castle' 'card' 'tarot',
	after TarotAfter,
	n_to Ruined_Castle_Cafe,
	nw_to "Tarot cards",
	description "A stone castle on a hill.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "It leads nowhere.",
  has	card;

Object -> -> Star "Star"	! 191 / 0xbf
  with	name 'star' 'card' 'tarot',
	after TarotAfter,
	n_to Lighthouse,
	nw_to "Tarot cards",
	description "A single bright light in the darkness.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "Ugh, what a nasty bright light. Good thing you'll never go there.",
  has	card;

Object -> -> Eight_of_Wands_card "Eight of Wands"	! 192 / 0xc0
  with	name 'eight' 'of' 'wands' 'card' 'tarot',
	after TarotAfter,
	nw_to "Tarot cards",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	rod_assoc rod_of_infinity,
	devil_hint "There's less to this card than meets the eye.",
  has	card hidden_rod;

Object -> -> Maiden_card "Maiden"	! 193 / 0xc1
  with	name 'maiden' 'card' 'tarot',
	after TarotAfter,
	n_to Sea_Shore,
	nw_to "Tarot cards",
	description "Andromeda chained to a rock on the sea-shore.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "What an ugly girl!  Bet she's good for a laugh though.",
  has	card;

Object -> still_life "still life"	! 187 / 0xbb
  with	name 'long' 'painted' 'still' 'life' 'painting' 'disturbing',
	life LagachLife,
	initial "A long painted still life graces one wall near a corner.",
	description "A disturbing painting, perhaps by Edvard Munch, this is a still life of a seedling on a table, surrounded by a rusty iron rod with a star on the end, a glass bottle, a lamp and a bunch of keys. No doubt these arcane objects held some special significance for primitive tribes now absorbed into civilisation.",
  has	static talkable;

Object Dark_Staircase "Dark Staircase"	! 188 / 0xbc
  with	after DarkStaircaseAfter,
	before DarkStaircaseBefore,
	e_to Hall_of_Exhibits,
	u_to Hall_of_Exhibits,
	description "A dark staircase, turning from east to south as it descends. The hideous sound of arhythmic chanting can be heard from below.",
	section T_HAMBURG,
  has	light;

Object -> discarded_matchbook "discarded matchbook"	! 189 / 0xbd
  with	name 'match' 'matchbook' 'book',
	initial "On one step, an empty matchbook lies discarded.",
	description "It's from the Ruined Castle Cafe, and (like the Cafe) is matchless.",
	angel_hint "Ah, I fear it is only a token clue.",
  has	;

Object Ace_of_Cups_card "Ace of Cups"	! 194 / 0xc2
  with	name 'ace' 'of' 'cups' 'card' 'tarot',
	after TarotAfter,
	n_to Cups_and_Glasses,
	nw_to "Tarot cards",
	description "It shows a great many crystal-glass cups and glasses.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "It leads nowhere.",
  has	card;

Object Coven_Cell "Coven Cell"	! 195 / 0xc3
  with	after CovenCellAfter,
	description "An old administrative office of the museum, emptied and made into a prison cell: amateur but effective.",
	cant_go "There's definitely no way out of here.",
	number 0,
	daemon CovenCellDaemon,
	section T_HAMBURG,
  has	light;

Object -> goat "anxious-looking goat"	! 196 / 0xc4
  with	name 'anxious' 'goat' 'dobbin',
	life GoatLife,
	article "an",
  has	animate static;

Object -> crook "shepherd's crook"	! 197 / 0xc5
  with	name 'shepherds' 'crook',
	rod_assoc rod_of_husbandry,
	devil_hint "Just a crook. And what's wrong with crooks, that's what I say.",
  has	hidden_rod;

Object -> cell_door "cell door"	! 198 / 0xc6
  with	name 'cell' 'door',
	after CelldoorAfter,
	n_to Museum_Foyer,
	s_to "As you might expect, the cell door is closed.",
	w_to ne_obj,
  has	door locked openable static;

Object Cabinet_Room "Cabinet Room"	! 199 / 0xc7
  with	after CabinetRoomAfter,
	w_to Hall_of_Exhibits,
	description "An annexe to the museum, containing sundry archaelogical finds, badly labelled in German (which you can hardly read at the best of times) and securely pinioned inside glass cabinets. The storm outside thrashes against the narrow dark windows.",
	section T_HAMBURG,
  has	;

Object -> glass_cabinet "glass cabinet"	! 200 / 0xc8
  with	name 'glass' 'cabinet' 'pane',
	after CabinetAfter,
	s_to "One cabinet looks particularly vulnerable.",
	initial "You could just look inside the broken glass cabinet.",
	number 0,
	daemon CabinetDAemon,
  has	container static transparent;

Object -> -> smooth_round_stone "smooth round stone"	! 201 / 0xc9
  with	name 'smooth' 'round' 'pumice' 'metal' 'stone',
	after RoundStoneAfter,
	initial nothing,
	description "A smooth palm-sized disc, perhaps of pumice stone, painted in yellows and browns with a single star motif, around which (clockwise) are the words ~nog~, ~er~, ~ska~ and ~iw~. If you remember the label rightly, something funny has been done to a piece of metal embedded in the top, but your German wasn't up to understanding what.",
	angel_hint "Doesn't the shape strike you as familiar at all?  - There, that should point you in the right direction.",
  has	scored;

Object -> -> papyrus_fragment "papyrus fragment"	! 202 / 0xca
  with	name 'fragment' 'papyrus',
	description "Only one line has survived intact:^^.<anoppe> an-spe : ska er nog-er an-ge : to-ro-ma ka ur Al-x-an-dr u bir ka ur-a an-ge ur",
	angel_hint "You need more evidence before you can begin deciphering the language, I fear.",
  has	;

Object Ruined_Castle_Cafe "Ruined Castle Cafe"	! 203 / 0xcb
  with	name 'decor' 'arrows' 'quartet' 'waiter',
	before CafeBefore,
	initial CafeInitial,
	description "This crowded, bohemian cafe bears only a passing resemblance to the ruined castle of the Tarot card: the decor imitates castle walls and arrowslits. You find yourself sitting at a table for one in the centre of the cafe floor. It is noisy, bustling and cheery, and a string quartet plays Strauss under the chattering of German voices. Your chances of attracting a waiter are very slight.",
	cant_go "The crowd is lively and exciting, but also inconsiderate and bulky.",
	each_turn routine101652,
	section T_TAROT,
  has	light scored;

Object -> cafe_table "cafe table"	! 204 / 0xcc
  with	name 'cafe' 'table' 'leg' 'legs',
	after CafeTableAfter,
  has	scenery supporter;

Object complicated_looking_bomb "complicated-looking bomb"	! 205 / 0xcd
  with	name 'bomb',
	before BombBefore,
	initial "Taped loosely to the underside of the table is a complicated-looking bomb.",
	description "It contains a timer-detonator, a bundle of plastic explosives and many, many wires. The most obvious ones are green, red, blue and black. They would pull out of their loose sockets in the timer easily, so perhaps this bomb disposal nonsense isn't as tricky as people make out.",
	number 0,
	time_left 0,
	daemon BombDaemon,
  has	concealed container open;

Object -> timer_detonator "timer-detonator"	! 206 / 0xce
  with	name 'timer' 'detonater' 'detonator',
	after TimerAfter,
	number 10,
	time_left 0,
	daemon TimerDaemon,
	devil_hint "Time flies down here, you know. Eternity simply breezes by.",
	angel_hint "Good photographic gear that. You didn't get it from a... well, a bomb, I hope.",
  has	static;

Object -> green_wire "green wire"	! 207 / 0xcf
  with	name 'green' 'wire',
	after WireAfter,
  has	static wire;

Object -> red_wire "red wire"	! 208 / 0xd0
  with	name 'red' 'wire',
	after WireAfter,
  has	static wire;

Object -> blue_wire "blue wire"	! 209 / 0xd1
  with	name 'blue' 'wire',
	after WireAfter,
  has	static wire;

Object -> black_wire "black wire"	! 210 / 0xd2
  with	name 'black' 'wire',
	after WireAfter,
  has	static wire;

Object Cups_and_Glasses "Cups and Glasses"	! 211 / 0xd3
  with	name 'skylight' 'old' 'women' 'conspirators',
	n_to windowed_door,
	description "This basement room is filled with crate after crate of glasses and cups, enough for an entire hotel, or restaurant perhaps. Almost anything might be hidden among them. A little light comes in from an opaque skylight which is at street level outdoors. There is no way out of here, since the only door is shut tight.",
	cant_go "There's no apparent way out of here.",
	number 0,
	each_turn routine103924,
	section T_TAROT,
  has	light;

Object -> windowed_door "windowed door"	! 212 / 0xd4
  with	name 'door' 'window' 'windowed',
	n_to Cups_and_Glasses,
	w_to w_obj,
	description "Through the square window in the door you can see a bar at which staff are serving, and a very crowded and lively cafe-restaurant beyond. The cabaret act has her back to you, and a considerable amount of her front to the diners.",
  has	door lockable locked openable scenery;

Object -> cups_and_glasses "cups and glasses"	! 213 / 0xd5
  with	name 'crates' 'glasses' 'cups',
	after routine104396,
	article "numerous",
  has	scenery;

Object -> mounted_bottle "mounted bottle"	! 214 / 0xd6
  with	name 'mounted' 'whisky' 'glass' 'bottle',
	initial "An unlabelled whisky bottle, laid on its side and mounted on a wood plaque, lies deservedly unwanted on one of the crates.",
	description "Old, unwanted, dusty, empty.",
	angel_hint "The great challenge, of course, is to get a ship inside.",
  has	;

Object ship_in_a_bottle "ship in a bottle"	! 215 / 0xd7
  with	name 'ship' 'in' 'bottle',
	after routine104504,
	description "Within the whisky bottle is a model sailing ship, far too large to have passed the neck.",
	angel_hint "Oh, well done!  Why not take a closer look, you deserve it?",
  has	;

Object model_ship "model ship"	! 216 / 0xd8
  with	name 'model' 'sailing' 'ship' 'anchor' 'chain' 'mermaid' 'filigree' 'prow' 'stern',
	after routine104972,
	description "A superb model sailing ship, about six inches from prow to stern, immaculate in every detail from an anchor on a filigree chain to a carved mermaid up front.",
	angel_hint "The great challenge, of course, is to get it inside a bottle.",
  has	general;

Object stick_with_an_anchor "stick with an anchor"	! 217 / 0xd9
  with	name 'stick' 'with' 'anchor' 'chain' 'sticks' 'ship',
	after routine104972,
	description "A tightly-folded bundle of sticks, about six inches long, with a filigree chain and anchor hanging from it.",
	angel_hint "The great challenge, of course, is to get it inside a bottle.",
  has	;

Object Sea_Shore "Sea Shore"	! 218 / 0xda
  with	after routine105584,
	u_to Cliffs,
	description " .A rough rocky sea shore below barely-climbable cliffs, against which inviting deep blue sea laps. It seems to be early morning, soon after dawn, from the look of the sun on the water.^",
	cant_go "The rocks are too dangerous. You'll have to scale the cliff.",
	section T_TAROT,
  has	light;

Object -> Andromeda "Andromeda"	! 219 / 0xdb
  with	name 'andromeda' 'maiden',
	life routine106172,
	initial "Chained to the cliff face is the beautiful Andromeda, looking nobly out to sea as she awaits her fate.",
	description " .Avert your eyes. She is naked",
  has	animate proper;

Object -> amber_hairband "amber hairband"	! 220 / 0xdc
  with	name 'amber' 'hairband' 'hair' 'band',
	description "A long clasp of amber, perfect for long straggly Greek hair.",
	article "Andromeda's",
	rod_assoc rod_of_sacrifice,
	devil_hint "Mmm... it still has her perfume on it. Hehehehe. Bet she's dead now.",
  has	concealed static hidden_rod;

Object Cliffs "Cliffs"	! 221 / 0xdd
  with	name 'pharos' 'lighthouse' 'tower',
	e_to Clifftop_Walk,
	nw_to Cave_Mouth,
	d_to Sea_Shore,
	description "On top of some exposed cliffs on the Mediterranean. A dangerous slither down leads on one side to the shore, all other ways down being even more hazardous. Atop the cliffs is the Pharos tower, a round stone pinnacle lighthouse, but there is no way in from here.^^A grassy walk leads east, and a narrow crack leads southwest into a cave mouth.",
	cant_go "There's only dull grassland that way.",
	section T_TAROT,
  has	light;

Object Clifftop_Walk "Clifftop Walk"	! 222 / 0xde
  with	s_to Wall_of_Thorns,
	e_to routine106648,
	w_to Cliffs,
	description "A long clifftop walk by the sea, from the lighthouse to the west to the village not far east. These fields are occupied by herds of hardy mountain goats, continually butting each other and frisking. To the south a path leads across sparse grassland to a great outgrowth of some kind.",
	cant_go "There's only dull grassland that way.",
	section T_TAROT,
  has	light;

Object -> herd_of_goats "herd of goats"	! 223 / 0xdf
  with	name 'goat' 'goats' 'herd' 'of',
	life routine106732,
  has	scenery talkable;

Object Outside_Taverna "Outside Taverna"	! 224 / 0xe0
  with	s_to Eraina_Taverna,
	w_to Clifftop_Walk,
	description "A long walk along the cliffs from the lighthouse leads naturally here, just outside the Eraina Taverna, whose open doorway lies to the south.",
	cant_go "There's only dull grassland that way.",
	section T_TAROT,
  has	light;

Object -> small_thorny_tree "small thorny tree"	! 225 / 0xe1
  with	name 'tree' 'thorny' 'small',
	after routine106752,
	description "Only a small, thorny, unclimbable fig tree.",
  has	scenery;

Object -> fig "fig"	! 226 / 0xe2
  with	name 'fig',
	initial "Hanging from a low branch of a fig tree is, as you might expect, a fig.",
	description "Legend has it that the Roman emperor Augustus was killed by his wife Livia, who painted the figs on his tree with poison. Actually it looks like a perfectly nice piece of fruit.",
	devil_hint "You can ask a god for a date, but they just don't give a fig.",
	angel_hint "Good enough for a god.",
  has	edible;

Object Eraina_Taverna "Eraina Taverna"	! 227 / 0xe3
  with	after routine106776,
	n_to Outside_Taverna,
	description "A plain but cheery taverna, fill of miserable and rather ashamed men who are drinking retsina heavily. The day is dawning outside the north door, but they strangely do not share your uplifted feeling at the sight.",
	cant_go "The tavern entrance is to the north.",
	each_turn routine106824,
	section T_TAROT,
  has	light scored;

Object -> Ekmek_Special "Ekmek Special"	! 228 / 0xe4
  with	name 'ekmek' 'special' 'dessert',
	after routine107076,
	initial "Left untouched on one table is an Ekmek Special dessert.",
	description "A speciality dessert of the Taverna: ice cream, kateifi, raspberry sauce, cream. An acquired taste.",
	devil_hint "Better with chocolate ice cream, I think.",
	angel_hint "Doesn't somebody else need this more than you?",
  has	edible proper scored;

Object -> bartender "bartender"	! 229 / 0xe5
  with	name 'bar' 'tender' 'bartender',
	life routine107164,
	initial "Behind the bar, a depressed bartender polishes glasses.",
	description "Morose and unconvivial at the best of times. This is not the best of times.",
  has	animate;

Object Wall_of_Thorns "Wall of Thorns"	! 230 / 0xe6
  with	n_to Clifftop_Walk,
	s_to wall_of_thorns_object,
	description "The rather sparse rolling landscape is dominated here by a massive, and suspiciously unnatural, wall of thorns, which forms a great ring about an area perhaps a hundred yards in diameter. There are goat pastures to the north.",
	cant_go "There's only dull grassland that way.",
	section T_TAROT,
  has	light;

Object -> wall_of_thorns_object "wall of thorns"	! 231 / 0xe7
  with	name 'gap' 'thorns' 'of' 'wall',
	n_to Sacred_Earth,
	s_to "The wall rustles and clashes its thorns like a beast alive.",
	w_to ne_obj,
	initial "A ragged gap in the wall has been burnt out to the south.",
	description "It's hard to imagine what could possibly shift a wall like that.",
  has	door static;

Object Sacred_Earth "Sacred Earth"	! 232 / 0xe8
  with	before routine107832,
	n_to Wall_of_Thorns,
	s_to routine107416,
	description "Here inside the thorn wall, a north-south path leads across sacred earth into the imposing marble Temple of Zeus. You feel distinctly uneasy walking on such hallowed turf. There are any number of myths about gods getting cross about that sort of thing.",
	cant_go "The wall of thorns hems you in.",
	section T_TAROT,
  has	light;

Object Temple_of_Zeus "Temple of Zeus"	! 233 / 0xe9
  with	name 'pillar',
	n_to routine107840,
	se_to East_Cloister,
	nw_to West_Cloister,
	description "The beautiful candle-lit Temple of Zeus, a cavern of marble pillars which is quite empty and featureless save for the entrance at the north. So much for all the rumours about hoards of treasure - it looks as if Zeus (who is, by the way howling with anger outside) was bluffing all along.^^Cloisters lead southeast and southwest, deeper into the temple.",
	section T_TAROT,
  has	light scored;

Object -> copper_coin "copper coin"	! 234 / 0xea
  with	name 'copper' 'coin' 'obol',
	description "On one side, a man's face: on the other, a symbol, I. One obol, or one-sixth of a drachma.",
	article "one",
	angel_hint "This currency is only valid in ancient Greece. Where on earth have you been?",
  has	;

Object East_Cloister "East Cloister"	! 235 / 0xeb
  with	name 'niche',
	nw_to Temple_of_Zeus,
	nw_to Inner_Sanctum,
	description "The east cloister of the Temple, which turns from northwest to southwest, is bare but for a small niche.",
	section T_TAROT,
  has	;

Object -> inscribed_stone "inscribed stone"	! 236 / 0xec
  with	name 'rosetta' 'stone' 'inscribed' 'pumice',
	initial "Resting in the niche is an inscribed pumice stone, two feet tall.",
	description " .The stone bears two inscriptions, side by side:^",
	article "an",
	angel_hint "Whoever wrote this must have wanted to get the message across very badly, to write it all out twice.",
  has	scored;

Object West_Cloister "West Cloister"	! 237 / 0xed
  with	ne_to Temple_of_Zeus,
	se_to Inner_Sanctum,
	description "Along the west cloister, turning from northeast to southeast, is a broad bas relief depicting the seasons: the planting of seed, high summer, the harvest, floods and then the coming of ice.",
	section T_TAROT,
  has	;

Object -> symbol "symbol"	! 238 / 0xee
  with	name 'symbol' 'symbols',
	initial "A curious symbol is repeated along the top of the relief.",
	description "  j  c     k  b   s you gk ",
  has	static;

Object Inner_Sanctum "Inner Sanctum"	! 239 / 0xef
  with	n_to Cross_Centre,
	ne_to East_Cloister,
	nw_to West_Cloister,
	d_to Cross_Centre,
	initial routine108336,
	description "Here from the dark heart of the temple, cloisters fork northeast and northwest while a flight of narrowing steps lead down and to the north.",
	section T_TAROT,
  has	;

Object -> Homer "Homer"	! 240 / 0xf0
  with	name 'homer' 'blind' 'poet',
	life routine108344,
	initial "The blind poet Homer half-slumbers here, clutching his syrinx (or Pan-pipes) to himself.",
	description "Homer is wearing a Columbo-style raincoat.",
	time_left 0,
  has	animate proper;

Object -> -> Pan_pipes "Pan pipes"	! 241 / 0xf1
  with	name 'pan' 'pipes' 'panpipes' 'syrinx',
	after routine109056,
	description "Carefully cut from river reeds, these once belonged to Homer himself. As you may recall.",
	article "the",
	angel_hint "Marvellous! A sound to soothe the spirit.",
  has	;

Object Cross_Centre "Cross Centre"	! 242 / 0xf2
  with	after routine109584,
	before routine109612,
	s_to Inner_Sanctum,
	ne_to Northeast_Cross,
	se_to Southeast_Cross,
	nw_to Northwest_Cross,
	nw_to Southwest_Cross,
	u_to Inner_Sanctum,
	d_to inscriptions,
	initial routine109576,
	description "The fabled Labyrinth seems only to consist of a broad cross. Arms run to northeast, northwest, southeast and southwest, while a flight of stone steps widens and climbs south.",
	daemon routine109644,
	section T_TAROT,
  has	;

Object -> inscriptions "inscriptions"	! 243 / 0xf3
  with	name 'inscription' 'opening',
	after routine109740,
	n_to Oubliette,
	s_to "There are extremely scuffed and faded inscriptions at the centre of the cross.",
	w_to thedark,
	initial "Beside the inscriptions is an opening in the floor, about two feet square.",
	description "~ka-i ur-a re-im ka an-ge~",
	article "the",
  has	door static;

Object Oubliette "Oubliette"	! 244 / 0xf4
  with	name 'crushed' 'broken' 'bones',
	u_to Cross_Centre,
	description "A foul, musty bone pit, beneath the cross, where sacrificial victims were once dropped and ~forgotten~.",
	section T_TAROT,
  has	;

Object -> gleaming_amber_gem "gleaming amber gem"	! 245 / 0xf5
  with	name 'amber' 'gem',
	after routine109848,
	initial "Lying on top of crushed, broken bones, in plain view, is a gleaming gem of amber.",
	description "Embedded within is the body of a fly. Scratched upon one face is the word ~GALITA~.",
	angel_hint "Isn't there some classical legend about her?",
  has	scored;

Object Northeast_Cross "Northeast Cross"	! 246 / 0xf6
  with	name 'carvings' 'fish' 'nets',
	nw_to Cross_Centre,
	description "This cross-corner is inlaid with carvings of fish, of the waves, of great casting nets sweeping through the water.^^The Labyrinth lies to southwest.",
	section T_TAROT,
  has	;

Object -> statue_of_Demeter "statue of Demeter"	! 251 / 0xfb
  with	name 'demeter' 'statue' 'of',
	after routine110036,
	before routine110156,
	initial "A fine statue of the goddess Demeter stands here.",
  has	static statue_flag;

Object Northwest_Cross "Northwest Cross"	! 247 / 0xf7
  with	name 'carvings' 'wheat',
	se_to Cross_Centre,
	description "This cross-corner is surrounded with carvings of wheat swaying in the breeze, bathed with sunshine.^^The Labyrinth lies to southeast.",
	section T_TAROT,
  has	;

Object -> statue_of_Dionysus "statue of Dionysus"	! 253 / 0xfd
  with	name 'dionysus' 'statue' 'of',
	after routine110036,
	before routine110156,
	initial "A fine statue of the god Dionysus stands here.",
  has	static statue_flag;

Object Southeast_Cross "Southeast Cross"	! 248 / 0xf8
  with	name 'carvings' 'hoplite' 'warriors',
	nw_to Cross_Centre,
	description "This cross-corner is decorated with carvings of massed ranks of hoplite warriors, advancing into battle.^^The Labyrinth lies to northwest.",
	section T_TAROT,
  has	;

Object -> statue_of_Ares "statue of Ares"	! 252 / 0xfc
  with	name 'ares' 'statue' 'of',
	after routine110036,
	before routine110156,
	initial "A fine statue of the god Ares stands here.",
  has	static statue_flag;

Object Southwest_Cross "Southwest Cross"	! 249 / 0xf9
  with	name 'carvings' 'grape' 'vines' 'barrels',
	ne_to Cross_Centre,
	description "This cross-corner is decorated with carvings of grape-vines and barrels.^^The Labyrinth lies to northeast.",
	section T_TAROT,
  has	;

Object -> statue_of_Poseidon "statue of Poseidon"	! 250 / 0xfa
  with	name 'poseidon' 'statue' 'of',
	after routine110036,
	before routine110156,
	initial "A fine statue of the god Poseidon stands here.",
  has	static statue_flag;

Object Cave_Mouth "Cave Mouth"	! 254 / 0xfe
  with	name 'lamps' 'trestle' 'altar' 'stone',
	ne_to Cliffs,
	description "A dry cave opening from a crack to the northeast, becoming a fair-sized cavern, furnished with bronze and lit by trestle lamps chained from the ceiling.",
	section T_TAROT,
  has	light;

Object -> flaming_bronze_urn "flaming bronze urn"	! 256 / 0x100
  with	name 'flaming' 'bronze' 'urn' 'flame' 'cube' 'obsidian' 'altar' 'stone',
	after routine110880,
	initial "In the centre of the cave rests an obsidian altar stone with a flaming bronze urn.",
	description "The altar stone, sometimes called ~Omphalos~ or ~the navel~, bears an odd cross or plus sign and is fabled to mark the centre of the world.^^Around the side of the urn are reliefs of feasts, of oxen being tracked and sacrificed, of the gathering of fruit and the making of cheese.",
	article "the",
  has	container open static;

Object Oracle "Oracle"	! 255 / 0xff
  with	name 'oracle' 'masked' 'priestess' 'pythian' 'loxias' 'of' 'apollo',
	life routine110184,
	initial "The Oracle, the masked priestess of Apollo, stands here behind an obsidian altar-stone, three cubits cubed: to her side is a bronze urn, mouthing perpetual flame.",
	article "the",
  has	animate;

Object Lighthouse "Lighthouse"	! 257 / 0x101
  with	name 'smudge' 'quinquire',
	d_to routine111604,
	description " .You stand atop a pinnacle of stone, on an early Pharos, or lighthouse. Considerately enough, the builders have provided a spiral staircase down. ",
	cant_go "Being a lighthouse, this pinnacle is way up in the air. Point taken?",
	section T_TAROT,
  has	light scored;

Object -> mirrored_device "mirrored device"	! 258 / 0x102
  with	name 'device' 'mirrored' 'bronze',
  has	container open scenery;

Object Greek_Frieze1 "Greek Frieze"	! 259 / 0x103
  with	u_to Lighthouse,
	description "A brown-tinted frieze, depicting hunters and spear-carriers, surrounds this dark stair-well, which has no exit except for a spiral staircase leading back up.",
	section T_TAROT,
  has	light;

Object -> Greek_frieze2 "Greek frieze"	! 260 / 0x104
  with	name 'greek' 'frieze' 'mural',
	life LagachLife,
	description "The decorated strip of entablature between the architrave and the cornice, in the Attic style circa fifth century B.C.^^Well, you did ask.",
  has	scenery talkable;

Object port_obj "port wall"	! 261 / 0x105
  with	name 'port',
	w_to nw_obj,
	article "the",
  has	scenery;

Object starboard_obj "starboard wall"	! 262 / 0x106
  with	name 'starboard',
	w_to se_obj,
	article "the",
  has	scenery;

Object fore_obj "fore wall"	! 263 / 0x107
  with	name 'fore',
	w_to w_obj,
	article "the",
  has	scenery;

Object aft_obj "aft wall"	! 264 / 0x108
  with	name 'aft',
	w_to ne_obj,
	article "the",
  has	scenery;

Object some_landlubbers_direction "some landlubber's direction"	! 265 / 0x109
  with	name 'north' 'n//' 'south' 's//' 'east' 'e//' 'west' 'w//',
	after routine111692,
  has	proper scenery;

Object Aboard_Ship "Aboard Ship"	! 266 / 0x10a
  with	name 'rail' 'storm',
	n_to Prow_of_the_Lady_Magdalena,
	s_to Stern,
	u_to Up_the_Mast,
	description "There is a storm tossing the deck, one which drives no rain: you reel from one side to the other, hanging onto the rail, grabbing at the mast or the rigging. Nobody else seems to be aboard. The boat makes no headway in a strange, glassy mist.^^The mast rises dizzyingly high.^^You can't even make out the water below. A great pink haze spreads across the sky. With omens like these, who needs albatrosses?",
	cant_go "The deck runs fore to aft (as all decks do).",
	daemon routine111820,
	each_turn routine111740,
	section T_TAROT,
  has	light ship_flag;

Object -> mast_and_rigging "mast and rigging"	! 267 / 0x10b
  with	name 'mast' 'rigged' 'rigging',
	after routine111872,
	article "the",
  has	scenery;

Object Up_the_Mast "Up the Mast"	! 268 / 0x10c
  with	after routine112212,
	before routine112312,
	w_to routine111888,
	d_to routine112160,
	description "Coming up here must be one of your less inspired ideas. The mist is all around you, confusing your senses. Two pale, bluish moons hang in a pink sky.",
	cant_go "Down might be a better idea.",
	section T_TAROT,
  has	light ship_flag;

Object -> flagpole "flagpole"	! 269 / 0x10d
  with	name 'pole' 'flagpole' 'mast' 'ensign' 'spar',
	after routine112420,
	initial "A flagpole juts out portwards from the top of the mast, far too insubstantial to bear any weight. From it hangs the ensign of the British Merchant Navy (which you could just reach the bottom of).",
	description "The flagpole juts out to port with the prevailing... wind?",
  has	static;

Object -> flag_of_the_British_Merchant_Navy "flag of the British Merchant Navy"	! 270 / 0x10e
  with	name 'flag' 'ensign' 'navy' 'british' 'merchant' 'of' 'tassels',
	after routine112468,
	initial "The flag has fluttered to a heap on deck.",
	description "Broad, heavy, scarlet cloth, halfway between a silken sheet and a carpet, with a cross and a Union Jack in one corner.",
	devil_hint "Piece of advice - it's never very comfortable wrapping yourself in the Flag.",
  has	concealed;

Object old_timber_spar "old timber spar"	! 271 / 0x10f
  with	name 'old' 'prop' 'timber' 'flagpole' 'spar',
	before routine112624,
	initial "The broken flagpole, a plain timber spar, lies beside the mast.",
	description "An old timber prop, once the spar of a main mast.",
	article "an",
	rod_assoc rod_of_returning,
	devil_hint "A plain old piece of timber.",
  has	hidden_rod;

Object Prow_of_the_Lady_Magdalena "Prow of the Lady Magdalena"	! 272 / 0x110
  with	name 'lady' 'magdalena' 'mermaid' 'figurine',
	s_to Aboard_Ship,
	description "You stand in the triangular prow of the ship, which is graced by a carved and painted figurine and named the ~Lady Magdalena~. There is no sign of water, but the boat is rocked too often for it to be aground. And the glassy mist hangs ahead.",
	cant_go routine112652,
	section T_TAROT,
  has	light ship_flag;

Object -> green_branch "green branch"	! 273 / 0x111
  with	name 'green' 'branch' 'leafed',
	after routine112676,
	initial "In the Lady Magdalena's loose grip is a traditional sailor's good-luck token: a green-leafed branch, to attract the gulls of an approaching shore.",
	section T_TAROT,
	angel_hint "Oh, you startled me for a moment there! I am getting flighty.",
  has	;

Object Stern "Stern"	! 274 / 0x112
  with	name 'sand' 'bank' 'mist',
	n_to Aboard_Ship,
	d_to routine112912,
	description "The square stern of the ship looks out south, not onto receding waves, but to what seems a tunnel through dense, glassy mist. You can faintly make out an odd, pale reddish sand bank in the distance.",
	cant_go "The boat runs fore.",
	section T_TAROT,
  has	light ship_flag;

Object -> capstan "capstan"	! 275 / 0x113
  with	name 'capstan' 'anchor' 'chain' 'wheel',
	after routine113332,
	initial "The top of the anchor chain is wound around the capstan, a great wheel on the deck beside you. The chain disappears over the side.",
  has	static;

Object Garden_Stream "Garden Stream"	! 276 / 0x114
  with	name 'reeds',
	after routine113420,
	n_to "Better not... you'd be seen from the Library.",
	s_to coal_bunker,
	e_to Beside_the_Wall,
	w_to "Better not... you'd be seen from the Orangery.",
	ne_to "Better not... you'd be seen from the Old Ballroom.",
	nw_to Family_Tree,
	d_to "The Hall is not safely climbable.",
	description "In the lush, verdant (which is to say, under-cared for) gardens of Meldrew House, where a stream gurgles pleasantly as it meanders through reeds. The house rises up high above you to the south and you dare not be seen from the windows by the rest of the family, so you'll have to go northwest, deeper into the gardens, or else east along a path hugging the wall.",
	cant_go "The bulk of the Hall is in your way.",
	section T_GARDEN,
  has	light scored;

Object -> coal_bunker "coal bunker"	! 277 / 0x115
  with	name 'coal' 'bunker' 'loading' 'door',
	before CoalBunkerBefore,
	n_to Dark_Passage,
	s_to "On the house wall is a coal bunker, whose loading door is shut.",
	w_to ne_obj,
	initial "On the house wall is a coal bunker, whose door stands open.",
  has	door locked openable static;

Object -> stream "stream"	! 278 / 0x116
  with	name 'stream' 'water' 'gurgling',
	after StreamAfter,
  has	scenery;

Object Beside_the_Wall "Beside the Wall"	! 279 / 0x117
  with	n_to "You'd be seen from the Old Ballroom that way.",
	s_to "There's no door into the Hall.",
	w_to Garden_Stream,
	nw_to "You'd be seen from the Library that way.",
	u_to "The walls of the Hall are unclimbable to someone suffering from your degree of vertigo.",
	d_to nothing,
	description "The east-west path along the foot of Meldrew Hall ends here at one of the carved walls bordering the garden.",
	cant_go "The stone wall blocks further passage east.",
	section T_GARDEN,
  has	light;

Object -> potted_shrub "potted shrub"	! 280 / 0x118
  with	name 'pot' 'potted' 'tub' 'plant' 'shrub',
	after ShrubAfter,
	initial "A shrub is being nursed in a wide round tub in the centre of the path, sheltered behind the wall.",
  has	static;

Object -> stone_wall "stone wall"	! 281 / 0x119
  with	name 'stone' 'wall' 'carved' 'carvings' 'painted',
	after StoneWallAfter,
	life StoneWallLife,
	description "The garden wall once bore painted carvings, but they have fallen into disrepair.",
	found_in Beside_the_Wall Beside_the_Drive,
  has	scenery talkable;

Object timber_hatch "timber hatch"	! 282 / 0x11a
  with	name 'timber' 'hatch' 'old' 'rotted' 'rotting' 'lid',
	before TimberHatchBefore,
	n_to Wine_Cellars,
	s_to "Beside the shrub is a timber hatch, three feet across.",
	w_to thedark,
	initial "The timber lid stands open beside the shrub, revealing the old barrel-hatch.",
  has	door openable static;

Object Family_Tree "Family Tree"	! 283 / 0x11b
  with	name 'sign' 'signpost' 'post',
	n_to FamilyTreeNorth,
	e_to Lawn_Ornaments,
	w_to Clearing,
	se_to Garden_Stream,
	u_to Up_the_Plane_Tree,
	initial FamilyTreeInitial,
	description "You stand in the shade of a great plane tree, seedlings for which were brought back from Spain by an ancestor of yours in 1806. To the southeast is a stream, to the west is a small clearing and to the north a single break in the green privet hedge marks the entrance to the famously difficult Meldrew Hall Maze. A signpost reading ~To the Mosaic~ points east across the lawn.",
	section T_GARDEN,
  has	light;

Object -> plane_tree "plane tree"	! 284 / 0x11c
  with	name 'plane' 'tree' 'family',
	after PlaneTreeAfter,
  has	scenery;

Object Lawn_Ornaments "Lawn Ornaments"	! 285 / 0x11d
  with	name 'gnomes' 'nymphs' 'windmills' 'gnome' 'nymph' 'windmill' 'ornament' 'ornaments',
	e_to Mosaic,
	w_to Family_Tree,
	d_to Mosaic,
	description "Several hundred years of rolling have made this a rather fine patch of grass, between the privet hedge (north), the plane tree (west) and the mosaic (east). Unfortunately, it is adorned with all the really ugly ornaments (gnomes, plaster nymphs, stone windmills to grow flowers in), this being the corner of the garden least visible from the house.",
	cant_go "The options appear to be east or west.",
	section T_GARDEN,
  has	light;

Object -> plaster_statuette "plaster statuette"	! 286 / 0x11e
  with	name 'plaster' 'statuette' 'bust' 'statue',
	initial "Prominent amongst these is a plaster statuette, a bust of a woman.",
	description "It stands four feet high. At the base is an engraving: ~Self-Portrait, H.M. '54~. (It's presumably not by Her Majesty the Queen, though.)",
  has	static;

Object ancient_well "ancient well"	! 287 / 0x11f
  with	name 'ancient' 'well' 'dark',
	before WellBefore,
	initial "The lawn is lightly coated with broken plaster and dust, and in the spot where the statuette once stood is a dark, ancient well.",
	description "You can make out nothing below, and the well is too small to climb down.",
  has	container open static;

Object Mosaic "Mosaic"	! 288 / 0x120
  with	name 'perspex' 'scenes' 'quadrants',
	e_to nothing,
	w_to Lawn_Ornaments,
	u_to Lawn_Ornaments,
	description "This sunken corner of the garden has been excavated and then covered over with tough perspex to protect it from visitors' shoes. It consists of a time-worn Roman mosaic, divided into four quadrants, each showing scenes of idealised Roman life. There was probably a villa on this site, but your family has never been keen on archaeologists so the excavations went no further.",
	cant_go "From here you can climb back up to the lawn.",
	section T_GARDEN,
  has	light;

Object -> Roman_mosaic "Roman mosaic"	! 289 / 0x121
  with	name 'roman' 'mosaic',
	life LagachLife,
	description "Made of terra-cotta and ceramic fragments, it has held together surprisingly well.",
  has	scenery talkable;

Object -> hard_wooden_ball "hard wooden ball"	! 290 / 0x122
  with	name 'croquet' 'hard' 'wooden' 'ball',
	initial "A hard wooden ball, palm-sized, rolls about across the mosaic.",
	angel_hint "Splendid, you're having a ball. I do hope you hit it off.",
  has	;

Object Clearing "Clearing"	! 291 / 0x123
  with	s_to Vegetable_Garden,
	e_to Family_Tree,
	w_to Garage,
	description "A clearing at the edge of the garden, surrounded by walls and the privet hedges of the maze. To the east is the plane tree, to the west an opening in the wall makes a garage entrance and to the south is a small vegetable garden.",
	section T_GARDEN,
  has	light;

Object Vegetable_Garden "Vegetable Garden"	! 292 / 0x124
  with	n_to Clearing,
	u_to runner_bean_plant,
	description "A recently-turned vegetable garden, using up a shady corner of the garden. The patch testifies more to good intentions than horticulture.",
	cant_go "From this corner, you can only go back to the clearing.",
	section T_GARDEN,
  has	light;

Object -> runner_bean_plant "runner-bean plant"	! 293 / 0x125
  with	name 'runner' 'bean' 'plant',
	n_to Up_the_Beanstalk,
	s_to "Only a runner-bean plant graces the vegetable garden.",
	w_to u_obj,
	initial "A giant runner-bean plant leads up vertiginously into the sky from here.",
	section T_GARDEN,
  has	door static;

Object Up_the_Beanstalk "Up the Beanstalk"	! 294 / 0x126
  with	after BeanStalkAfter,
	before BeanStalkBefore,
	n_to Heavenly_Place,
	d_to Vegetable_Garden,
	description "At the top of the beanstalk, in amongst the clouds. There is no safe way to go from here except back down, not surprisingly. A dangerous way might be to step out onto the clouds to the north, but even if this is a fairy-tale it would be taking a lot on trust.",
	cant_go "The clouds are too tenuous that way.",
	section T_GARDEN,
  has	light;

Object Garage "Garage"	! 295 / 0x127
  with	e_to Clearing,
	description "A modest brick garage, built into the garden walls. A big open doorway leads east onto the clearing.",
	section T_GARDEN,
  has	light;

Object -> garden_roller "garden roller"	! 296 / 0x128
  with	name 'garden' 'roller' 'switch' 'motor' 'motorised' 'power',
	after RollerAfter,
	s_to "A big motorised garden roller is parked here.",
	initial "The garden roller sits here, its engine still running.",
	description "A motorised garden roller of the kind you sit inside, among whose simple controls is a big on/off switch.",
	each_turn RollerEachTurn,
  has	container enterable open static switchable;

Object -> weed_killer_bottle "weed killer bottle"	! 297 / 0x129
  with	name 'weed' 'killer' 'bottle' 'weedkille',
	after WeedKillerAfter,
	initial "In the shadows is a weed killer bottle.",
	description "If squeezed, it squirts weed killer over the ground. There are many warning labels about getting it on one's hands.",
	daemon WeedKillerDaemon,
	angel_hint "The funny thing is, they didn't have weedkillers in the early nineteenth century, and yet they still planned some marvellous gardens.",
  has	;

Object -> spade "spade"	! 298 / 0x12a
  with	name 'bladed' 'agricultural' 'implement' 'zzzzzzzzz',
	after SpadeAfter,
	initial "Hanging from a hook is a bladed agricultural implement.",
	short SpadeShort,
	angel_hint "Do you think there's anywhere in the garden particularly suitable for such an implement?",
  has	;

Object Up_the_Plane_Tree "Up the Plane Tree"	! 299 / 0x12b
  with	name 'jemima' 'conservatory' 'window',
	after routine115496,
	d_to Family_Tree,
	description "A magnificent view of the gardens would be yours, were it not for the branches and leaves which surround you. You can make out Aunt Jemima up at one of the conservatory windows, but hide from her view. Down below, the privet-hedge layout of the maze can be seen through the lower branches.",
	cant_go "No, don't go out on a limb.",
	section T_GARDEN,
  has	light;

Object -> maze_layout "maze layout"	! 300 / 0x12c
  with	name 'maze' 'layout',
	description " xmThe layout is roughly as follows:^^",
	article "the",
  has	scenery;

Object Maze "Maze"	! 301 / 0x12d
  with	after routine115944,
	before routine116264,
	s_to Family_Tree,
	w_to Viewpoint_Ledge,
	description "A maze of green privet passages, all alike.",
	cant_go "The privet hedges are in the way.",
	section T_GARDEN,
  has	light scored;

Object Patio_in_Maze "Patio in Maze"	! 302 / 0x12e
  with	name 'patio' 'flagstone',
	after routine116276,
	before routine116332,
	u_to "Up?  Are we playing the same game?",
	d_to Crypt,
	description "This is an old stone patio in the heart of the garden maze. A missing flagstone offers an intriguing dark prospect beneath.",
	cant_go "The privet hedges are in the way.",
	section T_GARDEN,
  has	light scored;

Object -> marble_rose "marble rose"	! 303 / 0x12f
  with	name 'marble' 'rose' 'flower',
	after routine116344,
	initial "Sticking out of some soft earth is a perfectly-carved marble rose.",
	angel_hint "Perfection set in stone. Not a gift for mortal women!",
  has	;

Object Viewpoint_Ledge "Viewpoint Ledge"	! 304 / 0x130
  with	name 'motorway' 'coaches',
	after routine116412,
	e_to Maze,
	description "This flagstoned rampart on the hillside looks across the valley, down (unfortunately) to the motorway below. Coaches pass by, reminding you of the rapidly approaching time when visitors will have to be let in again for the summer. The only safe way to go is back east into the maze. To one side is a plaque.",
	cant_go "The hillside is too steep.",
	section T_GARDEN,
  has	light scored;

Object -> plaque "plaque"	! 305 / 0x131
  with	name 'plaque',
	description "~This viewpoint, one of the finest in the county, was laid down by Capability Meldrew, a well-known landscape gardener of his day. It was intended as one of the rewards of the garden maze, and was constructed c. 1808 after an earlier folly on the site collapsed.~",
  has	scenery;

Object -> miniature "miniature"	! 306 / 0x132
  with	name 'miniature' 'plastic' 'etching',
	n_to Folly,
	initial "A miniature plastic etching rests on the plaque.",
	description "No larger than a playing card, it depicts the Folly which used to stand on the hillside outcrop.",
	devil_hint "What's the point of a drawing so small it might almost be a playing card?",
  has	;

Object Folly "Folly"	! 307 / 0x133
  with	name 'wain' 'hay' 'valley',
	before routine116504,
	e_to Maze_Foundations,
	description "This is a rampart on the hillside, a natural ledge leading east. Down below in the valley, rough cottages surround a church. Labourers toil in the fields, and a hay wain is being pulled across the river.^^Towering over you is a monstrously awful piece of architecture, a Folly. The freestanding tower has no appreciable purpose and no apparent entrance. The latter is just as well since it looks extremely unsafe.",
	cant_go "The hillside is too steep.",
	section T_GARDEN_PAST,
  has	light scored;

Object -> Folly_tower "Folly tower"	! 308 / 0x134
  with	name 'folly' 'tower' 'bricks' 'unsafe',
	description "Decidedly unsteady.",
  has	scenery;

Object -> bean_pole "bean pole"	! 309 / 0x135
  with	name 'bean' 'pole' 'beanpole',
	before routine116512,
	initial "A bean pole, of the kind used to grow climbing plants, rests against the side of the tower.",
	number 0,
	daemon routine116536,
	rod_assoc rod_of_stalking,
	devil_hint "Whatever you do, it'll always be a bean pole.",
  has	general hidden_rod;

Object Maze_Foundations "Maze Foundations"	! 310 / 0x136
  with	after routine116760,
	before routine116976,
	s_to Tree_Planting,
	w_to Folly,
	description "A square grid of plots of grass and seedbeds, all alike.",
	section T_GARDEN_PAST,
  has	light;

Object Tree_Planting "Tree Planting"	! 311 / 0x137
  with	before routine117752,
	description "Capability Meldrew and his gang of workmen are delicately planting a sapling plane tree here. Your disturbance annoys them immensely and you are immediately arrested for vagrancy and theft. After a few months in prison, you are hauled up before the County Assizes and sentenced...",
	section T_GARDEN_PAST,
  has	light;

Object Bricked_Path "Bricked Path"	! 312 / 0x138
  with	e_to Hedgery,
	nw_to White_Hallway,
	initial routine117760,
	description "You're strolling on a pleasant bricked path, passing from the outer rooms of Meldrew Hall to a track through the eastern side of the garden.",
	section T_GARDEN,
  has	light;

Object Hedgery "Hedgery"	! 313 / 0x139
  with	n_to routine117768,
	e_to Croquet_Lawn,
	w_to Bricked_Path,
	description "Named by some family wag generations back, this is a restful hedge garden, crowned with a summer house to the north, widening out to a broad croquet lawn east.",
	section T_GARDEN,
  has	light;

Object -> flock_of_sparrows "flock of sparrows"	! 314 / 0x13a
  with	name 'flock' 'of' 'sparrows',
	initial "A flock of sparrows crowds around the gutters of the summer house. Every now and then one flits up and lands somewhere else, and they bustle about chirpily.",
  has	static;

Object Summer_House "Summer House"	! 315 / 0x13b
  with	before routine117916,
	n_to nothing,
	s_to routine117856,
	description "An old wooden summer house, reeking of varnish and uncertain beneath your feet. Several segments of the tall glass many-sided pyramidal roof are missing and others are cracked, but this is still somehow a homely and welcoming retreat. The only entrance is also the only exit.",
	section T_GARDEN,
  has	light;

Object -> croquet_mallet "croquet mallet"	! 316 / 0x13c
  with	name 'croquet' 'mallet',
	initial "A croquet mallet stands by one wooden wall.",
	devil_hint "It's for mashing croquet potatoes.",
	angel_hint "Croquet is the Devil's own game!",
  has	;

Object -> gold_watch_on_a_chain "gold watch on a chain"	! 317 / 0x13d
  with	name 'gold' 'watch' 'on' 'chain',
	after routine118032,
	initial "Something golden hangs by a chain from a loose pane in the roof, but it's too high up to reach.",
	description "It is beautifully polished, and captivates the eye. You could stare for hours...",
	angel_hint "How easily are the weak mesmerised by baubles.",
  has	;

Object Behind_Summer_House "Behind Summer House"	! 318 / 0x13e
  with	s_to loose_board,
	w_to Mosaic,
	se_to Croquet_Lawn,
	d_to Mosaic,
	description "Among dense hedges by the shabby wood-slatted back of the summer house. Dark scratchy branches hem you in, but you could scramble down to the west or out onto the croquet lawn southeast.",
	section T_GARDEN,
  has	light scored;

Object -> loose_board "loose board"	! 319 / 0x13f
  with	name 'loose' 'board',
	after routine118116,
	n_to Summer_House,
	s_to "One board of the back wall is noticeably loose, making a good-sized crack.",
	w_to ne_obj,
	initial "You could easily squeeze past the loose board south into the summer house.",
  has	door openable static;

Object -> crack "crack"	! 320 / 0x140
  with	name 'crack' 'gap' 'hole' 'summerhou' 'summer' 'house',
	after routine118180,
	before routine118232,
	description "Through the crack you can see the summer house.",
  has	container open scenery;

Object -> irate_squirrel_friend "irate squirrel friend"	! 321 / 0x141
  with	name 'irate' 'my' 'squirrel' 'friend',
	life routine118404,
	initial nothing,
	description "Not at all shy when on his own territory.",
	article "your",
  has	animate;

Object Croquet_Lawn "Croquet Lawn"	! 322 / 0x142
  with	w_to Hedgery,
	nw_to nothing,
	initial CroquetLawnInitial,
	description " .One of the most beautiful hedge-enclosed, tree-muffled lawns in England, and just out of sight of the house, this has been a jewel in the gardens for centuries. Since the twenties it has also been a croquet lawn, of the regulation twenty-four yards square, laid out with a central coloured peg and six peripheral hoops",
	cant_go "The lawn is enclosed on all sides, but for a gap back west.",
	short CroquetLawnShort,
	section T_GARDEN,
  has	light;

Object -> peg_and_six_hoops "peg and six hoops"	! 323 / 0x143
  with	name 'peg' 'hoop' 'hoops',
	description "There are six arched hoops in a croquet set, arranged around a central peg. These ones have been safely anchored in place since the lawn was laid out in, oh, Midsummer 1923 if family lore is to be believed.",
  has	scenery;

Object strongbox "strongbox"	! 324 / 0x144
  with	name 'strong' 'box' 'strongbox',
	e_to iron_key,
	description "A good strong strongbox, buried for two centuries and now unearthed; it bears a fine gothic iron lock, and a tasteless coat of arms (a wild boar rampant).",
	angel_hint "You might have read about this. One of your ancestors is the key, perhaps?",
  has	container lockable locked openable;

Object -> golden_astrolabe "golden astrolabe"	! 325 / 0x145
  with	name 'golden' 'gold' 'astrolabe' 'eyepiece',
	after AstrolabeAfter,
	before routine119316,
	initial nothing,
	description "A very old instrument for measuring altitudes, this is all that remains of Sir Joshua Meldrewe's stolen hoard of gold. There is an eyepiece.",
	angel_hint "A mighty fine instrument, though not much use hand-held.",
  has	scored;

Object dug_hole "dug hole"	! 326 / 0x146
  with	name 'hole' 'dug',
	after DugHoleAfter,
	description "The rich loam, the silver of earthworms, the dignity of toil... none of these pastoral consolations is yours as you scrabble in the dirt.",
	describe DugHoleDesc,
  has	container open static;

Object Murky_Cave "Murky Cave"	! 327 / 0x147
  with	w_to Spur_of_Rock,
	ne_to Valley_Prospect,
	initial MurkyCaveInitial,
	description "This is a murky hillside cave, whose mouth opens to the northeast, though a tight squeeze might lead a little way west. Outside is a clear starry night. There is no traffic noise, and the air smells fresh.",
	daemon MurkyCaveDaemon,
	section T_ANCIENT_BRITAIN,
  has	;

Object -> flaming_torch "flaming torch"	! 328 / 0x148
  with	name 'flaming' 'torch',
	initial "Hanging up on an iron bracket is a flaming torch.",
  has	light;

Object -> historical_pamphlet "historical pamphlet"	! 329 / 0x149
  with	name 'historical' 'pamphlet',
	nw_to n_obj,
	description "It is a summary of the writings of a polemical monk called Gildas, and relates to events following the fall of the tyrant Vortigern at the turn of the fifth century A.D. After dark decades of pillage by Saxon mercenaries, Britain was reunited by Ambrosius Aurelianus and then defended at the Battle of Badon Hill, some time in the early years of the sixth century.^^This remarkable victory was of no religious significance, so Gildas does not dwell upon it. He tends only to mention bad kings and leaders, and then chiefly to insult them. (Talking about Gildas is an excellent way to annoy an Anglo-Saxon historian.)  Nobody even knows where Badon Hill is any more, or anything else about it, although some students of Welsh poetry believe Ambrosius was the source of the legend of King Arthur.",
	article "an",
  has	;

Object Spur_of_Rock "Spur of Rock"	! 330 / 0x14a
  with	e_to Murky_Cave,
	d_to Hanging_on_Rope,
	description "An uncomfortable spur of rock on the hillside crags. The only natural access to this spot is a crevice in the hill to the east, but there is also a securely fastened rope hanging down into the darkness.",
	cant_go "The crags are too precipitous.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> hanging_rope "hanging rope"	! 331 / 0x14b
  with	name 'hanging' 'rope',
	after RopeAfter,
  has	scenery;

Object Hanging_on_Rope "Hanging on Rope"	! 332 / 0x14c
  with	name 'patrol' 'men',
	after HangingOnRopeAfter,
	before HangingOnRopeBefore,
	u_to Spur_of_Rock,
	d_to RopeDown,
	description "You are hanging perilously on a hemp rope, suspended from an overhang of rock above, which drops down into the darkness of the valley. On the tracks below, patrols of men can be heard, and you feel instinctively that they are not friendly.",
	cant_go "Up and down are it, quite frankly.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> hemp_rope "hemp rope"	! 333 / 0x14d
  with	name 'hemp' 'rope',
  has	scenery;

Object -> yellow_daisy "yellow daisy"	! 334 / 0x14e
  with	name 'yellow' 'daisy',
	after DaisyAfter,
	before DaisyBefore,
	u_to DaisyUp,
	initial "A single yellow daisy grows from a little tuft of grass on the crags.",
  has	clothing scored;

Object Valley_Prospect "Valley Prospect"	! 335 / 0x14f
  with	e_to Roman_Villa,
	nw_to Murky_Cave,
	description "The geography is strangely familiar here. You are on a natural shelf on the hillside, overlooking the valley below. An all-but invisible cleft in the rock leads to a cave to the southwest, and the slope can safely be traversed to the east.^^It is a brightly moonlit night, cool as in late spring. There will be a sharp frost tomorrow. Down in the valley, a great cartwheel circle of camp fires illuminate some dark shapes, perhaps crude encampments. There is no other sign of civilisation.",
	cant_go "The hillside is too steep.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object Roman_Villa "Roman Villa"	! 336 / 0x150
  with	name 'timber' 'door',
	s_to Atrium_Cloister,
	e_to Stream,
	w_to Valley_Prospect,
	description "You stand beside a Roman villa, whose columns cast shadows of an Empire in the moonlight. It is thirty years since the fall of the West, and Britain is cut off from the continent, where soon even the existence of the Anglis will become a myth. This villa has survived the pestilence and devastation of the civil war, and although it must be a couple of centuries old, it is still standing. From here you could cut across the hillside east to west, or slip in through a none-too-secure timber door.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object Stream "Stream"	! 337 / 0x151
  with	name 'river' 'road' 'stream' 'roof',
	after EndStreamAfter,
	w_to Roman_Villa,
	u_to "You climb the ladder and are about to jump onto the roof when you catch sight of a man swaddled in animal furs, spreadeagled over the tiles, looking down into the central courtyard of the villa. He has a nasty-looking sword and since he hasn't seen you, you quietly shin back down the ladder again.",
	description "A stream runs past the villa and cascades down the hillside here, to join the river far below, near the Roman road which will, in 1500 years time, become the motorway which so spoils the view from your back garden. A rough ladder of wood lashed together with leather rests against the villa at the lowest point of the tiled roof.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> rough_ladder "rough ladder"	! 338 / 0x152
  with	name 'rough' 'ladder',
	after LadderAfter,
  has	scenery;

Object Atrium_Cloister "Atrium Cloister"	! 339 / 0x153
  with	name 'timber' 'door',
	n_to Roman_Villa,
	s_to Atrium,
	description "The shadowy cloisters of the villa's atrium. You disturb a fieldmouse, and hear the scratching of tiny claws on stone. Moonlight filters in from the central courtyard to the south, and a rotten timber door leads back north.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> summoning_horn "summoning horn"	! 340 / 0x154
  with	name 'horn' 'summoning' 'on' 'pole',
	after HornAfter,
	initial "Resting against one pillar is a horn made from a tusk, mounted on a long spear-like pole.",
	rod_assoc rod_of_language,
  has	hidden_rod;

Object Atrium "Atrium"	! 341 / 0x155
  with	n_to Atrium_Cloister,
	s_to Entrance,
	e_to Guard_Quarters,
	w_to Triclinium,
	description "The central well of the villa, ringed with columns. On the north side is a cloister and stone-linteled doorways lead east, south and west. The central floor area is commanded by a beautiful Roman mosaic, quartered into individual scenes, around the edges of which are vents from the hypocaust. There is no roof over the courtyard, and the atrium is lit by moonlight.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> mosaic "mosaic"	! 342 / 0x156
  with	name 'mosaic',
	description "The four quarters show white-beards in the Forum, farmers in Italian fields, a military fortification and a grain ship unloading at Ossia.",
  has	scenery;

Object Guard_Quarters "Guard Quarters"	! 343 / 0x157
  with	name 'armour' 'spears' 'hides' 'blankets',
	w_to Atrium,
	description "Whatever function this spacious room once had, now it is evidently home to military men, for it is filled with crude armour, spears, rough blankets which are little more than animal hides. Fortunately for you the guards are absent.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> bone_die "crude bone die"	! 344 / 0x158
  with	name 'die' 'dice' 'bone',
	before DieBefore,
	description "A crude six-sided die made from animal bone.",
  has	;

Object -> leather_sandals "leather sandals"	! 345 / 0x159
  with	name 'sandals' 'shoes' 'leather',
	article "a pair of",
  has	clothing;

Object Triclinium "Triclinium"	! 346 / 0x15a
  with	e_to Atrium,
	d_to TricliniumDown,
	description "What was once the villa's triclinium, or kitchen, is now deserted and long since ransacked for metal. (Nobody lives on their own in this century, and this villa wouldn't be easy to defend.)  A doorway to the east gives onto the atrium.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> kitchen_well "kitchen well"	! 347 / 0x15b
  with	name 'well' 'hinged' 'wooden' 'cover',
	before WellBefore,
	n_to Inside_Well,
	s_to "In one corner is a hinged wooden cover of some kind, which is shut.",
	w_to thedark,
	initial "The hinged wooden cover is raised, revealing a circular well about a yard in diameter. It is very dark inside.",
	description "The well has a hinged wooden cover. You can't tell by looking how deep it is.",
	number 0,
	daemon WellDaemon,
  has	container door openable static;

Object Inside_Well "Inside Well"	! 348 / 0x15c
  with	name 'air',
	after InsideWellAfter,
	e_to Hypocaust,
	u_to Triclinium,
	description "You are clinging perilously to the walls of the deep and dangerous well. You can hardly see a thing, even with the aid of the torch, but curiously enough you feel warm air blowing across you from the east.",
	cant_go "Too risky. There might not be anything that way, for all you know.",
	section T_ANCIENT_BRITAIN,
  has	;

Object Hypocaust "Hypocaust"	! 349 / 0x15d
  with	name 'fires' 'heating' 'log' 'logs',
	w_to Inside_Well,
	description "This very low almost-cellar underneath the atrium is a tiny access space for log fires which are kept going to provide a form of central heating for the villa. They are lit and going away nicely, interestingly. It isn't very warm by twentieth-century standards, but you have to admit it works.^^A tiny amount of light filters in from the vents in the roof; just enough to see by. The only way in seems to be the way you came.",
	cant_go "The log fires are hot, and anyway the only way out large enough for you is back west.",
	section T_ANCIENT_BRITAIN,
  has	light;

Object -> vents "vents"	! 350 / 0x15e
  with	name 'hypocaust' 'vents',
	after VentsAfter,
	article "the",
  has	scenery;

Object Entrance "Entrance"	! 351 / 0x15f
  with	after EntranceAfter,
	before EntranceBefore,
	n_to Atrium,
	description "A well-flagstoned forecourt at the villa entrance, surrounded by lesser wooden buildings. Some of these are in use as stables, and figures of men slip between them. You hide from sight, not wishing to draw attention to yourself. Up on the hill, where Meldrew Hall will one day be built, men on horseback can be seen circling the access track. For a deserted villa, this is certainly well-guarded.",
	section T_ANCIENT_BRITAIN,
  has	light scored;

Object Rough_Tent "Rough Tent"	! 352 / 0x160
  with	name 'hides',
	description "Well, here you are, imprisoned again. This time the cell is a tent of stitched animal hides, perhaps twenty feet in diameter, supported by a central pole. You have no idea where the entrance is, because you were blindfolded on the way in. There is at least a dim light from the camp-fires outside the tent.",
	cant_go "This tent doesn't seem to have an exit, either.",
	section T_ANCIENT_BRITAIN,
  has	light scored;

Object -> tent_pole "tent pole"	! 353 / 0x161
  with	name 'tent' 'pole' 'central',
	after TentPoleAfter,
	before TentPoleBefore,
	number 0,
	daemon TentPoleDaemon,
	rod_assoc rod_of_returning2,
  has	concealed static hidden_rod;

Object unconscious_Saxon_spy "unconscious Saxon spy"	! 354 / 0x162
  with	name 'saxon' 'spy',
	after SpyAfter,
	life SpyLife,
	initial "An unconscious Saxon spy is slumped on the ground. Occasionally faint noises can be heard from him.",
	description "He is dishevelled, wiry and unconscious. He is also covered with dust and leaves, as if he has been lying down on his front outdoors for hours.",
	number 0,
	daemon SpyDaemon,
  has	animate;

Object Encampment "Encampment"	! 355 / 0x163
  with	name 'fires' 'camp' 'dolmen',
	e_to EncampmentEast,
	description "Luckily for you the tent, now collapsed, was hardly being watched at all, because all the attention is diverted to a ghastly ritual being carried out over beyond the camp-fires. But your luck cannot hold for long. You are so surrounded by hostile territory that you simply have nowhere to run or hide. Things are, not to put too fine a point on it, looking grim.",
	cant_go "Far, far too risky.",
	number 0,
	daemon EncampmentDaemon,
	section T_ANCIENT_BRITAIN,
  has	light scored;

Object -> dolmen "dolmen"	! 356 / 0x164
  with	name 'dolmen' 'coals' 'hot' 'rock',
	n_to Beneath_Dolmen,
	w_to e_obj,
	initial "An erratic glacial rock, which seems in the feverish firelight to make a natural dolmen, can be made out to the east, on the other side of an almost-extinguished campfire of hot coals.",
  has	door open static;

Object Beneath_Dolmen "Beneath Dolmen"	! 357 / 0x165
  with	name 'dolmen',
	w_to Encampment,
	description "You stand beside the eerie dolmen, surrounded by the terrible noises and incantations of a druidic rite.",
	cant_go "Far, far too risky.",
	section T_ANCIENT_BRITAIN,
  has	light scored;

Object -> bluish_stone "bluish stone"	! 358 / 0x166
  with	name 'stone' 'blue' 'bluish',
	initial "Resting on top of the dolmen is a polished blue stone.",
	rod_assoc fifty_franc_note,
	devil_hint "I wouldn't wave that around if I were you!",
  has	scored hidden_rod;

Object fifty_franc_note "fifty-franc note"	! 359 / 0x167
  with	name 'fifty' 'franc' 'note' 'francs',
  has	;

Object ghost_of_yourself "ghost of yourself"	! 360 / 0x168
  with	after YourGhostAfter,
	description "You are transparent like a ghost.",
	time_left 0,
	capacity 1,
  has	;

Object Premonition "Premonition"	! 361 / 0x169
  with	e_to PremonitionEast,
	nw_to Camp_Fire,
	description "It is a frosty, clear night, but there is a scent of camp-fires burning in the distance. You are passing through the landscape as if a ghost, and all seems faintly unreal. To the east is one side of an animal-hide tent, but there is no way in from here. To southwest, some soldiers sit around the embers of a fire. There is a terrible sense of something about to happen.",
	cant_go DreamCantGo,
	section T_DREAMING,
  has	light;

Object The_Generals_Tent "The General's Tent"	! 362 / 0x16a
  with	n_to Beside_Table,
	w_to GeneralsTentWest,
	description "This is the tent of a thin, reedy man who wears no uniform but has an obvious and commanding presence. He has an aquiline, patrician nose and, at five feet four, is taller than anyone else present. The others are advisers, junior officers, scheming politicians and their like. They are keeping their distance from a trestle table at the north end of the tent.",
	cant_go DreamCantGo,
	section T_DREAMING,
  has	light;

Object Beside_Table "Shrine of the Bear"	! 363 / 0x16b
  with	s_to The_Generals_Tent,
	description "This is a kind of improvised shrine. A trestle table bears entrails, crude drawings sketched out on hide, and caged animals: draped beside it is a primitive tapestry of a bear reared up on its hind legs.",
	cant_go DreamCantGo,
	section T_DREAMING,
  has	light;

Object -> bear_tapestry "bear tapestry"	! 364 / 0x16c
  with	name 'bear' 'tapestry',
	life BearTapestryLife,
	description "Primal, bestial, terrifying.",
  has	scenery talkable;

Object -> heavy_iron_mascot "heavy iron mascot"	! 365 / 0x16d
  with	name 'heavy' 'iron' 'mascot',
	after MascotAfter,
	before MascotBefore,
	initial "On the table is a heavy iron mascot of some kind.",
	description "The mascot is in the shape of an ankh, with a lemniscus (or infinity) symbol moulded onto it.",
	number 0,
	daemon MascotDaemon,
	devil_hint "An absolute essential.",
  has	;

Object -> Druid "Druid"	! 366 / 0x16e
  with	name 'druid' 'druidess',
	life DruidLife,
	initial "Beside the table is a more substantial adviser, as if she too walks in this strange spirit plane. She is wearing frightening druidical robes, of strange pelts and furs, with nasty-looking charms around her neck. Every so often, she seems to catch sight of you out of the corner of her eye, but then look round and see nothing. The military men do not believe in her power, and yet... they treat her with respect.",
  has	animate proper;

Object Camp_Fire "Camp Fire"	! 367 / 0x16f
  with	e_to Near_Dolmen,
	ne_to Premonition,
	description "You can almost smell fear here. A motley platoon of soldiers are sitting about the embers of a fire. None are talking or sleeping, and the false good humour of the evening has died away. At first light, you realise, there will be a battle. It isn't a risk you'd like to run in their place. And there is a strange light already in the east... not yet a dawn, for the soldiers seem unaware of it.",
	cant_go DreamCantGo,
	section T_DREAMING,
  has	light;

Object Near_Dolmen "Near Dolmen"	! 368 / 0x170
  with	before DolmenBefore,
	description "A standing stone, perhaps a glacial erratic, stands here and on top of it is a shining blue stone, whose brightness almost blinds you. You feel irresistably drawn to it, and your hand reaches out...",
	cant_go DreamCantGo,
	section T_DREAMING,
  has	light;

Object Melancholy_Dream "Melancholy Dream"	! 369 / 0x171
  with	e_to nothing,
	d_to nothing,
	description "A strangely familiar, dusty passage, sloping down from a southern end bathed in hostile light to some kind of metal barrier in the north.",
	cant_go DreamCantGo,
	each_turn DreamEachTurn,
	section (T_DREAMING|T_UNREAL),
  has	light;

Object -> metal_barrier "metal barrier"	! 370 / 0x172
  with	name 'metal' 'barrier',
	after BarrierAfter,
  has	scenery;

Object green_luminescence "flurries of green luminescence"	! 371 / 0x173
  with	name 'green' 'flurries' 'of' 'luminesce',
	after LumnescenceAfter,
	initial "Flurries of green luminescence whirl endlessly around you, west to east and over.",
	description "The flurries have almost endless fascination... but you manage to tear your eyes away after, oh, an hour?",
  has	static;

Object Solid_Sand "Solid Sand"	! 372 / 0x174
  with	e_to Octagonal_Tomb,
	w_to Melancholy_Dream,
	u_to Melancholy_Dream,
	d_to Octagonal_Tomb,
	description "Your ghostly self is embedded in a diagonal downward shaft (descending to the east) entirely filled with dry sand. Solid flagstones line the walls.",
	cant_go DreamCantGo,
	section (T_DREAMING|T_UNREAL),
  has	light;

Object Octagonal_Tomb "Octagonal Tomb"	! 373 / 0x175
  with	name 'torch' 'torches' 'slab',
	w_to Solid_Sand,
	u_to Solid_Sand,
	description "Flaming torches bracketed in the wall gutter as the last oxygen in the air is consumed, and the flicker of flame plays across the yellow-orange glaze of the tomb walls.^^This octagonal chamber is lined with Egyptian hieroglyphics. Sand spills across the floor from under the sole entrance, sealed by an ingenious stone slab.",
	cant_go DreamCantGo,
	section (T_DREAMING|T_UNREAL),
  has	light;

Object -> hieroglyphic_symbols "hieroglyphic symbols"	! 374 / 0x176
  with	name 'symbols' 'hieroglyphs' 'egyptian',
	description " .Your dream eye is caught by...^^",
	article "some",
  has	scenery;

Object -> ships_wheel "ship's wheel"	! 375 / 0x177
  with	name 'ships' 'wheel',
	after ShipWheelAfter,
	initial "A kind of ship's wheel (of eight-spoked timber) is affixed to the northwest wall.",
  has	static;

Object Crypt "Crypt"	! 376 / 0x178
  with	s_to bronze_mural,
	u_to Patio_in_Maze,
	d_to bronze_mural,
	initial CryptInitial,
	description "A dismal crypt, disused, rainswept and strewn with leaves. Light streams in from the square hole in the roof. There are no bones or urns on show.",
	section T_CATACOMBS,
  has	light;

Object -> bronze_mural "bronze mural"	! 377 / 0x179
  with	name 'bronze' 'mural',
	life LagachLife,
	n_to Jagged_Passage,
	s_to "The south wall forms a giant bronze mural, which has stood the test of time.",
	w_to thedark,
	initial "The mural stands slightly to one side, revealing a passage leading downward.",
	description "The mural depicts an old bearded wise man following a star in the western sky. He has his right arm around an attractive young woman and holds a bundle of wands with his left hand. Around the border are astrological symbols of all kinds, from Tarot suits to zodiacal constellations.",
  has	door static talkable;

Object Jagged_Passage "Jagged Passage"	! 378 / 0x17a
  with	name 'bones',
	after CryptRoomAfter,
	n_to Crypt,
	s_to The_Catacombs,
	e_to Charnel_Passage,
	u_to Crypt,
	d_to The_Catacombs,
	description "An eerie passage, running down from an opening at the north to murky depths in the south. The walls are jagged, uneven and decorated with bones. An unpleasantly stale, charnel odour drifts in through a gap to the east.",
	section T_CATACOMBS,
  has	;

Object -> wrought_iron_key "long wrought iron key"	! 379 / 0x17b
  with	name 'long' 'wrought' 'iron' 'key',
	nw_to Compass,
	initial "You appear to be standing on a wrought iron key.",
	description "A figure-eight double ring, a long barrel and a finely-cut ten-groove claw: this is the ultimate in keys. It is superb.",
  has	;

Object Charnel_Passage "Charnel Passage"	! 380 / 0x17c
  with	after CryptRoomAfter,
	e_to Sarcophagus,
	w_to Jagged_Passage,
	description "A long, winding, vile passage through the earth, running east to west. The distasteful odour grows stronger as you go east.",
	section T_CATACOMBS,
  has	;

Object Sarcophagus "Sarcophagus"	! 381 / 0x17d
  with	after CryptRoomAfter,
	w_to Charnel_Passage,
	description "Well, perhaps ~sarcophagus~ is a little melodramatic, but it's that kind of moment. This must be somewhere under the old parish church. You are stooped over inside a stone tomb, stained and crumbled with decay, broken only by a crevice you crawled in by. It is a nightmarish place.",
	section T_CATACOMBS,
  has	;

Object -> tombstone "tombstone"	! 382 / 0x17e
  with	name 'tombstone' 'tomb' 'stone',
	initial "Nightmarishly, even the floor you kneel on is a fallen tombstone.",
	description "The gist of the inscription is: ~Henri Maladreue, obiit mcdlvi.~",
  has	static;

Object The_Catacombs "Catacombs"	! 383 / 0x17f
  with	after CryptRoomAfter,
	n_to Jagged_Passage,
	w_to CR,
	u_to Jagged_Passage,
	d_to nothing,
	description "A large, grisly cave, deep under the garden, dimly lit and eerie. Darkness curls around the natural pillars of rock like a mist: and there is a peculiar, vaguely familiar odour to it. The only obvious routes out are an uneven passage climbing to the north and a crawl west.",
	cant_go "You bumped into something unpleasant there.",
	time_left 0,
	section T_CATACOMBS,
  has	;

Object aluminium_staircase "aluminium staircase"	! 384 / 0x180
  with	name 'staircase' 'stairs' 'stair' 'case' 'aluminium',
	after AluminumStairAfter,
	initial "The odd smell seems to be ozone, and it drifts up from a previously concealed aluminium staircase.",
	description "Leading down.",
	article "an",
  has	static;

Object CR "CR"	! 385 / 0x181
  with	name 'basket' 'seesaw' 'hand' 'cannon' 'glass',
	before CRBefore,
	n_to metal_wall,
	s_to nothing,
	e_to CREast,
	description "The cartoonist Heath Robinson used to specialise in drawings of fantastically complicated machines of string, pulleys, levers, counterweights, cogs, mice running about on wheels and the like. Just such a contraption fills the west end of this room, though most of the workings are behind a glass wall which, although running with age, is as solid as the day it was built. The parts are very old (hand-made, not machined) but uncorroded.^^The only way out appears to be via the crawl to the east.",
	time_left 2,
	short CRShort,
	section T_CATACOMBS,
  has	;

Object -> metal_wall "metal wall"	! 386 / 0x182
  with	name 'mirror' 'metal' 'bronze' 'wall' 'sheet' 'amber',
	after MetalWallAfter,
	n_to CR,
	s_to "The north edge of the room is a big sheet of dull amber-coloured metal.",
	w_to w_obj,
	initial MetalWallInitial,
	description "Someone rather good-looking (you can't help thinking) is reflected in the metal surface.",
  has	door static;

Object -> iron_grid "iron grid"	! 387 / 0x183
  with	name 'iron' 'grid' 'contraption' 'panel',
	initial IronGridInitial,
	description " .There are fourteen pieces in the grid, and one gap. The pieces have letters upon them ",
  has	static;

Object -> glowing_golden_orb "glowing golden orb"	! 388 / 0x184
  with	name 'glowing' 'golden' 'orb',
	after CannonballAfter,
	description "How tantalisingly valuable it seems.",
  has	scenery;

Object -> cannonball "cannonball"	! 389 / 0x185
  with	name 'cannon' 'ball' 'cannonball',
	after CannonballAfter,
	description "Solid, heavy, reliable, out of reach on the other side of the glass.",
  has	scenery;

Object Universe_Maintenance_Room "Universe Maintenance Room"	! 390 / 0x186
  with	name 'gauges' 'machines' 'cube' 'dials',
	u_to The_Catacombs,
	description "You really should try to be more awestruck, for this is Merlin's cave, the hub of Creation. Every visitor perceives this place differently, according to his or her own myths and beliefs. Your particular creed being science, there is only a black metal one-metre cube with an unimpressive collection of gauges and dials. An aluminium staircase leads up.",
	section T_CATACOMBS,
  has	scored;

Object -> big_electricians_switch "big electrician's switch"	! 391 / 0x187
  with	name 'big' 'electricians' 'switch',
	before SwitchBefore,
	description "The lower, on, position is labelled ~Determinism~. The upper, off, position is labelled ~Chance~.",
  has	on scenery static switchable;

Object -> large_dial "large dial"	! 392 / 0x188
  with	name 'large' 'dial' 'gauges' 'dials',
	after DialAfter,
	initial "Particularly prominent are a large dial, like the volume control on an expensive hi-fi amplifier, and a big electrician's switch. Both are labelled in small print.",
	description "Above the dial is a lower-case letter h with a slashed line through it. It is currently turned to 1.055 or thereabouts. There is something worryingly dangerous about its matter-of-factness.",
  has	static;

Object Inside_the_Orb "Inside the Orb"	! 394 / 0x18a
  with	name 'light',
	before InOrbBefore,
	description "You half-stand, half-float in a golden, misty sphere perhaps ten yards across, which slowly spins. The centre, out of reach and somehow insubstantial, is an eight-by-eight lattice of oblong crystals, bathed in warm pearly light.",
	number 0,
	each_turn InOrbEachTurn,
	section T_CATACOMBS,
  has	light;

Object -> array_of_oblong_crystals "array of oblong crystals"	! 395 / 0x18b
  with	name 'array' 'oblong' 'lattice' 'crystals' 'images' 'board' 'chess' 'pieces' 'king' 'queen' 'white' 'black' 'kings' 'queens' 'bishops' 'knights',
	initial "Images lurk about the array of oblong crystals.",
	description "They are extremely hard to see and impossible to touch, as if you can only catch anything at all through the corner of your eye.",
	article "an",
  has	static;

Object Causeway "Causeway"	! 396 / 0x18c
  with	after CausewayAfter,
	n_to Island_of_Pharos,
	se_to Crossroads,
	initial CausewayInitial,
	description "A warm winter's night in the ancient city of Alexandria, on the Heptastadion causeway across the harbour to the Island of Pharos (to north). The Mediterranean waters lap against the land bridge, and the whole city (southeast) is lit up with torches: it is a night of celebration.",
	number 2,
	daemon CausewayDaemon,
	section T_ALEXANDRIA,
  has	light;

Object Island_of_Pharos "Island of Pharos"	! 397 / 0x18d
  with	name 'pharos' 'lighthouse' 'moon' 'circle' 'octagon' 'square' 'defences' 'causeway' 'island' 'harbour',
	after CausewayAfter,
	s_to Causeway,
	u_to "The Pharos is unclimbable, alas.",
	d_to rusty_iron_grating,
	description "The island of the Pharos: the lighthouse after which others are named, one of the Seven Wonders of the World, blazes into the sharp moonlit sky. It is 120 metres high, a circle on an octagon on a square.^^A light wind blows across the coastal defences. On this spot, seventy-two scholars first translated the Old Testament into Greek: shivering continuously if it was as chilly as this. A narrow causeway runs south across the harbour.",
	cant_go "The causeway is the only land route off the island.",
	daemon PharosDaemon,
	each_turn PharosEachTurn,
	section T_ALEXANDRIA,
  has	light;

Object -> rusty_iron_grating "rusty iron grating"	! 398 / 0x18e
  with	name 'rusty' 'iron' 'grating' 'seaweed' 'grate' 'rusted',
	after IronGratingAfter,
	n_to Jetty,
	s_to "In one wall of the wave defences is a rusty seaweed-wreathed iron grating, closed up tight.",
	e_to rusty_iron_key,
	w_to thedark,
	initial "A rusty seaweed-wreathed iron grating lies open here.",
  has	door lockable locked openable static;

Object -> rusty_iron_key "rusty iron key"	! 399 / 0x18f
  with	name 'rusty' 'iron' 'key',
	after RustyKeyAfter,
	nw_to Compass,
	initial "Interestingly, a key which looks as if it would fit the grating can be seen inside the passage beneath.",
	angel_hint "Oh dear, surely it's gratingly obvious what this fits?",
  has	;

Object Jetty "Jetty"	! 400 / 0x190
  with	after CausewayAfter,
	u_to Island_of_Pharos,
	description "Down on a dark stone jetty, where the waters of the Alexandrian harbour splash insistently. Rough-hewn steps rise up the island through the grating.",
	each_turn JettyEachTurn,
	section T_ALEXANDRIA,
  has	light scored cat_nofollow;

Object -> skiff "skiff"	! 401 / 0x191
  with	name 'skiff' 'boat' 'small',
	initial "A skiff (a small sail-boat) is moored up here.",
	description "You could easily sail away: where you would end is at the mercy of the tides and the night breeze, since you have no idea how to guide a rudder or trim a sail.",
  has	container enterable light open static;

Object -> -> adamantine_heart "adamantine heart"	! 402 / 0x192
  with	name 'adamantine' 'heart' 'adamant',
	initial "An adamantine heart lies in the skiff.",
	description "A cardioid of the kind favoured by Valentine's cards rather than surgeons.^^It reminds you oddly of one of the symbolic pieces in Monopoly - the ship, the hat and so on.",
	article "an",
	angel_hint "There must be more to this marvellous figure somewhere.",
  has	;

Object Harbour_Mouth "Harbour Mouth"	! 403 / 0x193
  with	after HarbourMouthAfter,
	description "As the skiff passes the jaws of the Royal Harbour, beneath the great Pharos light, you have a final view of the receding civilisation of Alexandria: ahead lies the vast, oil-calm Mediterranean and moonlight on the waters.",
	cant_go "The skiff is not under your control.",
	each_turn HarbourMouthEachTurn,
	section T_ALEXANDRIA,
  has	light cat_nofollow;

Object Drifting "Drifting"	! 404 / 0x194
  with	name 'curious' 'fish' 'zephyr' 'sea',
	after HarbourMouthAfter,
	description "You drift in the wide, peaceful Lunar sea. Curious fish, their yellow-green eyes gleaming beneath the silver ripples, brush past your wake: the night zephyr is almost slack but still you drift. Minutes pass like hours in paradise.",
	cant_go "You feel only a drug-like calm.",
	each_turn DriftingEachTurn,
	section T_ALEXANDRIA,
  has	light cat_nofollow;

Object Crossroads "Crossroads"	! 405 / 0x195
  with	name 'processio' 'tower',
	after CrossroadsAfter,
	ne_to Outside_the_Royal_Museum,
	se_to A_Tower,
	nw_to Causeway,
	nw_to Necropolis,
	description "The great crossroads at the heart of chlamys-shaped Alexandria, greatest city of the civilised world. The northwest-southeast road runs from the causeway to the Tower: the main road runs southwest from the Necropolis gate, northeast to the great public buildings of the city.",
	section T_ALEXANDRIA,
  has	light;

Object Necropolis "Necropolis"	! 406 / 0x196
  with	s_to XIIth_Dynasty_Pyramid,
	ne_to Crossroads,
	d_to nothing,
	description "A spacious, sombre, moonlit and magnificent valley of tombs, some brand new, just outside the walls of Alexandria (to the northeast). Already it is ancient. Most of the little termite-hill style pyramids have been invaded time after time: indeed, one pyramid's entrance gapes open to the south.",
	cant_go "This is no place to wander after dark.",
	section T_ALEXANDRIA,
  has	light;

Object -> birds_of_prey "birds of prey"	! 407 / 0x197
  with	name 'birds' 'of' 'prey',
	initial "Birds of prey circle high in the night sky, their talons glinting in the moonlight.",
	article "some",
  has	static;

Object unexciting_tombstone "unexciting tombstone"	! 408 / 0x198
  with	name 'tomb' 'tombstone' 'stone' 'unexcitin' 'face' 'socket' 'steps' 'mouth',
	after TombstoneAfter,
	n_to The_Height_of_Fashion,
	s_to "You stand near the tombstone to which the birds of prey were so inexplicably drawn.",
	w_to thedark,
	initial "You stand near the tombstone, which has become rather more interesting now that a flight of steps downward has appeared.",
	description "It bears just one word of epigram: ~GALITA~. Below that is a curious face, with an open empty socket of a mouth.",
  has	door static;

Object cloak_of_many_colours "cloak of many colours"	! 409 / 0x199
  with	name 'of' 'many' 'colours' 'cloak' 'coat' 'chlamys',
	after CloakAfter,
	initial "A cloak of many colours lies folded on it.",
	description "A fine cloak, grey-lined, sapphire-encrusted, rippled across with rainbow fabrics from the trade routes of the world.",
	angel_hint "Are you sure it isn't inside out?",
  has	clothing;

Object grey_cloak "grey cloak"	! 410 / 0x19a
  with	name 'grey' 'cloak' 'coat' 'chlamys',
	after CloakAfter,
	description "A fine grey cloak, sapphire-encrusted, lined with rainbow fabrics from the trade routes of the world.",
	angel_hint "Are you sure it isn't inside out?",
  has	clothing;

Object XIIth_Dynasty_Pyramid "XIIth Dynasty Pyramid"	! 411 / 0x19b
  with	after PyramidAfter,
	n_to Necropolis,
	description "Ransacked, dimly-lit, cramped and empty, this rough-built and uneven burial mound is to the Great Pyramids of Giza (built just a century before) what the summerhouse in your garden is to Windsor Castle. There are only dull painted writings, an unpleasant odour and a passage out to the north.",
	section T_ALEXANDRIA,
  has	light cat_nofollow;

Object -> painted_writings "painted writings"	! 412 / 0x19c
  with	name 'painted' 'paintings' 'writing' 'writings',
	life LagachLife,
	description "One of the so-called Pyramid Texts making up the so-called ~Book of the Dead~. This dramatic passage seems to be devoted to wise men preparing their bodies to rise in the afterlife, anointing themselves with oil. An interesting motif of ten strokes, arranged^^   III IIIIII I^^catches the eye.",
	article "some",
  has	scenery talkable;

Object The_Height_of_Fashion "The Height of Fashion"	! 413 / 0x19d
  with	name 'table' 'panelling' 'doorway' 'door',
	after HeightFashionAfter,
	w_to HeightFashionWest,
	u_to Necropolis,
	description "A perfectly-cut room of rose-coloured granite, twelve feet across, painted in yellows and browns to simulate alabaster panelling. This is the latest in modern funerary apartments.^^There's a couch for visitors, a table, a flight of steps up and a doorway to the west, flanked by two stone sphinxes.",
	section T_ALEXANDRIA,
  has	scored cat_nofollow;

Object -> sphinxes "sphinxes"	! 414 / 0x19e
  with	name 'sphinx' 'sphinxes' 'stone' 'statue' 'statues',
	initial "The sphinxes seem to stare balefully at you.",
	description "No grave would be complete without one.",
	article "two",
  has	static;

Object -> wooden_couch "wooden couch"	! 415 / 0x19f
  with	name 'wood' 'wooden' 'couch' 'bed' 'weave' 'matting',
	description "A comfortable-looking wooden couch, covered with weave matting.",
  has	enterable scenery supporter;

Object stone_nose_of_a_sphinx "stone nose of a sphinx"	! 416 / 0x1a0
  with	name 'stone' 'nose',
	after NoseAfter,
	initial "One of the sphinxes does have rather a prominent nose, it must be said.",
	description "Splendid.",
  has	static;

Object The_Spirit_World "The Spirit World"	! 417 / 0x1a1
  with	name 'table' 'panelling' 'doorway' 'door',
	after SpiritWorldAfter,
	before SpiritWorldBefore,
	w_to SpiritWorldWest,
	description "A perfectly-cut room of rose-coloured granite, twelve feet across, painted in yellows and browns to simulate alabaster panelling, at the foot of a flight of steps which leads only to a sealed wall.",
	number 1,
	each_turn SpiritWorldEachTurn,
	section T_SPIRIT_WORLD,
  has	light scored;

Object -> sphinxes "sphinxes"	! 418 / 0x1a2
  with	name 'sphinx' 'sphinxes' 'stone' 'statue' 'statues',
	initial "Stone sphinxes guard the west doorway, staring balefully at you.",
	description "No grave would be complete without one.",
  has	static;

Object -> wooden_couch "wooden couch"	! 419 / 0x1a3
  with	name 'wood' 'wooden' 'couch' 'bed' 'weave' 'matting',
	initial "The weave matting on the couch is now in some disarray.",
	description "A comfortable-looking wooden couch, covered with weave matting.",
  has	enterable scenery supporter;

Object Napoleonic_officers "Napoleonic officers"	! 420 / 0x1a4
  with	name 'napoleoni' 'officers' 'soldiers' 'officer' 'soldier' 'lanterns',
	life OfficerLife,
	initial "Two Napoleonic officers stand awestruck as light splashes from their lanterns over the riches of the tomb.",
	description "The officers wear the uniforms of the Emperor's 1798 occupation of the Nile Delta, and carry fine brass lanterns.",
	article "two",
  has	animate;

Object This_Is_The_Death "This Is The Death"	! 421 / 0x1a5
  with	name 'painted' 'scenes' 'glass' 'ornaments',
	e_to The_Height_of_Fashion,
	w_to marble_wall,
	u_to The_Height_of_Fashion,
	d_to marble_wall,
	description "The passage, descending from the east down to the west, is cut from marble, lined with painted scenes from the fashionable comedies of Menander, decorated with Alexandrian coloured glass ornaments.^^The expression ~You can't take it with you~ doesn't seem to be popular hereabouts.",
	cant_go "Just an east-west passage.",
	section T_ALEXANDRIA,
  has	cat_nofollow;

Object -> model_of_ugly_animal "model of an animal so ugly you can't bear to look at it"	! 422 / 0x1a6
  with	name 'model' 'animal' 'ugly' 'monkey',
	initial "Despite the tasteful decor, the most hideously ugly model animal you have ever seen sits on a little shelf here.",
	description "You simply can't bear to look. It might be a monkey... at least it has a tail... No. No, you have to look away.",
	short UglyAnimalShort,
	devil_hint "Exquisite. Simply charming.",
	angel_hint "Oh dear.",
  has	;

Object -> marble_wall "marble wall"	! 423 / 0x1a7
  with	name 'marble' 'wall',
	n_to Quite_an_Undertaking,
	s_to "Unfortunately, the passage slants down only into a solid marble wall.",
	w_to thedark,
	initial "The passage opens out onto the burial chamber below.",
  has	door static;

Object Quite_an_Undertaking "Quite an Undertaking"	! 424 / 0x1a8
  with	after UndertakingAfter,
	e_to This_Is_The_Death,
	u_to This_Is_The_Death,
	description "A really luxurious burial chamber, far beneath the entrance court.^^A yard-wide square channel runs away fractionally east of north, in an apparently endless stooped passage.^^On the west wall are three curious sockets, above a painting of a priest of the half-mythical pharoah Sosostris in full sceptred, grey-clad regalia.",
	cant_go "The passage rises sharply to the east.",
	section T_ALEXANDRIA,
  has	scored cat_nofollow;

Object -> painting_of_the_priest "painting of the priest"	! 425 / 0x1a9
  with	name 'painting' 'of' 'priest' 'sosostris',
	description "Drawn in the odd aspect favoured by the Egyptians, who believed in ideal angles rather than accurate drawing. The sceptre, only half the size of the large ones you once saw in the British Museum, looks oddly familiar.^^This close to the wall, you notice words written above the three sockets.",
  has	scenery;

Object -> mummy_case "mummy case"	! 426 / 0x1aa
  with	name 'mummy' 'case' 'lid' 'sarcophag' 'coffin',
	after MummyCaseAfter,
	initial "A beautiful gold and blue mummy case, or sarcophagus, rests massively here.",
	description "Golden, kingfisher-blue, smoothly curved, immensely heavy, beautiful. And final, and dead.",
  has	enterable static;

Object -> first_socket "first socket"	! 427 / 0x1ab
  with	name 'first' 'socket' 'sockets' 'words',
	after SocketAfter,
	description " .Above ",
	article "the",
	number 1,
  has	scenery;

Object -> second_socket "second socket"	! 428 / 0x1ac
  with	name 'second' 'socket' 'sockets' 'words',
	after SocketAfter,
	description " .Above ",
	article "the",
	number 1,
  has	scenery;

Object -> third_socket "third socket"	! 429 / 0x1ad
  with	name 'third' 'socket' 'sockets' 'words',
	after SocketAfter,
	description " .Above ",
	article "the",
	number 1,
  has	scenery;

Object Buried_Alive "Buried Alive"	! 431 / 0x1af
  with	after BuriedAfter,
	u_to Sarcophagus,
	description "You lie in the mummy case, your arms folded across each other, face grimaced, running out of air rapidly and with almost no room to maneouvre. The coffin lid is about ten times heavier than you, and its seal is very good.",
	number 5,
	each_turn BuriedEachTurn,
	section T_ALEXANDRIA,
  has	light cat_nofollow;

Object adamantine_skull "adamantine skull"	! 432 / 0x1b0
  with	name 'adamantine' 'skull' 'adamant',
	initial "An adamantine skull lies here, as if casually dropped by a god's hand.",
	description "It reminds you oddly of one of the symbolic pieces in Monopoly - the car, the boot and so on.",
	article "an",
	angel_hint "There must be more to this marvellous figure somewhere.",
  has	;

Object Stadium "Stadium"	! 433 / 0x1b1
  with	nw_to Outside_the_Royal_Museum,
	description "The great Stadium of Alexandria, with capacity enough to hold the whole population of the city: and it looks full. Olympic openings in the age of television have nothing on these people. The procession surges continually in, around the track and then out again, and amid the bustle you cannot push through.",
	cant_go "It would be easier to breathe back southwest.",
	section T_ALEXANDRIA,
  has	light;

Object Outside_the_Theatre "Outside the Theatre"	! 434 / 0x1b2
  with	n_to Outside_the_Royal_Palace_of_Alexander,
	s_to Outside_the_Royal_Museum,
	w_to Warehouses_and_Port,
	description "Tragically, the Theatre is closed tonight, but roads lead past the great stepped bowl: north toward the Palace, south to the Museum and west to the harbour-front.",
	section T_ALEXANDRIA,
  has	light;

Object Outside_the_Royal_Museum "Outside the Royal Museum"	! 435 / 0x1b3
  with	n_to Outside_the_Theatre,
	ne_to Stadium,
	se_to OutsideRoyalMuseumSE,
	nw_to Crossroads,
	description "The main southwest-northeast road forks off with a road due north to the Theatre. Despite the kaleidoscopic din you are impressed by the sober majesty of the Museum of the Ptolemies, whose fine portico entrance, decked with reliefs, is southeast.",
	daemon OutsideRoyalMuseumDaemon,
	section T_ALEXANDRIA,
  has	light;

Object -> portico "portico"	! 436 / 0x1b4
  with	name 'portico' 'reliefs' 'relief' 'entrance',
	description "Reliefs of the cat-god bestride the square-cut entrance. The fanaticism of the cult of the Cat in Lower Egypt has such a stranglehold that the image is everywhere. You remember reading somewhere that passers-by in the street have been torn to death before, just on suspicion of mistreating a sacred cat.",
  has	scenery;

Object A_Tower "A Tower"	! 437 / 0x1b5
  with	nw_to Crossroads,
	u_to defaced_door,
	description "This is not the famous Alexandrian tower (which is not due to be built by the Emperor Domitian for centuries), just an anonymous little monument on the same site. It is square-cut inside and there's only a small exit northwest.",
	section T_ALEXANDRIA,
  has	light;

Object -> defaced_door "defaced door"	! 438 / 0x1b6
  with	name 'defaced' 'sosostris' 'door' 'writings' 'scripts',
	after DefacedDoorAfter,
	n_to Consulting_Room,
	s_to "In one wall is a door heavily defaced with writings, the same word, over and over in a hundred tongues and scripts: the word ~Sosostris~, in fact.",
	w_to in_obj,
	initial "The heavily defaced door opens onto a staircase up.",
  has	door openable static;

Object Consulting_Room "Consulting Room"	! 439 / 0x1b7
  with	name 'sevenbran' 'candelabra' 'sticks' 'candles',
	e_to "Peculiarly, the hanging curtain seems to be solid iron when you walk into it.",
	d_to A_Tower,
	description "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads east. In the centre of the room is a table, which is bare.",
	section T_ALEXANDRIA,
  has	light scored cat_nofollow;

Object -> table "table"	! 440 / 0x1b8
  with	name 'bare' 'table',
	after TableAfter,
	description "Madame Sosostris stares at it fixedly as she meditates.",
  has	scenery supporter;

Object -> curtain "curtain"	! 441 / 0x1b9
  with	name 'curtain' 'bead' 'hanging',
	description "Unmoving.",
  has	scenery;

Object -> Madame_Sosostris "Madame Sosostris, famous clairvoyante"	! 442 / 0x1ba
  with	name 'sosostris' 'madame' 'clairvoyant',
	life SosostrisLife,
	initial "Madame Sosostris, famous clairvoyante, meditates here.",
	description "Known to be the wisest woman in Asia Minor.",
  has	animate proper;

Object quarterstaff "green oak quarterstaff"	! 443 / 0x1bb
  with	name 'green' 'oak' 'staff' 'quarterst' 'quarter' 'beam' 'wooden',
	after QuarterstaffAfter,
	initial "You seem to have dislodged one of the wooden beams used by the tomb's builders: a useful length of greenish oak.",
	description "It needs to be left to mature, and yet there's something awfully familiar about it.",
	devil_hint "Ready to use.",
	angel_hint "Perhaps it could be put aside for later use.",
  has	;

Object silver_keepsake "silver keepsake"	! 444 / 0x1bc
  with	name 'silver' 'locket' 'keepsake',
	description "A silver locket on a thin chain, with a heart-shaped picture of a knight placing a rose in his lady's hair. Quite nauseously romantic.",
	angel_hint "For me? Oh, you shouldn't have... oh, you didn't. Well give it to someone else then.",
  has	clothing;

Object Warehouses_and_Port "Warehouses and Port"	! 445 / 0x1bd
  with	after CausewayAfter,
	e_to Outside_the_Theatre,
	description "Down by the sea-front, in the old harbourlands, surrounded by warehouses. The Mediterranean laps darkly against the hard, splashing an occasional wave up the slope. The city, and the party, lie back east.",
	cant_go "There's nowhere to go but the city, east.",
	section T_ALEXANDRIA,
  has	light scored;

Object -> gambling_sailor "gambling sailor"	! 446 / 0x1be
  with	name 'sailor' 'gambling' 'gambler' 'grizzled',
	after SailorAfter,
	life SailorLife,
	initial "A grizzled sailor sits at a harbourside table.",
	each_turn GamblingSailorEachTurn,
  has	animate;

Object -> inscribed_die "inscribed die"	! 447 / 0x1bf
  with	name 'inscribed' 'die' 'dice' 'cube',
	after InscribedDieAfter,
	initial "An inscribed six-sided die lies on the table in front of him.",
	description "The sides you can see are labelled with short words.",
	article "an",
	number 3,
  has	static;

Object The_Birdcage_of_the_Muses "The Birdcage of the Muses"	! 448 / 0x1c0
  with	name 'little' 'door' 'books',
	s_to Oil_Room,
	e_to Reading_Corridor,
	se_to Geography_Room,
	nw_to Outside_the_Royal_Museum,
	nw_to Outside_the_Royal_Museum,
	description "The celebrated Library of Alexandria, finest in the entire world, possessed of hundreds of thousands of books: where the ruling Ptolemies keep fanatic, infighting scholars almost imprisoned as they turn out rival commentaries on the ancient poems - hence the nickname.^^There is a little door to the south; a dusty corridor southeast; a thoroughfare east, and a grand entrance northwest.",
	number 0,
	each_turn BirdcageEachTurn,
	section T_ALEXANDRIA,
  has	light scored;

Object -> pigeonhole "pigeonhole"	! 449 / 0x1c1
  with	name 'pigeon' 'hole' 'pigeonhol',
	initial "There is a pigeonhole mounted on one wall.",
	description "A depository for scrolls.",
  has	container open static;

Object tube_with_an_alpha_on "tube with an alpha on"	! 450 / 0x1c2
  with	name 'alpha' 'with' 'tube' 'cylinder',
	description "An open-ended hollow tube, marked with a Greek capital Alpha.",
	parse_name TubeParse,
	angel_hint "Surely this is addressed to someone?",
  has	container open;

Object -> scroll_bearing_an_epic_poem "scroll bearing an epic poem"	! 453 / 0x1c5
  with	name 'long' 'epic' 'scroll' 'poem',
	description "All Greek to you, alas, and running on for 1000 lines or more.",
	parse_name ScrollParse,
	angel_hint "Oh my. Well, the plot, um, there are seven attackers, all with different shields, one for each of the seven city gates, and it's a civil war so of course the brothers are really in a duel and there are champions and the women are upset but it's all because of their brother who was really their father... Never mind. It's strictly for aficionados.",
  has	;

Object tube_with_a_kappa_on "tube with a kappa on"	! 451 / 0x1c3
  with	name 'kappa' 'with' 'tube' 'cylinder',
	description "An open-ended hollow tube, marked with a Greek capital Kappa.",
	parse_name TubeParse,
	angel_hint "Surely this is addressed to someone?",
  has	container open;

Object -> scroll_bearing_a_short_poem "scroll bearing a short poem"	! 452 / 0x1c4
  with	name 'short' 'scroll' 'poem',
	description "All Greek to you, alas. Only a dozen lines or so, though.",
	parse_name ScrollParse,
	angel_hint "Oh my. ~I touch your... and the scent of you rises from... your beautiful...~  I'd better not read the rest. Strictly for aficionados.",
  has	;

Object Oil_Room "Oil Room"	! 454 / 0x1c6
  with	after OilRoomAfter,
	n_to The_Birdcage_of_the_Muses,
	description "This small, dark (by night) room is a repository for Library supplies: above all, for lamp oil, which is stored in broad shallow earthenware troughs. Lucky your torch is electric, when you think about it. Anyway, a passage leads back north.",
	section T_ALEXANDRIA,
  has	;

Object -> oil_filled_troughs "oil-filled troughs"	! 455 / 0x1c7
  with	name 'oil' 'troughs' 'shallow' 'lamp',
	after OilTroughsAfter,
	article "the",
  has	scenery;

Object Geography_Room "Geography Room"	! 456 / 0x1c8
  with	nw_to The_Birdcage_of_the_Muses,
	description "The rather neglected hall for the accurate study of geography: as opposed to the lurid travellers' tales preferred by most writers in this slapdash century. Nobody is working here, and one can only file back northwest.",
	cant_go "In order to make sure the geographers don't get lost, the only exit is northwest.",
	section T_ALEXANDRIA,
  has	light;

Object -> spindle_from_the_globe "spindle from the globe"	! 457 / 0x1c9
  with	name 'spindle' 'axis' 'globe' 'earth',
	after SpindleAfter,
	before SpindleBefore,
	initial "Protruding from a broken globe of the Earth (marked with very tentative and approximate maps) is the spindle, the only thing holding it together.",
	description "Perhaps the best work of cartography likely for the next two thousand years, though it seems unlikely to last the next two hours.",
	rod_assoc rod_of_ice,
	devil_hint "Don't go waving this about.",
  has	hidden_rod;

Object Reading_Corridor "Reading Corridor"	! 458 / 0x1ca
  with	s_to Librarians_Office,
	w_to The_Birdcage_of_the_Muses,
	description "A spacious, densely colonnaded corridor, its walls lined with inset shelves on which are scrolls beyond count, ribboned, dusty, disintegrating, badly catalogued so that only an expert can find what he wants.",
	cant_go "You wander through the columns, but can find no exit save the thoroughfare west and a little office south.",
	section T_ALEXANDRIA,
  has	light;

Object -> dusty_scrolls "dusty scrolls"	! 459 / 0x1cb
  with	name 'dusty' 'scrolls' 'scroll' 'books' 'book',
	description "Even a single book may run for dozens of individual scrolls, and the titles are hard to interpret: anyway, most of the books are rubbish. Dewey decimal numbers are not due to be invented for millenia.",
	article "endless",
  has	scenery;

Object -> Callimachus "Callimachus"	! 460 / 0x1cc
  with	name 'callimachus' 'expert' 'librarian',
	life CallimachusLife,
	initial "The expert in question being Callimachus, who is brooding over a scroll, and hardly aware of your presence.",
	description "Callimachus is famous for something or other. You wonder what...",
  has	animate proper;

Object mystic_scroll "mystic scroll"	! 461 / 0x1cd
  with	name 'mystic' 'scroll',
	initial "Apollonius seems to have dropped a mystic scroll in the scuffle.",
	description "It tells that even the greatest mortal must choose of the three High [and the next word is illegible], for once and all, but that for each there is a way. The usual mystic nonsense.",
	devil_hint "Don't you believe it!",
	angel_hint "We in the afterlife, um, have a policy of never commenting on leaked documents.",
  has	;

Object purple_sash "purple sash"	! 462 / 0x1ce
  with	name 'purple' 'sash',
	initial "And Callimachus' purple shoulder-sash has come off.",
	description "Worn over the shoulder.",
  has	clothing;

Object Librarians_Office "Librarian's Office"	! 463 / 0x1cf
  with	name 'table' 'sand' 'wells' 'sandwells',
	n_to Reading_Corridor,
	description "A tiny office adjoining the colonnades north, this is home to Apollonius the head Librarian, whose writing implements, table and sand-wells are scattered untidily about.",
	section T_ALEXANDRIA,
  has	light;

Object -> Apollonius "Apollonius"	! 464 / 0x1d0
  with	name 'apollonius' 'head' 'expert' 'librarian',
	life CallimachusLife,
	initial "Apollonius paces about self-importantly in a purple sash, perusing documents on his desk.",
	description "His aim in life is chiefly to annoy Callimachus, his junior librarian and the modern poet he despises most.",
  has	animate proper;

Object Outside_the_Royal_Palace_of_Alexander "Outside the Royal Palace of Alexander"	! 465 / 0x1d1
  with	n_to PlaceNorth,
	s_to Outside_the_Theatre,
	description "A hugely impressive edifice, and everything you might expect from the man who conquered the whole of Asia Minor at an age when most people are starting to think about getting a mortgage.^^There are of course guards, but they're trying to catch the procession, so if you're careful not to draw attention to yourself you could probably sneak in to the north.",
	section T_ALEXANDRIA,
  has	light;

Object Lost_inside_the_Palace "Lost inside the Palace"	! 466 / 0x1d2
  with	after InsidePalaceAfter,
	before InsidePalaceBefore,
	n_to Lost_inside_the_Palace,
	s_to Lost_inside_the_Palace,
	e_to Lost_inside_the_Palace,
	w_to Lost_inside_the_Palace,
	ne_to Lost_inside_the_Palace,
	se_to Lost_inside_the_Palace,
	nw_to Lost_inside_the_Palace,
	nw_to Lost_inside_the_Palace,
	description "Scholars are divided on the origin of the ~maze~ legend: some hold that to a primitive culture, the Knossos palace was so complex as to seem a maze, and the king so fearsome as to seem a Minotaur.^^Others say the early palaces really were labyrinths to protect sacred altars.^^And you think it's because this is a maze of twisty little passages, all alike.",
	section T_ALEXANDRIA,
  has	light scored cat_nofollow;

Object -> slave "slave"	! 467 / 0x1d3
  with	name 'slave' 'deaf' 'mute',
	life SlaveLife,
	initial "A slave stands impassively by one wall.",
	description "Such a slave, a highly trained professional, stands at every intersection of passages in the palace. They are deaf mutes, to prevent them overhearing State secrets.",
  has	animate;

Object Palace_Balustrade "Palace Balustrade"	! 468 / 0x1d4
  with	after BalustradeAfter,
	description "The magnificent balcony overlooking the Royal harbour of Alexandria. In two hundred years' time, Julius Caesar will be besieged here, and will hold the palace with a tiny force of men against an entire army: and will lose his heart to Cleopatra...^^For the mean time, this is a broad stone balustraded balcony. The coin-bright moon, low in the sky, reflects off the black waters far below.",
	cant_go "There seems to be absolutely no way off the balcony, as the stone doors to the heart of the palace are sealed shut.",
	section T_ALEXANDRIA,
  has	light scored cat_nofollow;

Object -> astronomical_mounting "astronomical mounting"	! 469 / 0x1d5
  with	name 'mounting' 'socket' 'astronomical' 'tripod',
	after MountingAfter,
	initial "An impressive astronomical mounting stands on a tripod here. But there is no telescope.",
	article "an",
  has	static;

Object Beside_the_Drive "Beside the Drive"	! 470 / 0x1d6
  with	name 'wistaria' 'car' 'gravel',
	after DriveAfter,
	n_to "The old carved southern wall of the gardens blocks your way around the edge of the Hall.",
	w_to "The Hall is in the way.",
	ne_to Public_Footpath,
	u_to "The fire escape is perilous and leads nowhere. Doubtless it would be useless in any real fire.",
	description "At the foot of the Hall is the drive, a long gravel lane approaching the house through trees.^^Since your family are intermittently loading suitcases into the car, which only makes you feel guilty, the only safe way to creep away is along the public footpath, to northeast.",
	cant_go "Better not - they might catch you.",
	section T_NE_OF_HOME,
  has	light;

Object -> fire_escape "fire escape"	! 471 / 0x1d7
  with	name 'fire' 'escape' 'white' 'rope' 'rickety',
	after FireEscapeAfter,
	initial FireEscpeInitial,
	description "For the first couple of storeys, an old iron zig-zag, and after that a ladder that might or might not be well-anchored. The gardeners have done a good job of concealing it behind wistaria which (in any case) looks the stronger of the two.",
  has	static;

Object Public_Footpath "Public Footpath"	! 472 / 0x1d8
  with	name 'stile' 'dragonflies' 'house' 'hall' 'battlements',
	n_to Stone_Cross,
	nw_to Beside_the_Drive,
	d_to Hollow,
	description "By a stile in the public footpath across the fields to the village, which lies to the north. Sitting on the stile you have a splendid view of the house and its battlements. The air is ablaze with pollen and dragonflies.^^It might be possible to scramble down to a hollow, but it surely wouldn't be pleasant.",
	cant_go "The footpath turns from southwest to north.",
	section T_NE_OF_HOME,
  has	light;

Object Hollow "Hollow"	! 473 / 0x1d9
  with	nw_to Mosaic,
	u_to Public_Footpath,
	description "A low, muddy, stinking hollow, trodden with reeds, dried out in the long summer and no more than moist now. You could climb back up, or go northwest, though that would mean crawling through a thorny hedge.",
	section T_NE_OF_HOME,
  has	light;

Object -> nest "nest"	! 474 / 0x1da
  with	name 'nest',
	initial "There's a bird's nest at the bottom of the hollow.",
  has	static;

Object -> bunch_of_nuts "bunch of nuts"	! 475 / 0x1db
  with	name 'bunch' 'of' 'nuts',
	after NutsAfter,
	initial "Entwined in the nest is a bunch of nuts.",
	description "A bunch of nuts, left over from last autumn.",
	devil_hint "Nuts to you too.",
	angel_hint "Do you know, I love nuts, but I have to be so careful what I eat now... Still, the little ones will have them.",
  has	edible scored;

Object -> corn_crake "corn crake"	! 476 / 0x1dc
  with	name 'corn' 'crake' 'corncrake' 'deaf' 'rail' 'bird',
	life CornCrakeLife,
	initial "And sat upon it is, as you might expect, a bird: a corn crake, in fact.",
	description "A rail with a distinctive cry. And a possessive look.",
  has	animate;

Object Stone_Cross "Stone Cross"	! 477 / 0x1dd
  with	name 'pub' 'goat' 'compasses',
	n_to parish_church,
	s_to Public_Footpath,
	description "Beside the long triangle of the green, under the stone cross of the First World War memorial. The public footpath runs south to a stile. The village is tiny: the parish church, the ~Goat and Compasses~ pub (which, owing to quaint English licensing laws, is closed) and a few houses and desultory tea-shops for tourists visiting Meldrew Hall.",
	cant_go "You wander around the peaceful green for a while, but there's nothing to do.",
	section T_NE_OF_HOME,
  has	light;

Object -> Old_Evans "Old Evans"	! 478 / 0x1de
  with	name 'racing' 'enthusiast' 'old' 'evans',
	life OldEvansLife,
	initial "Old Evans, the village racing enthusiast, sits on the steps of the memorial, combing the back pages of his ~Racing Times~ newspaper.",
	description "In the band of his hat is his lucky mascot: a little picture of the crescent moon.",
  has	animate proper transparent;

Object -> -> Crescent_Moon "Crescent Moon"	! 483 / 0x1e3
  with	name 'crescent' 'moon' 'mascot' 'lucky' 'card' 'tarot',
	after CrescentMoonAfter TarotAfter,
	n_to Parish_Church,
	nw_to "Tarot cards",
	description "Some kind of crescent moon, an old Druidical symbol.",
	article "the",
	short TarotShort,
	parse_name TarotParseName,
	devil_hint "It leads nowhere.",
  has	card;

Object -> -> Racing_Times "Racing Times"	! 484 / 0x1e4
  with	name 'paper' 'newspaper' 'racing' 'times',
	after RacingTimesAfter,
	description "The front page story (~Lord Lucan's new acquisition Shergar comes out of retirement to win the Grand National~) is so boringly unsensational that you quickly lose interest. But Evans is eternally fascinated with minute details of the form of the horses, tomorrow's race meetings, current odds quoted by the bookmakers, and so on.",
  has	;

Object -> -> hat_band "hat band"	! 485 / 0x1e5
  with	name 'hat' 'band',
	after HatBandAfter,
	description "Racing aficionados consider it lucky to wear mascots in the bands of their hats.",
  has	;

Object -> war_memorial "war memorial"	! 479 / 0x1df
  with	name 'war' 'memorial' 'cross' 'green' 'stone' 'fallen',
	description "The stone cross, for the fallen of the Great War of 1914-18, contains more names than there are houses in the village.^^Your eye is caught by Second Lieutenant Gerard Meldrew of the 19th/21st Rifles, and you shiver, although the afternoon is warm.",
  has	scenery;

Object -> parish_church "parish church"	! 480 / 0x1e0
  with	name 'parish' 'church' 'door',
	after ChurchAfter,
	n_to Parish_Church,
	w_to w_obj,
	description "The fourteenth-century Church of St Michael and All Angels doesn't seem to be locked up, exactly - just barred from the other side.",
  has	door scenery;

Object -> Goat_and_Compasses "Goat and Compasses"	! 481 / 0x1e1
  with	name 'pub' 'goat' 'compasses' 'public' 'house' 'bar',
	after GoatsCompassesAfter,
	w_to w_obj,
	description "In the days of Oliver Cromwell, it was called ~God Encompasseth~, but the locals have worn down the name over the centuries to ~Goat and Compasses~. It is of course closed, owing to the licensing laws. You congratulate yourself on living in such a modern, forward-looking country.",
  has	door locked proper scenery;

Object pet_monkey "pet monkey"	! 482 / 0x1e2
  with	name 'pet' 'monkey',
	after PetMonkeyAfter,
	initial "The monkey sits on Evans' shoulder, cheeping with excitement. Evans has found a pet, and is so gruffly delighted that he has forgotten all about the mascot you stole. Now if he could only predict the 3.40 at Borchester Mills...",
  has	animate;

Object Parish_Church "Parish Church"	! 486 / 0x1e6
  with	name 'flowers' 'pews' 'woven' 'mattings' 'lectern' 'altar',
	s_to ParishChurchSouth,
	e_to East_Side_Chapel,
	w_to West_Side_Chapel,
	u_to Bell_Tower,
	d_to ParishChurchDown,
	description "Before this was the Norman church of St Michael and All Angels, it was a Saxon one: this is an ancient site. A great space of stone, filled with dark wooden pews and woven mattings. Flowers left over from Sunday grace the lectern and altar. A narrow stair leads upward, and the village green lies to the south.^^Old side chapels lie east and west.",
	section T_NE_OF_HOME,
  has	light;

Object -> Moonstone "Moonstone"	! 487 / 0x1e7
  with	name 'moonstone' 'moon' 'stone' 'door' 'flagstone' 'iron' 'rings' 'old',
	after MoonstoneAfter,
	s_to "Set into the floor, and slightly raised, is the Moonstone, an ancient broad flagstone the size of a door, inscribed with a crescent moon.",
	w_to thedark,
	initial "A passage slants down through a solid crystal doorway in the Moonstone.",
	description "The Moonstone is very old, probably pre-dating the rest of the church by some centuries. Legends about it abound: some say the spirits of the departed pass beneath. Old iron rings are set in it, but nobody has ever succeeded in lifting the colossal weight.",
	article "the",
  has	door static;

Object West_Side_Chapel "West Side Chapel"	! 488 / 0x1e8
  with	name 'stained' 'glass' 'windows' 'resurrect',
	after WestSideChapelAfter,
	before WestSideChapelBefore,
	e_to Parish_Church,
	description "An alcove in the ancient west side of the church, beneath stained glass windows of the Resurrection.",
	cant_go "The church lies east.",
	each_turn WestSideChapelEachTurn,
	section T_NE_OF_HOME,
  has	light;

Object -> adamantine_statue "adamantine statue"	! 489 / 0x1e9
  with	name 'adamantine' 'statue' 'adamant' 'knight',
	description "The statue is half-skeleton, and you can see clear through the bones.",
	article "an",
  has	concealed static;

Object adamantine_knight "adamantine knight"	! 490 / 0x1ea
  with	name 'adamantine' 'statue' 'adamant' 'knight',
	life AdamantineKnightLife,
	initial "The adamantine knight stands staunchly here.",
	description " .The knight is bursting and eager with life, as though nothing could fade his boundless energy for existence. ",
	article "the",
  has	animate;

Object East_Side_Chapel "East Side Chapel"	! 491 / 0x1eb
  with	name 'stained' 'glass' 'windows' 'nativity',
	w_to Parish_Church,
	description "A small clear space to the side of the church, in a bay ringed with stained glass windows of the Nativity.",
	cant_go "The church lies west.",
	section T_NE_OF_HOME,
  has	light;

Object -> statue_of_Diana "statue of Diana"	! 492 / 0x1ec
  with	name 'marble' 'statue' 'of' 'diana',
	after DianaAfter,
	initial "A tall marble statue of Diana stands here: a find from the nearby Roman remains.",
	description "There is a sly look in her eye as she smiles aslant.",
  has	static;

Object Bell_Tower "Bell Tower"	! 493 / 0x1ed
  with	name 'clerestory' 'plaque',
	u_to "The ropes are too smooth and noisy to climb.",
	d_to Parish_Church,
	description "The bell-ringing chamber, half-way up the church tower. Thick braided ropes hang down, tailing into sashes. A plaque on one wall announces that in 1901, ten men (Roger Meldrew among them) rang a Kent Triple Bob.",
	section T_NE_OF_HOME,
  has	light;

Object -> bell_ropes "bell ropes"	! 494 / 0x1ee
  with	name 'bell' 'bells' 'rope' 'ropes' 'braided' 'sash' 'sashes',
	after BellRopesAfter,
	article "eight",
  has	scenery;

Object Out_on_the_Spire "Out on the Spire"	! 495 / 0x1ef
  with	name 'village' 'clerestory' 'hills' 'farmlands' 'weather' 'vane' 'weatherva',
	d_to OutOfSpireDown,
	description "There is a beautiful view over the green parceled farmlands and hills surrounding the village, and you feel a certain pride to see Meldrew Hall sitting amongst it. It's also windy and dangerous up here on the grey lead spire of the parish church, beside the old clock: fortunately an opening leads down into the clerestory.",
	section T_NE_OF_HOME,
  has	light;

Object -> adamantine_hand "adamantine hand"	! 496 / 0x1f0
  with	name 'adamantine' 'hand' 'adamant',
	initial "Mounted loosely on the end of the weathervane, an adamantine hand points the way the wind blows.",
	description "Like a solid glove.^^It reminds you oddly of one of the symbolic pieces in Monopoly - the ship, the car and so on.",
	article "an",
	angel_hint "There must be more to this marvellous figure somewhere.",
  has	;

Object -> old_village_clock "old village clock"	! 497 / 0x1f1
  with	name 'clock' 'old' 'plaque' 'commemorative',
	description "The clock stands at ten past three, as it has done for some years. According to a small commemorative plaque, it was the work of William Snelson the Clockmaker (1776-1848).",
	article "William Snelson's",
  has	scenery;

Object Hellish_Place "Hellish Place"	! 498 / 0x1f2
  with	name 'desk',
	before HellishPlaceBefore,
	n_to Cellar_West,
	u_to Cellar_West,
	description "Hell, you always imagined, would contain fiery, sulphurous pits and a great many gentlemen with forked tails. You were right about the last part. A demon is sitting behind a flame-proofed desk at the bottom of the stairs. There are some disconcerting screams from further away, but nothing to worry about. Not in this life, anyway.",
	cant_go HellishPlaceCantGo,
	each_turn HellishPlaceEachTurn,
	section T_AFTERLIFE,
  has	light;

Object -> demon "demon"	! 499 / 0x1f3
  with	name 'devil' 'demon' 'demonic' 'gentleman',
	life DaemonLife,
	description "If you were to cast a film of your adventures so far, you would hire Donald Sutherland to play this gentleman.",
	number 4,
  has	animate scenery;

Object Heavenly_Place "Heavenly Place"	! 500 / 0x1f4
  with	name 'furniture' 'cloud',
	after HeavenAfter,
	before HeavenBefore,
	s_to Up_the_Beanstalk,
	description "Heaven, you always imagined, would be a world of marble pillars, fluffy clouds, harps and angelic ladies with serene expressions. You were right about the last part. An angel is sitting here behind some new office furniture, next to a blue Tourist Information sign. A bridge of cloud extends south across the sky to the beanstalk. There is some choral singing going on somewhere, but not loud enough for you to hear properly. Not in this life, anyway.",
	cant_go HeavenCantGo,
	each_turn HeavenEachTurn,
	section T_AFTERLIFE,
  has	light;

Object -> angel "angel"	! 501 / 0x1f5
  with	name 'angel' 'lady' 'angelic',
	life routine147316,
	description "If you were to cast a film of your adventures so far, you would hire Dame Judi Dench to play this lady.",
	number 4,
  has	animate scenery;

Object carbolic_soap "carbolic soap"	! 502 / 0x1f6
  with	name 'soap' 'carbolic',
	after SoapAfter,
	description "~For foulmouths everywhere~.",
	article "a cake of",
	devil_hint "That's the spirit, keep it up!",
	angel_hint "Really!  How disgraceful!",
  has	concealed;

! Constants

! etype_enum
Constant STUCK_PE = 1;
Constant UPTO_PE = 2;
Constant NUMBER_PE = 3;
Constant CANTSEE_PE = 4;
Constant TOOLIT_PE = 5;
Constant NOTHELD_PE = 6;
Constant MULTI_PE = 7;
Constant MMULTI_PE = 8;
Constant VAGUE_PE = 9;
Constant EXCEPT_PE = 10;
Constant ANIMA_PE = 11;
Constant VERB_PE = 12;
Constant SCENERY_PE = 13;
Constant ITGONE_PE = 14;
Constant JUNKAFTER_PE = 15;
Constant TOOFEW_PE = 16;
Constant NOTHING_PE = 17;
Constant ASKSCOPE_PE = 18;

! reason_type
Constant PARSING_REASON = 0;
Constant TALKING_REASON = 1;
Constant EACH_TURN_REASON = 2;
Constant REACT_BEFORE_REASON = 3;
Constant REACT_AFTER_REASON = 4;
Constant LOOPOVERSCOPE_REASON = 5;
Constant TESTSCOPE_REASON = 6;

! display_bit
Constant NEWLINE_BIT = 1;
Constant INDENT_BIT = 2;
Constant FULLINV_BIT = 4;
Constant ENGLISH_BIT = 8;
Constant RECURSE_BIT = 16;
Constant ALWAYS_BIT = 32;
Constant TERSE_BIT = 64;
Constant PARTINV_BIT = 128;
Constant DEFART_BIT = 256;
Constant WORKFLAG_BIT = 512;
Constant ISARE_BIT = 1024;
Constant CONCEAL_BIT = 2048;
Constant NOARTICLE_BIT = 4096;
Constant ID_BIT = 8192;

! game_area
Constant T_MODERN = 1;
Constant T_UNREAL = 2;
Constant T_HAMBURG = 3;
Constant T_TAROT = 4;
Constant T_GARDEN = 5;
Constant T_GARDEN_PAST = 6;
Constant T_ANCIENT_BRITAIN = 7;
Constant T_DREAMING = 8;
Constant T_CATACOMBS = 9;
Constant T_ALEXANDRIA = 11;
Constant T_NE_OF_HOME = 12;
Constant T_SPIRIT_WORLD = 13;
Constant T_AFTERLIFE = 14;

! final_state
Constant DIED = 1;
Constant WON = 2;
Constant FAILED = 3;
Constant DESTROYED_UNIVERSE = 4;
Constant AUSTRALIA = 5;
Constant PARADOX = 6;
Constant MYTH = 7;
Constant PRISON = 8;
Constant CHECKMATED = 9;
Constant SPOOKED = 10;

! score_index
Constant SCORE_HAMBURG = 0;
Constant SCORE_TORCH = 1;
Constant SCORE_JOSHUA = 2;
Constant SCORE_SECRETDOOR = 3;
Constant SCORE_DEMIJOHN = 4;
Constant SCORE_WAITER = 5;
Constant SCORE_WAND = 6;
Constant SCORE_AIMWAND = 7;
Constant SCORE_WIRELESS = 8;
Constant SCORE_DAISY = 9;
Constant SCORE_CHOCOLATE = 10;
Constant SCORE_ANDROMEDA = 11;
Constant SCORE_BATTERY = 12;
Constant SCORE_PLUMBING = 13;
Constant SCORE_SMELL = 14;
Constant SCORE_REFLECTING = 15;
Constant SCORE_HENRIPOST = 16;
Constant SCORE_ORB = 17;
Constant SCORE_MAP = 18;
Constant SCORE_ARC = 19;
Constant SCORE_WELL = 20;
Constant SCORE_MASCOT = 21;
Constant SCORE_BISCUIT = 22;
Constant SCORE_SMOKE = 23;
Constant SCORE_SHIP = 24;
Constant SCORE_FLAG = 25;
Constant SCORE_SLEEP = 26;
Constant SCORE_SECRET_PASS = 27;
Constant SCORE_ROD_IDENT = 28;
Constant SCORE_WATCH = 29;
Constant SCORE_HYPNOSIS = 30;
Constant SCORE_SECURITY = 31;
Constant SCORE_TEMPLE = 32;
Constant SCORE_HOMER = 33;
Constant SCORE_ORACLE = 34;
Constant SCORE_STRONGBOX = 35;
Constant SCORE_AUSTIN = 36;
Constant SCORE_WASH = 37;
Constant SCORE_LIBRARY = 38;
Constant SCORE_SPHINX = 39;
Constant SCORE_QUARTERSTAFF = 40;
Constant SCORE_AFTERLIFE = 41;
Constant SCORE_KNIGHT = 42;
Constant SCORE_KNIGHT_ENCOURAGE = 43;
Constant SCORE_HIGHROD = 44;

! Globals

Global location = Compass;
Global sline1;
Global sline2;
Global the_time = 65535;
Global time_rate = 1;
Global time_step;
Global score;
Global turns = 1;
Global player;
Global lightflag = true;
Global real_location = thedark;
Global print_player_flag;
Global deadflag;
Global transcript_mode;
Global last_score;
Global notify_mode = true;
Global places_score;
Global things_score;
Global lookmode = 1;
Global lastdesc;
Global top_object;
Global toomany_flag;
Global actor;
Global actor_location;
Global verb;
Global inp1;
Global inp2;
Global special_number1;
Global special_number2;
Global selfobj;
Global noun;
Global second;
Global special_word;
Global special_number;
Global parsed_number;
Global multiflag;
Global notheld_mode;
Global onotheld_mode;
Global meta;
Global orders;
Global action;
Global consult_from;
Global consult_words;
Global undo_flag;
Global parser_trace;
Global global47;
Global lm_n;
Global lm_o;
Global wn;
Global num_words;
Global verb_word;
Global verb_wordnum;
Global global54;
Global multi_wanted;
Global multihad;
Global multi_context;
Global pcount;
Global pcount2;
Global parameters;
Global params_wanted;
Global nsns;
Global interfrom;
Global inferword;
Global oops_from;
Global saved_oops;
Global number_matched;
Global number_of_classes;
Global match_length;
Global match_from;
Global parser_action;
Global parser_one;
Global parser_two;
Global vague_word;
Global vague_obj;
Global itobj;
Global himobj;
Global herobj;
Global lookahead;
Global indef_mode;
Global indef_type;
Global indef_wanted;
Global indef_guess_p;
Global allow_plurals;
Global notholding;
Global global86;
Global global87;
Global held_back_mode;
Global hb_wn;
Global pcount2;
Global etype;
Global last_command_from;
Global last_command_to;
Global token_was;
Global advance_warning;
Global placed_in_flag;
Global global97;
Global action_to_be;
Global dont_infer;
Global scope_reason;
Global scope_token;
Global scope_error;
Global scope_stage;
Global ats_flag;
Global ats_hls;
Global take_all_rule = 1;
Global usual_grammar_after;
Global undone_flag;
Global pretty_mode = true;
Global menu_nesting;
Global submenu_number = 8;
Global submenu_header = "Nameless item";
Global menu_item;
Global active_timers;
Global rod_identity = 1;
Global c_style;
Global lt_value;
Global listing_together;
Global global119;
Global wlf_indent;
Global inventory_style;
Global keep_silent;
Global global123;
Global game_section = T_MODERN;
Global good_try_bonus;
Global debug_deterministic_transportation;
Global KnowLanguages;
Global displaying_quote = true;
Global before_short_desc;
Global short_loc_var;
Global save_game_sec;
Global save_score;
Global global133;
Global rod_score;
Global StrongboxX;
Global StrongboxY;
Global LocationSave;
Global ContainerSave;
Global ball_polished;
Global tablet_eaten;
Global daisy_given;
Global global142 = 25144[?];
Global Mouse_x = 8;
Global Mousy_y = 3;
Global MouseUnderstandsMask;
Global card_ptr;
Global hollow_man_cnt;
Global poseiden_warning;
Global priest_cnt;
Global MazeX = 4;
Global MazeY = 6;
Global WeedkillerX = 100;
Global WeedkillerY = 100;
Global DigX;
Global DigY;
Global OldDigX;
Global OldDigY;
Global CouncilCnt;
Global DreamCnt;
Global OzoneSmelled;
Global slide_moves;
Global global164;
Global global165;
Global global166;
Global global167;
Global global168;
Global global169;
Global global170;
Global global171;
Global global172;
Global global173;
Global global174;
Global bool_array_recently_set = 65535;
Global one_time_try_bonus;
Global global178;
Global yard_dir;
Global dig_cnt;
Global current_game_sec;
Global global182;
Global global183;
Global global184;
Global global185;
Global global186;
Global global187;
Global global188;
Global global189;
Global global190;
Global global191;
Global global192;
Global global193;
Global global194;
Global global195;
Global global196;
Global global197;
Global global198;
Global global199;
Global global200;
Global global201;
Global global202;
Global global203;
Global global204;
Global global205;
Global global206;
Global global207;
Global global208;
Global global209;
Global global210;
Global global211;
Global global212;
Global global213;
Global global214;
Global global215;
Global global216;
Global global217;
Global global218;
Global global219;
Global global220;
Global global221;
Global global222;
Global global223;
Global global224;
Global global225;
Global global226;
Global global227;
Global global228;
Global global229;
Global global230;
Global global231;
Global global232;
Global global233;
Global global234;
Global global235;
Global global236;
Global global237;
Global global238;
Global generic_globvar;

! Arrays
Array task_scores ->	! 23848 (0x5d28)
    3
    7
    7
    10
    3
    3
    5
    5
    2
    2
    3
    50
    3
    4
    6
    6
    15
    10
    1
    8
    4
    0
    0
    3
    3
    6
    5
    10
    7
    7
    3
    3
    3
    6
    3
    8
    3
    3
    7
    3
    3
    15
    15
    3
;
Array standard_interpreter --> 1280[?];	! 0 (0x0)
Array card_deck --> 1;	! 25207 (0x6277)
Array garden_array ->	! 25228 (0x628c)
    49
    49
    49
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    48
    49
    48
    48
    49
    49
    49
    48
    49
    48
    48
    49
    48
    49
    49
    48
    48
    48
    49
    48
    48
    48
    49
    49
    49
    48
    49
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    48
    49
    48
    49
    49
    49
    49
    49
    48
    49
    49
    49
    49
;
Array quote_line --> 10;	! 25943 (0x6557)
Array the_timers --> 1;	! 23893 (0x5d55)
Array array_23957 --> 1;	! 23957 (0x5d95)
Array array_24021 --> 30720;	! 24021 (0x5dd5)
Array parse --> 16384[?];	! 24142 (0x5e4e)
Array array_24142 --> 16384[?];	! 24142 (0x5e4e)
Array inputobjs --> 1;	! 24207 (0x5e8f)
Array multiple_object --> 1;	! 24239 (0x5eaf)
Array array_24488 --> 16384[?];	! 24488 (0x5fa8)
Array array_24553 --> 16384[?];	! 24553 (0x5fe9)
Array array_24618 --> 1;	! 24618 (0x602a)
Array array_24634 --> 1;	! 24634 (0x603a)
Array array_24650 --> 1;	! 24650 (0x604a)
Array match_list --> 1;	! 24660 (0x6054)
Array array_24788 --> 1;	! 24788 (0x60d4)
Array array_24916 --> 1;	! 24916 (0x6154)
Array array_25223 --> 1;	! 25223 (0x6287)
Array henri_post_array ->	! 25291 (0x62cb)
    8
    2
    16
    14
    5
    12
    1
    3
    15
    18
    11
    19
    0
    9
    20
;
Array array_25306 --> 2050[?];	! 25306 (0x62da)
Array extra_global_bool_array -> 48;	! 25893 (0x6525)
Array task_done --> 22;	! 25975 (0x6577)
Array array_26065 --> 48[furniture?];	! 26065 (0x65d1)
Array actions_table -->	! 28893 (0x70dd)
    ScoreSub
    FullScoreSub
    QuitSub
    RestoreSub
    RestartSub
    VerifySub
    SaveSub
    ScriptOnSub
    ScriptOffSub
    LMode3Sub
    LMode2Sub
    LMode1Sub
    NounsSub
    NotifyOnSub
    NotifyOffSub
    VersionSub
    PlacesSub
    ObjectsSub
    ExitSub
    TakeSub
    RemoveSub
    EnterSub
    DisrobeSub
    TakeOffSub
    InvSub
    WearSub
    InsertSub
    PutOnSub
    DropSub
    EmptySub
    EmptyTSub
    TransferSub
    ThrowAtSub
    GiveRSub
    GiveSub
    ShowRSub
    ShowSub
    VagueGoSub
    GoSub
    InvTallSub
    InvWideSub
    LookSub
    ReadSub
    SearchSub
    LookUnderSub
    ConsultSub
    OpenSub
    UnlockSub
    CloseSub
    SwitchOffSub
    EnterSub
    YesSub
    NoSub
    SorrySub
    StrongSub
    MildSub
    WaveHandsSub
    WaveSub
    SetSub
    SetToSub
    PullSub
    PushSub
    PushDirSub
    TurnSub
    SwitchOnSub
    LockSub
    AttackSub
    WaitSub
    AnswerSub
    TellSub
    AskSub
    AskForSub
    EatSub
    SleepSub
    SingSub
    ClimbSub
    BuySub
    SqueezeSub
    SwimSub
    SwingSub
    BlowSub
    PraySub
    WakeSub
    WakeOtherSub
    KissSub
    ThinkSub
    SmellSub
    ListenSub
    TasteSub
    TouchSub
    CleanSub
    RepairSub
    BurnSub
    DrinkSub
    FillSub
    CutSub
    JumpSub
    JumpOverSub
    DigSub
    PlainSub
    PrettySub
    HintsSub
    HelpSub
    HelpSpecialSub
    TimeSub
    LookUpSub
    PaceSub
    RamSub
    LieSub
    LieDownSub
    ExamineSub
    WashSub
    DigWithSub
    TurnWithSub
    RipSub
    RipDownSub
    ShoutSub
    LagachSub
    StrikeSub
    KillSub
    PointVagueSub
    PointAtSub
    PointSub
    PlayCroquetSub
    DiagnoseSub
    DanceSub
    BeepSub
    LeanSub
    PropWithSub
    SlideSub
    XyzzySub
    ShantihSub
    MilkSub
    PaceDirSub
    HypnotizeSub
    AnoppeSub
    SailSub
    AnointSub
    KnockSub
    WishSub
    InscribeSub
    InscribeOnSub
    GambleSub
    CloseWithSub
    StackSub
;
Array preactions_table --> IsDirection;	! 29185 (0x7201)

! Routines

[ Main ;	! 41756 / 0xa31c
    PlayTheGame();
    rtrue;
];

[ Keyboard a_buffer a_table nw i w x1 x2 ;	! 41764 / 0xa324
    DisplayStatus();
  .label41768;
    i = 0;
  .label41771;
    if (i < 10) {
        array_24650->i = a_table->i;
        ++i;
        jump label41771;
    }
    a_buffer->0 = 120[steel_wrench?];
    a_table->0 = 64[Disused_Observatory?];
    L__M(##Prompt);
    Stub7();
    generic_globvar = 0;
    a_buffer->1 = 0;
    StatusLinePrinter();
    @aread a_buffer a_table -> generic_globvar;
    nw = a_table->1;
    if (nw == 0) {
        L__M(##Miscellany,10);
        jump label41768;
    }
    w = a_table-->1;
    if (w == 'o//' or 'oops') {
        ! no code
    } else {
        if (w == 'undo' && parse->1 == 1[?]) {
            if (turns == 1) {
                L__M(##Miscellany,11);
                jump label41768;
            }
            if (undo_flag == 0) {
                L__M(##Miscellany,6);
                jump label41768;
            }
            if (undo_flag == 1) {
                ! no code
            } else {
                if (undone_flag == 1) {
                    L__M(##Miscellany,12);
                    jump label41768;
                }
                @restore_undo -> i;
                if (i ~= 0) jump label41948;
            }
            L__M(##Miscellany,7);
          .label41948;
            jump label41768;
        }
        @save_undo -> i;
        undone_flag = 0;
        undo_flag = 2;
        if (i == 65535) {
            undo_flag = 0;
        }
        if (i == 0) {
            undo_flag = 1;
        }
        if (i == 2) {
            style bold;
            PrintShortName(location);
            print "^";
            style roman;
            L__M(##Miscellany,13);
            undone_flag = 1;
            jump label41768;
        }
        return nw;
    }
    if (oops_from == 0) {
        L__M(##Miscellany,14);
        jump label41768;
    }
    if (nw == 1[?]) {
        L__M(##Miscellany,15);
        jump label41768;
    }
    if (nw > 2) {
        L__M(##Miscellany,16);
        jump label41768;
    }
    x1 = a_table-->3;
    x2 = a_table-->4;
    i = 0;
  .label42069;
    if (i < 10) {
        a_table->i = array_24650->i;
        ++i;
        jump label42069;
    }
    w = 2 * oops_from - 1;
    a_table-->w = x1;
    a_table-->(w + 1) = x2;
    return nw;
];

[ Parser results syntax line num_lines line_address i j token l m ;	! 42116 / 0xa484
    if (notheld_mode == 1) {
        i = 0;
      .label42125;
        if (i < 8) {
            results-->i = array_24916-->i;
            ++i;
            jump label42125;
        }
        notheld_mode = 0;
        rtrue;
    }
    if (held_back_mode == 1) {
        held_back_mode = 0;
        i = 0;
      .label42161;
        if (i < 64) {
            parse->i = array_24488->i;
            ++i;
            jump label42161;
        }
        new_line;
        jump label42195;
    }
  .label42187;
    Keyboard(24021[?],24142[?]);
  .label42195;
    num_words = parse->1;
    wn = 1;
    Stub6();
    num_words = parse->1;
    if (parser_trace >= 4) {
        print "[ ", num_words, " to parse: ";
        i = 1[?];
      .label42238;
        if (i <= num_words) {
            j = parse-->((i - 1) * 2 + 1);
            if (j == 0) {
                print "? ";
            } else {
                if (UnsignedCompare(j,0-->4) >= 0 && UnsignedCompare(j,0-->2) < 0) {
                    print (address) j;
                } else {
                    print j;
                }
                print " ";
            }
            ++i;
            jump label42238;
        }
        print "]^";
    }
    verb_wordnum = 1[?];
    actor = player;
    actor_location = location;
    usual_grammar_after = 0;
  .label42337;
    token_was = 0;
    scope_token = 0;
    action_to_be = ##-1;
  .label42348;
    wn = verb_wordnum;
    verb_word = NextWordStopped();
    if (verb_word == 'invalidDictWord65535') {
        pcount2 = 1[?];
    } else {
        if (verb_word == 'g//') {
            verb_word = 'again';
        }
        if (verb_word == 'again') {
            if (actor ~= player) {
                print "To repeat a command like ~frog, jump~, just say ~again~, not ~frog, again~.^";
                jump label42187;
            }
            if (array_24553->1 == 0) {
                print "You can hardly repeat that.^";
                jump label42187;
            }
            i = 0;
          .label42488;
            if (i < 64) {
                parse->i = array_24553->i;
                ++i;
                jump label42488;
            }
            jump label42195;
        }
        if (verb_word ~= 'again') {
            i = 0;
          .label42523;
            if (i < 64) {
                array_24553->i = parse->i;
                ++i;
                jump label42523;
            }
        }
        if (usual_grammar_after == 0) {
            i = RunRoutines(actor,grammar);
            if (parser_trace >= 2 && actor.grammar ~= 0 or 65535[?]) {
                print " [Grammar property returned ", i, "]^";
            }
            if (i < 0) {
                usual_grammar_after = verb_wordnum;
                i = 0 - i;
            }
            if (i == 1[?]) {
                results-->0 = verb;
                results-->1 = noun;
                results-->2 = second;
                rtrue;
            }
            if (i ~= 0) {
                verb_word = i;
                --wn;
                --verb_wordnum;
            } else {
                wn = verb_wordnum;
                verb_word = NextWord();
            }
        } else {
            usual_grammar_after = 0;
        }
        if (verb_word == 0 || verb_word->6 & 1 == 0) {
            wn = verb_wordnum;
            l = NounDomain(1[?],0,0);
            if (l == 10000[?]) {
                jump label42195;
            }
            if (l ~= 0) {
                results-->0 = 38[Meldrewes_History?];
                results-->1 = 1[?];
                results-->2 = l;
                jump label45430;
            }
            if (actor == player) {
                j = 2[?];
              .label42736;
                if (j <= num_words) {
                    i = NextWord();
                    if (i == 41628['xcomma'?]) {
                        jump label42780;
                    }
                    ++j;
                    jump label42736;
                }
                verb_word = Stub4(verb_word);
                if (verb_word ~= 0) {
                    jump label43039;
                }
            }
            pcount2 = 12[out_obj?];
            jump label44685;
          .label42780;
            j = wn - 1;
            if (j == 1[?]) {
                print "You can't begin with a comma.^";
                jump label42187;
            }
            wn = 1;
            lookahead = 1;
            scope_reason = TALKING_REASON;
            l = NounDomain(player,actor_location,6[ne_obj?]);
            scope_reason = PARSING_REASON;
            if (l == 10000[?]) {
                jump label42195;
            }
            if (l == 0) {
                print "You seem to want to talk to someone, but I can't see whom.^";
                jump label42187;
            }
            if (l hasnt animate && l hasnt talkable) {
                print "You can't talk to ";
                Defart(l);
                print ".^";
                jump label42187;
            }
            if (wn ~= j) {
                print "To talk to someone, try ~someone, hello~ or some such.^";
                jump label42187;
            }
            ResetVagueWords(l);
            verb_wordnum = j + 1;
            actor = l;
            actor_location = l;
          .label42986;
            if (parent(actor_location) ~= nothing) {
                actor_location = parent(actor_location);
                jump label42986;
            }
            if (parser_trace >= 1) {
                print "[Actor is ";
                Defart(actor);
                print " in ";
                PrintShortName(actor_location);
                print "]^";
            }
            jump label42348;
        }
      .label43039;
        meta = verb_word->6 & 2 / 2;
        if (meta == 1 && actor ~= player) {
            pcount2 = 12[out_obj?];
            meta = 0;
        } else {
            i = 255 - verb_word->7;
            syntax = 0-->7-->i;
            num_lines = syntax->0 - 1;
            vague_word = 'it';
            vague_obj = itobj;
            if (parser_trace >= 1) {
                print "[Parsing for the verb '", (address) verb_word, "' (", num_lines + 1, " lines)]^";
            }
            pcount2 = 1[?];
            line = 0;
          .label43155;
            if (line <= num_lines) {
                line_address = syntax + 1 + line * 8;
                if (parser_trace >= 1) {
                    print "[Line ", line, ": ", line_address->0, " parameters: ";
                    pcount = 1;
                  .label43213;
                    if (pcount <= 6) {
                        token = line_address->pcount;
                        print token, " ";
                        ++pcount;
                        jump label43213;
                    }
                    print " -> action ", line_address->7, "]^";
                }
                notholding = 0;
                interfrom = 0;
                parameters = 0;
                params_wanted = line_address->0;
                nsns = 0;
                special_word = 0;
                special_number = 0;
                multiple_object-->0 = 0;
                multi_context = 0;
                etype = STUCK_PE;
                action_to_be = line_address->7;
                wn = verb_wordnum + 1;
                advance_warning = 65535;
                indef_mode = 0;
                i = 0;
                m = 0;
                pcount = 1;
              .label43315;
                if (pcount <= 6) {
                    scope_token = 0;
                    token = line_address->pcount;
                    if (token == 2) {
                        ++m;
                    }
                    if (token < 180) {
                        ++i;
                    }
                    if (token == 4 or 5 && i == 1[?]) {
                        if (parser_trace >= 2) {
                            print " [Trying look-ahead]^";
                        }
                        ++pcount;
                      .label43381;
                        if (pcount <= 6 && line_address->pcount >= 180) {
                            ++pcount;
                            jump label43381;
                        }
                        token = line_address->(pcount - 1);
                        if (token >= 180) {
                            j = AdjectiveAddress(token);
                          .label43419;
                            if (wn <= num_words) {
                                if (NextWord() == j) {
                                    l = NounDomain(actor_location,actor,token);
                                    if (parser_trace >= 2) {
                                        print " [Forward token parsed: ";
                                        if (l == 10000[?]) {
                                            print "re-parse request]^";
                                        }
                                        if (l == 1[?]) {
                                            print "but multiple found]^";
                                        }
                                        if (l == 0) {
                                            print "hit error ", etype, "]^";
                                        }
                                    }
                                    if (l == 10000[?]) {
                                        jump label42195;
                                    }
                                    if (l >= 2) {
                                        advance_warning = l;
                                        if (parser_trace >= 3) {
                                            Defart(l);
                                            print "]^";
                                        }
                                    }
                                }
                                jump label43419;
                            }
                        }
                    }
                    ++pcount;
                    jump label43315;
                }
                take_all_rule = 0;
                if (m == 1[?] && params_wanted == 1[?] && action_to_be == ##Take) {
                    take_all_rule = 1;
                }
                notholding = 0;
                interfrom = 0;
                parameters = 0;
                nsns = 0;
                special_word = 0;
                special_number = 0;
                multiple_object-->0 = 0;
                etype = STUCK_PE;
                action_to_be = line_address->7;
                wn = verb_wordnum + 1;
                pcount = 1;
              .label43635;
                if (pcount <= 6) {
                    array_24618-->pcount = 0;
                    scope_token = 0;
                    token = line_address->pcount;
                    if (parser_trace >= 2) {
                        print " [Token ", pcount, " is ", token, ": ";
                        if (token < 16) {
                            if (token == 0) {
                                print "<noun> or null";
                            }
                            if (token == 1) {
                                print "<held>";
                            }
                            if (token == 2) {
                                print "<multi>";
                            }
                            if (token == 3) {
                                print "<multiheld>";
                            }
                            if (token == 4) {
                                print "<multiexcept>";
                            }
                            if (token == 5) {
                                print "<multiinside>";
                            }
                            if (token == 6) {
                                print "<creature>";
                            }
                            if (token == 7) {
                                print "<special>";
                            }
                            if (token == 8) {
                                print "<number>";
                            }
                        }
                        if (token >= 16 && token < 48) {
                            print "<noun filter by routine ", token - 16, ">";
                        }
                        if (token >= 48 && token < 80) {
                            print "<general parse by routine ", token - 48, ">";
                        }
                        if (token >= 80 && token < 128) {
                            print "<scope parse by routine ", token - 80, ">";
                        }
                        if (token >= 128 && token < 180) {
                            print "<noun filter by attribute ", token - 128, ">";
                        }
                        if (token > 180) {
                            print "<adjective ", 255 - token, " '", (address) AdjectiveAddress(token), "'>";
                        }
                        print " at word number ", wn, "]^";
                    }
                    m = pcount + 1;
                    lookahead = 8;
                    if (m <= 6) {
                        lookahead = line_address->m;
                    }
                    if (lookahead == 0) {
                        m = parameters;
                        if (token <= 7) {
                            ++m;
                        }
                        if (m >= params_wanted) {
                            lookahead = 8;
                        }
                    }
                    if (token > 180) {
                        array_24618-->pcount = 10000 + token;
                        if (wn > num_words) {
                            if (interfrom == 0 && parameters < params_wanted) {
                                interfrom = pcount;
                                inferword = token;
                            }
                            if (interfrom == 0) {
                                jump label44659;
                            }
                        }
                        if (wn <= num_words && token ~= AdjectiveWord()) {
                            jump label44659;
                        }
                    } else {
                        if (parameters == params_wanted) {
                            if (wn <= num_words) {
                                l = NextWord();
                                if (l == 40296['then'?] or 41628['xcomma'?]) {
                                    held_back_mode = 1;
                                    hb_wn = wn - 1;
                                } else {
                                    m = 0;
                                  .label44207;
                                    if (m < 8) {
                                        array_24634-->m = array_24618-->m;
                                        ++m;
                                        jump label44207;
                                    }
                                    pcount2 = pcount;
                                    etype = UPTO_PE;
                                    jump label44659;
                                }
                            }
                            if (parameters >= 1 && results-->2 == 0) {
                                l = ReviseMulti(results-->3);
                                if (l ~= 0) {
                                    etype = l;
                                    jump label44659;
                                }
                            }
                            if (parameters >= 2 && results-->3 == 0) {
                                l = ReviseMulti(results-->2);
                                if (l ~= 0) {
                                    etype = l;
                                    jump label44659;
                                }
                            }
                            if (take_all_rule == 2 && results-->2 == actor) {
                                pcount2 = 17[rod_of_fire?];
                                jump label44685;
                            }
                            if (parser_trace >= 1) {
                                print "[Line successfully parsed]^";
                            }
                            if (interfrom ~= 0) {
                                print "(";
                                PrintCommand(interfrom,1[?]);
                                print ")^";
                            }
                            results-->1 = params_wanted;
                            results-->0 = line_address->7;
                            if (parameters > 0 && results-->2 >= 2) {
                                ResetVagueWords(results-->2);
                            }
                            oops_from = 0;
                            if (notholding ~= 0 && actor == player) {
                                notheld_mode = 1;
                                i = 0;
                              .label44433;
                                if (i < 8) {
                                    array_24916-->i = results-->i;
                                    ++i;
                                    jump label44433;
                                }
                                results-->0 = 19[rod_of_stalking?];
                                results-->1 = 1[?];
                                results-->2 = notholding;
                                print "(first taking ";
                                Defart(notholding);
                                print ")^";
                            }
                            if (held_back_mode == 1) {
                                wn = hb_wn;
                                jump label45430;
                            }
                            rtrue;
                        }
                        if (token == 6 && action_to_be == ##Answer or ##Ask or ##AskFor or ##Tell) {
                            scope_reason = TALKING_REASON;
                        }
                        l = ParseObjectList(results,token);
                        scope_reason = PARSING_REASON;
                        if (parser_trace >= 3) {
                            print "  [Parse object list replied with";
                            if (l == 10000[?]) {
                                print " re-parse request]^";
                            }
                            if (l == 0) {
                                print " token failed, error type ", etype, "]^";
                            }
                            if (l == 1[?]) {
                                print " token accepted]^";
                            }
                        }
                        if (l == 10000[?]) {
                            jump label42195;
                        }
                        if (l == 0) {
                            jump label44659;
                        }
                    }
                    ++pcount;
                    jump label43635;
                }
              .label44659;
                if (etype > pcount2) {
                    pcount2 = etype;
                }
                if (take_all_rule == 2 && etype == NOTHING_PE) {
                    ! no code
                } else {
                    ++line;
                    jump label43155;
                }
            }
        }
    }
  .label44685;
    etype = pcount2;
    if (actor ~= player) {
        if (usual_grammar_after > 0) {
            verb_wordnum = usual_grammar_after;
            jump label42337;
        }
        wn = verb_wordnum;
        special_word = NextWord();
        if (special_word == 41628) {
            special_word = NextWord();
            ++verb_wordnum;
        }
        special_number = TryNumber(verb_wordnum);
        results-->0 = 264[aft_obj?];
        results-->1 = 2[?];
        results-->2 = 1[?];
        special_number1 = special_word;
        results-->3 = actor;
        consult_from = verb_wordnum;
        consult_words = num_words - consult_from + 1;
        rtrue;
    }
    if (Stub2(etype) ~= 0) {
        jump label42187;
    }
    if (etype == STUCK_PE) {
        print "I didn't understand that sentence.^";
        oops_from = 1;
    }
    if (etype == UPTO_PE) {
        print "I only understood you as far as wanting to ";
        m = 0;
      .label44846;
        if (m < 8) {
            array_24618-->m = array_24634-->m;
            ++m;
            jump label44846;
        }
        pcount = pcount2;
        PrintCommand(0,1[?]);
        print ".^";
    }
    if (etype == NUMBER_PE) {
        print "I didn't understand that number.^";
    }
    if (etype == CANTSEE_PE) {
        print "You can't see any such thing.^";
        oops_from = saved_oops;
    }
    if (etype == TOOLIT_PE) {
        print "You seem to have said too little!^";
    }
    if (etype == NOTHELD_PE) {
        print "You aren't holding that!^";
        oops_from = saved_oops;
    }
    if (etype == MULTI_PE) {
        print "You can't use multiple objects with that verb.^";
    }
    if (etype == MMULTI_PE) {
        print "You can only use multiple objects once on a line.^";
    }
    if (etype == VAGUE_PE) {
        print "I'm not sure what ~", (address) vague_word, "~ refers to.^";
    }
    if (etype == EXCEPT_PE) {
        print "You excepted something not included anyway!^";
    }
    if (etype == ANIMA_PE) {
        print "You can only do that to something animate.^";
    }
    if (etype == VERB_PE) {
        print "That's not a verb I recognise.^";
    }
    if (etype == SCENERY_PE) {
        print "That's not something you need to refer to in the course of this game.^";
    }
    if (etype == ITGONE_PE) {
        print "You can't see ~", (address) vague_word, "~ (";
        Defart(vague_obj);
        print ") at the moment.^";
    }
    if (etype == JUNKAFTER_PE) {
        print "I didn't understand the way that finished.^";
    }
    if (etype == TOOFEW_PE) {
        if (multihad == 0) {
            print "None";
        } else {
            print "Only ";
            EnglishNumber(multihad);
        }
        print " of those ";
        if (multihad == 1) {
            print "is";
        } else {
            print "are";
        }
        print " available.^";
    }
    if (etype == NOTHING_PE) {
        if (multi_wanted == 100) {
            print "Nothing to do!^";
        } else {
            print "There are none at all available!^";
        }
    }
    if (etype == ASKSCOPE_PE) {
        scope_stage = 3;
        generic_globvar = scope_error();
    }
    jump label42187;
  .label45430;
    if (wn > num_words) {
        rtrue;
    }
    i = NextWord();
    if (i == 40296['then'?] or 41628['xcomma'?]) {
        if (wn > num_words) {
            array_24488->1 = array_24488->1 - 1;
            held_back_mode = 0;
            rtrue;
        }
        if (actor == player) {
            j = 0;
        } else {
            j = verb_wordnum - 1;
        }
        last_command_from = j + 1;
        last_command_to = wn - 2;
        i = NextWord();
        if (i == 29712['again'?] or 33528['g//'?]) {
            i = 0;
          .label45518;
            if (i < j) {
                array_24488-->(2 * i + 1) = parse-->(2 * i + 1);
                array_24488-->(2 * i + 2) = parse-->(2 * i + 2);
                ++i;
                jump label45518;
            }
            i = last_command_from;
          .label45587;
            if (i <= last_command_to) {
                array_24488-->(2 + 2 * j) = parse-->(2 * i);
                array_24488-->(1 + 2 * j) = parse-->(2 * i - 1);
                ++i;
                ++j;
                jump label45587;
            }
            i = wn;
          .label45654;
            if (i <= num_words) {
                array_24488-->(2 + 2 * j) = parse-->(2 * i);
                array_24488-->(1 + 2 * j) = parse-->(2 * i - 1);
                ++i;
                ++j;
                jump label45654;
            }
            array_24488->1 = j;
            held_back_mode = 1;
            rtrue;
        } else {
            --wn;
        }
        i = 0;
      .label45736;
        if (i < j) {
            array_24488-->(2 * i + 1) = parse-->(2 * i + 1);
            array_24488-->(2 * i + 2) = parse-->(2 * i + 2);
            ++i;
            jump label45736;
        }
        i = wn;
      .label45805;
        if (i <= num_words) {
            array_24488-->(2 + 2 * j) = parse-->(2 * i);
            array_24488-->(1 + 2 * j) = parse-->(2 * i - 1);
            ++i;
            ++j;
            jump label45805;
        }
        array_24488->1 = j;
        held_back_mode = 1;
        rtrue;
    }
    pcount2 = 2[?];
    jump label44685;
];

[ NumberWord w ;	! 45888 / 0xb340
    if (w == 'one') {
        return 1;
    }
    if (w == 'two') {
        return 2;
    }
    if (w == 'three') {
        return 3;
    }
    if (w == 'four') {
        return 4;
    }
    if (w == 'five') {
        return 5;
    }
    if (w == 'six') {
        return 6;
    }
    if (w == 'seven') {
        return 7;
    }
    if (w == 'eight') {
        return 8;
    }
    if (w == 'nine') {
        return 9;
    }
    if (w == 'ten') {
        return 10;
    }
    if (w == 'eleven') {
        return 11;
    }
    if (w == 'twelve') {
        return 12;
    }
    if (w == 'thirteen') {
        return 13;
    }
    if (w == 'fourteen') {
        return 14;
    }
    if (w == 'fifteen') {
        return 15;
    }
    if (w == 'sixteen') {
        return 16;
    }
    if (w == 'seventeen') {
        return 17;
    }
    if (w == 'eighteen') {
        return 18;
    }
    if (w == 'nineteen') {
        return 19;
    }
    if (w == 'twenty') {
        return 20;
    }
    return 0;
];

[ Descriptors context o flag n ;	! 46072 / 0xb3f8
    indef_mode = 0;
    indef_type = 0;
    indef_wanted = 0;
    indef_guess_p = 0;
    flag = 1;
  .label46088;
    if (flag == 1) {
        o = NextWord();
        flag = 0;
        if (o == 'the') {
            flag = 1;
        }
        if (o == 'a//' or 'an' or 'any' or 'either' or 'anything') {
            indef_mode = 1[?];
            flag = 1;
        }
        if (o == 'another' or 'other') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 1;
        }
        if (o == 'my' or 'this' or 'these') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 2;
        }
        if (o == 'that' or 'those') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 4;
        }
        if (o == 'its') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 16;
        }
        if (o == 'his' or 'your') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 32;
        }
        if (o == 'lit' or 'lighted') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 64;
        }
        if (o == 'unlit') {
            indef_mode = 1[?];
            flag = 1;
            indef_type = indef_type | 128;
        }
        if (o == 'all' or 'each' or 'every' or 'everything') {
            indef_mode = 1[?];
            flag = 1;
            indef_wanted = 100;
            if (take_all_rule == 1) {
                take_all_rule = 2;
            }
            indef_type = indef_type | 8;
        }
        if (allow_plurals == 1) {
            n = NumberWord(o);
            if (n > 1) {
                indef_guess_p = 1[?];
                indef_mode = 1[?];
                flag = 1;
                indef_wanted = n;
                indef_type = indef_type | 8;
            }
        }
        if (flag == 1 && NextWord() ~= 'of') {
            --wn;
        }
        jump label46088;
    }
    --wn;
    if (indef_wanted > 0 && (context < 2 || context > 5)) {
        return 7[se_obj?];
    }
    return 0;
];

[ CreatureTest obj ;	! 46380 / 0xb52c
    if (obj has animate) {
        rtrue;
    }
    if (obj hasnt talkable) {
        rfalse;
    }
    if (action_to_be == ##Ask or ##Answer or ##Tell or ##AskFor) {
        rtrue;
    }
    rfalse;
];

[ ParseObjectList results token l o i j k and_parity single_object desc_wn many_flag ;	! 46408 / 0xb548
    many_flag = 0;
    and_parity = 1;
    dont_infer = 0;
  .label46418;
    if (parser_trace >= 3) {
        print "  [Object list from word ", wn, "]^";
    }
    o = NextWord();
    --wn;
    if (o == 'it' or 'them') {
        vague_word = o;
        vague_obj = itobj;
        if (itobj == nothing) {
            etype = VAGUE_PE;
            return 0;
        }
    }
    if (o == 'him') {
        vague_word = o;
        vague_obj = himobj;
        if (himobj == nothing) {
            etype = VAGUE_PE;
            return 0;
        }
    }
    if (o == 'her') {
        vague_word = o;
        vague_obj = herobj;
        if (herobj == nothing) {
            etype = VAGUE_PE;
            return 0;
        }
    }
    if (o == 'me' or 'myself' or 'self') {
        vague_word = o;
        vague_obj = player;
    }
    if (token == 7) {
        l = TryNumber(wn);
        if (l ~= 64536[?]) {
            if (nsns == 0) {
                special_number1 = l;
            } else {
                special_number2 = l;
            }
            special_number = l;
            ++nsns;
            if (parser_trace >= 3) {
                print "  [Read special as the number ", l, "]^";
            }
        }
        if (parser_trace >= 3) {
            print "  [Read special word at word number ", wn, "]^";
        }
        special_word = NextWord();
        single_object = 1[?];
    } else if (token == 8) {
        l = TryNumber(wn++);
        if (l == 64536[?]) {
            etype = NUMBER_PE;
            rfalse;
        }
        if (parser_trace >= 3) {
            print "  [Read number as ", l, "]^";
        }
        if (nsns++ == 0) {
            special_number1 = l;
        } else {
            special_number2 = l;
        }
        single_object = 1[?];
    } else if (token >= 48 && token < 80) {
        l = (preactions_table-->(token - 48))();
        if (parser_trace >= 3) {
            print "  [Outside parsing routine returned ", l, "]^";
        }
        if (l < 0) {
            rfalse;
        }
        if (l == 0) {
            --params_wanted;
            rtrue;
        }
        if (l == 1[?]) {
            if (nsns == 0) {
                special_number1 = parsed_number;
            } else {
                special_number2 = parsed_number;
            }
            ++nsns;
        }
        if (l == 10000[?]) {
            return l;
        }
        single_object = l;
    } else {
        if (token >= 80 && token < 128) {
            scope_token = preactions_table-->(token - 80);
            scope_stage = 1;
            l = scope_token();
            if (parser_trace >= 3) {
                print "  [Scope routine returned multiple-flag of ", l, "]^";
            }
            if (l == 1[?]) {
                token = 2;
            } else {
                token = 0;
            }
        }
        token_was = 0;
        if (token >= 16) {
            token_was = token;
            token = 0;
        }
        allow_plurals = 1;
        desc_wn = wn;
      .label46968;
        l = Descriptors(token);
        if (l ~= 0) {
            etype = l;
            return 0;
        }
        oops_from = wn;
        if (token ~= 1) {
            i = multiple_object-->0;
            if (parser_trace >= 3) {
                print "  [Calling NounDomain on location and actor]^";
            }
            l = NounDomain(actor_location,actor,token);
            if (l == 10000[?]) {
                return l;
            }
            if (l == 0) {
                etype = CantSee();
                jump label47741;
            }
            if (parser_trace >= 3) {
                if (l > 1) {
                    print "  [ND returned ";
                    Defart(l);
                    print "]^";
                } else {
                    print "  [ND appended to the multiple object list:^";
                    k = multiple_object-->0;
                    j = i + 1;
                  .label47148;
                    if (j <= k) {
                        print "  Entry ", j, ": ";
                        CDefart(multiple_object-->j);
                        print " (", multiple_object-->j, ")^";
                        ++j;
                        jump label47148;
                    }
                    print "  List now has size ", k, "]^";
                }
            }
            if (l == 1[?]) {
                if (many_flag == 0) {
                    many_flag = 1[?];
                } else {
                    k = multiple_object-->0;
                    multiple_object-->0 = i;
                    j = i + 1;
                  .label47254;
                    if (j <= k) {
                        if (and_parity == 1) {
                            MultiAdd(multiple_object-->j);
                        } else {
                            MultiSub(multiple_object-->j);
                        }
                        ++j;
                        jump label47254;
                    }
                    if (parser_trace >= 3) {
                        print "  [Merging ", k - i, " new objects to the ", i, " old ones]^";
                    }
                }
            } else {
                if (token == 6 && CreatureTest(l) == 0) {
                    etype = ANIMA_PE;
                    jump label47741;
                }
                if (many_flag == 0) {
                    single_object = l;
                } else {
                    if (and_parity == 1) {
                        MultiAdd(l);
                    } else {
                        MultiSub(l);
                    }
                    if (parser_trace >= 3) {
                        print "  [Combining ";
                        Defart(l);
                        print " with list]^";
                    }
                }
            }
        }
        if (token == 1) {
            l = NounDomain(actor,actor_location,token);
            if (l == 10000[?]) {
                return l;
            }
            if (l == 0) {
                etype = CantSee();
                return l;
            }
            o = parent(l);
            if (o ~= actor) {
                if (notheld_mode == 1) {
                    saved_oops = oops_from;
                    etype = NOTHELD_PE;
                    jump label47741;
                }
                notholding = l;
                if (parser_trace >= 3) {
                    print "  [Allowing object ";
                    Defart(l);
                    print " for now]^";
                }
            }
            single_object = l;
        }
        wn = oops_from + match_length;
        o = NextWord();
        if (o == 'and' or 'but' or 'except' or 'xcomma') {
            if (parser_trace >= 3) {
                print "  [Read '", (address) o, "']^";
            }
            if (token < 2 || token >= 6) {
                etype = MULTI_PE;
                jump label47741;
            }
            if (o == 'but' or 'except') {
                and_parity = 1 - and_parity;
            }
            if (many_flag == 0) {
                multiple_object-->0 = 1[?];
                multiple_object-->1 = single_object;
                many_flag = 1[?];
                if (parser_trace >= 3) {
                    print "  [Making new list from ";
                    Defart(single_object);
                    print "]^";
                }
            }
            dont_infer = 1;
            interfrom = 0;
            jump label46418;
        }
        --wn;
    }
    if (many_flag == 1[?]) {
        single_object = 0;
        multi_context = token;
    } else if (indef_mode == 1[?] && indef_type & 8 ~= 0 && (indef_wanted < 100 && indef_wanted > 1)) {
        multihad = 1;
        multi_wanted = indef_wanted;
        etype = TOOFEW_PE;
        jump label47741;
    }
    results-->(parameters + 2) = single_object;
    ++parameters;
    array_24618-->pcount = single_object;
    return 1[?];
  .label47741;
    if (allow_plurals == 1 && indef_guess_p == 1[?]) {
        allow_plurals = 0;
        wn = desc_wn;
        jump label46968;
    }
    return 0;
];

[ NounDomain domain1 domain2 context first_word i j k l oldw answer_words marker ;	! 47764 / 0xba94
    if (parser_trace >= 4) {
        print "   [NounDomain called at word ", wn, "^";
    }
    match_length = 0;
    number_matched = 0;
    match_from = wn;
    placed_in_flag = 0;
    SearchScope(domain1,domain2,context);
    if (parser_trace >= 4) {
        print "   [ND made ", number_matched, " matches]^";
    }
    wn = match_from + match_length;
    if (number_matched == 0) {
        ++wn;
        rfalse;
    }
    if (match_from <= num_words) {
        if (number_matched == 1[?]) {
            i = match_list-->0;
            return i;
        }
        if (wn <= num_words) {
            i = NextWord();
            --wn;
            if (i ~= 29874['and'?] or 41628['xcomma'?] or 40296['then'?] or 30927['but'?] or 32916['except'?]) {
                if (lookahead == 8) {
                    rfalse;
                }
                if (lookahead > 8) {
                    if (lookahead ~= AdjectiveWord()) {
                        --wn;
                        if (parser_trace >= 3) {
                            print "   [ND failed at lookahead at word ", wn, "]^";
                        }
                        rfalse;
                    }
                    --wn;
                }
            }
        }
    }
    number_of_classes = 0;
    if (number_matched == 1[?]) {
        i = match_list-->0;
    }
    if (number_matched > 1) {
        i = Adjudicate(context);
        if (i == 65535[?]) {
            rfalse;
        }
        if (i == 1[?]) {
            rtrue;
        }
    }
    if (i ~= 0) {
        if (dont_infer == 1) {
            return i;
        }
        if (interfrom == 0) {
            interfrom = pcount;
        }
        array_24618-->pcount = i;
        return i;
    }
    if (match_from > num_words) {
        ! no code
    } else {
        if (context == 6[ne_obj?]) {
            print "Who";
        } else {
            print "Which";
        }
        print " do you mean, ";
        j = number_of_classes;
        marker = 0;
        i = 1[?];
      .label48087;
        if (i <= number_of_classes) {
          .label48092;
            if (array_24788-->marker ~= i && array_24788-->marker ~= 0 - i) {
                ++marker;
                jump label48092;
            }
            k = match_list-->marker;
            if (array_24788-->marker > 0) {
                Defart(k);
            } else {
                Indefart(k);
            }
            if (i < j - 1) {
                print ", ";
            }
            if (i == j - 1) {
                print " or ";
            }
            ++i;
            jump label48087;
        }
        print "?^";
      .label48189;
        answer_words = Keyboard(24367[?],24488[?]);
        first_word = array_24488-->1;
        if (first_word == 29793['all'?] or 30747['both'?] or 32898['everything'?] or 32889['every'?] or 32601['each'?]) {
            if (context >= 2 && context <= 5) {
                l = multiple_object-->0;
                i = 0;
              .label48243;
                if (i < number_matched && l + i < 63) {
                    k = match_list-->i;
                    multiple_object-->(i + 1 + l) = k;
                    ++i;
                    jump label48243;
                }
                multiple_object-->0 = i + l;
                rtrue;
            }
            print "Sorry, you can only have one item here. Which one exactly?^";
            jump label48189;
        }
        j = first_word->6;
        if (0 ~= j & 1) {
            Copy(24021[?],24367[?]);
            Copy(24142[?],24488[?]);
            return 10000[?];
        }
        oldw = parse->1;
        parse->1 = answer_words + oldw;
        k = oldw + answer_words;
      .label48387;
        if (k > match_from) {
            MoveWord(k,24142[?],k - answer_words);
            --k;
            jump label48387;
        }
        k = 1[?];
      .label48412;
        if (k <= answer_words) {
            MoveWord(match_from + k - 1,24488[?],k);
            ++k;
            jump label48412;
        }
        return 10000[?];
    }
    if (context == 6[ne_obj?]) {
        print "Whom";
    } else {
        print "What";
    }
    print " do you want";
    if (actor ~= player) {
        print " ";
        Defart(actor);
    }
    print " to ";
    PrintCommand(0,1[?]);
    print "?^";
    answer_words = Keyboard(24367[?],24488[?]);
    first_word = array_24488-->1;
    j = first_word->6;
    if (0 ~= j & 1) {
        Copy(24021[?],24367[?]);
        Copy(24142[?],24488[?]);
        return 10000[?];
    }
    oldw = parse->1;
    if (interfrom == 0) {
        k = 1[?];
      .label48556;
        if (k <= answer_words) {
            MoveWord(oldw + k,24488[?],k);
            ++k;
            jump label48556;
        }
    } else {
        j = pcount - interfrom;
        k = 1[?];
      .label48588;
        if (k <= answer_words) {
            MoveWord(oldw + k + j,24488[?],k);
            ++k;
            jump label48588;
        }
        j = interfrom;
      .label48617;
        if (j < pcount) {
            if (array_24618-->j >= 2 && array_24618-->j < 10000) {
                array_24488-->1 = 34860['it'?];
                itobj = array_24618-->j;
            } else {
                array_24488-->1 = AdjectiveAddress(array_24618-->j - 10000);
            }
            MoveWord(oldw + 1 + j - interfrom,24488[?],1[?]);
            ++answer_words;
            ++j;
            jump label48617;
        }
    }
    parse->1 = answer_words + oldw;
    return 10000[?];
];

[ Adjudicate context i j k good_ones last n ultimate flag offset ;	! 48728 / 0xbe58
    if (parser_trace >= 4) {
        print "   [Adjudicating match list of size ", number_matched, "^";
    }
    j = number_matched - 1;
    good_ones = 0;
    last = match_list-->0;
    i = 0;
  .label48783;
    if (i <= j) {
        n = match_list-->i;
        if (n hasnt concealed) {
            ultimate = n;
          .label48802;
            ultimate = parent(ultimate);
            if (ultimate ~= actor_location or actor or nothing) jump label48802;
            if (context == 0 && ultimate == actor_location && (token_was == 0 || UserFilter(n) == 1[?])) {
                ++good_ones;
                last = n;
            }
            if (context == 1[?] && parent(n) == actor) {
                ++good_ones;
                last = n;
            }
            if (context == 2[?] && ultimate == actor_location) {
                ++good_ones;
                last = n;
            }
            if (context == 3[s_obj?] && parent(n) == actor) {
                ++good_ones;
                last = n;
            }
            if (context == 4[e_obj?] or 5[w_obj?]) {
                if (advance_warning == 65535) {
                    if (parent(n) == actor) {
                        ++good_ones;
                        last = n;
                    }
                } else {
                    if (context == 4[e_obj?] && parent(n) == actor && n ~= advance_warning) {
                        ++good_ones;
                        last = n;
                    }
                    if (context == 5[w_obj?] && parent(n) == actor && n in advance_warning) {
                        ++good_ones;
                        last = n;
                    }
                }
            }
            if (context == 6[ne_obj?] && CreatureTest(n) == 1[?]) {
                ++good_ones;
                last = n;
            }
        }
        ++i;
        jump label48783;
    }
    if (good_ones == 1[?]) {
        return last;
    }
    if (context == 6[ne_obj?] && good_ones == 0) {
        return match_list-->0;
    }
    if (indef_mode == 1[?] && indef_type & 8 ~= 0) {
        if (context < 2 || context > 5) {
            etype = MULTI_PE;
            return 65535[?];
        }
        i = 0;
        number_of_classes = 1;
        offset = multiple_object-->0;
        j = BestGuess();
      .label49068;
        if (j ~= 65535[?] && i < indef_wanted && i + offset < 63) {
            flag = 0;
            if (j hasnt concealed && j hasnt worn) {
                flag = 1[?];
            }
            if (context == 3[s_obj?] or 4[e_obj?] && parent(j) ~= actor) {
                flag = 0;
            }
            k = routine175160(j,flag);
            if (k == 1[?]) {
                flag = 1[?];
            } else if (k == 2[?]) {
                flag = 0;
            }
            if (flag == 1[?]) {
                ++i;
                multiple_object-->(i + offset) = j;
                if (parser_trace >= 4) {
                    print "   Accepting it^";
                }
            } else if (parser_trace >= 4) {
                print "   Rejecting it^";
            }
            j = BestGuess();
            jump label49068;
        }
        if (i < indef_wanted && indef_wanted < 100) {
            etype = TOOFEW_PE;
            multi_wanted = indef_wanted;
            multihad = multiple_object-->0;
            return 65535[?];
        }
        multiple_object-->0 = i + offset;
        multi_context = context;
        if (parser_trace >= 4) {
            print "   Made multiple object of size ", i, "]^";
        }
        return 1[?];
    }
    i = 0;
  .label49291;
    if (i < number_matched) {
        array_24788-->i = 0;
        ++i;
        jump label49291;
    }
    n = 1[?];
    i = 0;
  .label49313;
    if (i < number_matched) {
        if (array_24788-->i == 0) {
            array_24788-->i = n++;
            flag = 0;
            j = i + 1;
          .label49347;
            if (j < number_matched) {
                if (array_24788-->j == 0 && Identical(match_list-->i,match_list-->j) == 1[?]) {
                    flag = 1[?];
                    array_24788-->j = array_24788-->i;
                }
                ++j;
                jump label49347;
            }
            if (flag == 1[?]) {
                array_24788-->i = 1 - n;
            }
        }
        ++i;
        jump label49313;
    }
    --n;
    if (parser_trace >= 4) {
        print "   Difficult adjudication with ", n, " equivalence classes:^";
        i = 0;
      .label49478;
        if (i < number_matched) {
            print "   ";
            CDefart(match_list-->i);
            print " (", match_list-->i, ")  ---  ", array_24788-->i, "^";
            ++i;
            jump label49478;
        }
    }
    number_of_classes = n;
    if (n > 1 && indef_mode == 0) {
        j = 0;
        good_ones = 0;
        i = 0;
      .label49557;
        if (i < number_matched) {
            k = routine175160(match_list-->i,2[?]);
            if (k == j) {
                ++good_ones;
            }
            if (k > j) {
                j = k;
                good_ones = 1[?];
                last = match_list-->i;
            }
            ++i;
            jump label49557;
        }
        if (good_ones == 1[?]) {
            if (parser_trace >= 4) {
                print "   ChooseObjects picked a best.]^";
            }
            return last;
        }
        if (parser_trace >= 4) {
            print "   Unable to decide: it's a draw.]^";
        }
        return 0;
    }
    if (indef_mode == 0) {
        indef_type = 0;
    }
    if (n == 1[?]) {
        dont_infer = 1;
    }
    return BestGuess();
];

[ ReviseMulti second_p i low ;	! 49704 / 0xc228
    if (parser_trace >= 4) {
        print "   Revising multiple object list of size ", multiple_object-->0, " with 2nd ", (name) second_p, "^";
    }
    if (multi_context == 4 or 5) {
        i = 1[?];
        low = 0;
      .label49771;
        if (i <= multiple_object-->0) {
            if (multi_context == 4 && multiple_object-->i ~= second_p || (multi_context == 5 && multiple_object-->i in second_p)) {
                ++low;
                multiple_object-->low = multiple_object-->i;
            }
            ++i;
            jump label49771;
        }
        multiple_object-->0 = low;
    }
    if (multi_context == 2) {
        i = 1[?];
        low = 0;
      .label49850;
        if (i <= multiple_object-->0) {
            if (parent(multiple_object-->i) == parent(actor)) {
                ++low;
            }
            ++i;
            jump label49850;
        }
        if (parser_trace >= 4) {
            print "   Token 2 plural case: number with actor ", low, "^";
        }
        if (take_all_rule == 2 || low > 0) {
            i = 1[?];
            low = 0;
          .label49943;
            if (i <= multiple_object-->0) {
                if (parent(multiple_object-->i) == parent(actor)) {
                    ++low;
                    multiple_object-->low = multiple_object-->i;
                }
                ++i;
                jump label49943;
            }
            multiple_object-->0 = low;
        }
    }
    i = multiple_object-->0;
    if (parser_trace >= 4) {
        print "   Done: new size ", i, "^";
    }
    if (i == 0) {
        return 17[rod_of_fire?];
    }
    return 0;
];

[ ScoreMatchL its_owner its_score obj i threshold a_s l_s ;	! 50040 / 0xc378
    if (indef_type & 1 ~= 0) {
        threshold = 40[four_leafed_clover?];
    }
    if (indef_type & 2 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 4 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 16 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 32 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 64 ~= 0) {
        threshold = threshold + 40;
    }
    if (indef_type & 128 ~= 0) {
        threshold = threshold + 40;
    }
    if (parser_trace >= 4) {
        print "   Scoring match list with type ", indef_type, ", threshold ", threshold, ":^";
    }
    a_s = 30[rod_of_love?];
    l_s = 20[rod_of_infinity?];
    if (action_to_be == ##Take or ##Remove) {
        a_s = 20[rod_of_infinity?];
        l_s = 30[rod_of_love?];
    }
    i = 0;
  .label50199;
    if (i < number_matched) {
        obj = match_list-->i;
        its_owner = parent(obj);
        its_score = 0;
        if (its_owner == actor) {
            its_score = a_s;
        }
        if (its_owner == actor_location) {
            its_score = l_s;
        }
        if (its_score == 0 && its_owner ~= 1[?]) {
            its_score = 10[u_obj?];
        }
        if (indef_type & 1 ~= 0 && obj ~= itobj or himobj or herobj) {
            its_score = its_score + 40;
        }
        if (indef_type & 2 ~= 0 && its_owner == actor) {
            its_score = its_score + 40;
        }
        if (indef_type & 4 ~= 0 && its_owner == actor_location) {
            its_score = its_score + 40;
        }
        if (indef_type & 64 ~= 0 && obj has light) {
            its_score = its_score + 40;
        }
        if (indef_type & 128 ~= 0 && obj hasnt light) {
            its_score = its_score + 40;
        }
        if (indef_type & 16 ~= 0 && its_owner == itobj) {
            its_score = its_score + 40;
        }
        if (indef_type & 32 ~= 0 && its_owner has animate && GetGender(its_owner) == 1[?]) {
            its_score = its_score + 40;
        }
        its_score = its_score + routine175160(obj,2[?]);
        if (its_score < threshold) {
            match_list-->i = 65535[?];
        } else {
            array_24788-->i = its_score;
            if (parser_trace >= 4) {
                print "   ";
                CDefart(match_list-->i);
                print " (", match_list-->i, ") in ";
                Defart(its_owner);
                print " scores ", its_score, "^";
            }
        }
        ++i;
        jump label50199;
    }
    number_of_classes = 2;
    rtrue;
];

[ BestGuess earliest its_score best i ;	! 50480 / 0xc530
    if (number_of_classes ~= 1) {
        ScoreMatchL();
    }
    earliest = 0;
    best = 65535[?];
    i = 0;
  .label50500;
    if (i < number_matched) {
        if (match_list-->i >= 0) {
            its_score = array_24788-->i;
            if (its_score > best) {
                best = its_score;
                earliest = i;
            }
        }
        ++i;
        jump label50500;
    }
    if (parser_trace >= 4) {
        if (best < 0) {
            print "   Best guess ran out of choices^";
        } else {
            print "   Best guess ";
            Defart(match_list-->earliest);
            print " (", match_list-->earliest, ")^";
        }
    }
    if (best < 0) {
        return 65535[?];
    }
    i = match_list-->earliest;
    match_list-->earliest = 65535[?];
    return i;
];

[ Identical o1 o2 p1 p2 n1 n2 i j flag ;	! 50640 / 0xc5d0
    if (o1 == o2) {
        rtrue;
    }
    if (o1 == 0 || o2 == 0) {
        rfalse;
    }
    if (parent(o1) == Compass || parent(o2) == Compass) {
        rfalse;
    }
    if (o1.parse_name ~= nothing || o2.parse_name ~= nothing) {
        if (o1.parse_name ~= o2.parse_name) {
            rfalse;
        }
        parser_action = ##TheSame;
        parser_one = o1;
        parser_two = o2;
        j = wn;
        i = RunRoutines(o1,parse_name);
        wn = j;
        if (i == 65535) {
            rtrue;
        }
        if (i == 65534) {
            rfalse;
        }
    }
    p1 = o1.&name;
    generic_globvar = o1.&name;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    n1 = generic_globvar / 2;
    p2 = o2.&name;
    generic_globvar = o2.&name;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    n2 = generic_globvar / 2;
    i = 0;
  .label50798;
    if (i < n1) {
        flag = 0;
        j = 0;
      .label50809;
        if (j < n2) {
            if (p1-->i == p2-->j) {
                flag = 1[?];
            }
            ++j;
            jump label50809;
        }
        if (flag == 0) {
            rfalse;
        }
        ++i;
        jump label50798;
    }
    j = 0;
  .label50849;
    if (j < n2) {
        flag = 0;
        i = 0;
      .label50860;
        if (i < n1) {
            if (p1-->i == p2-->j) {
                flag = 1[?];
            }
            ++i;
            jump label50860;
        }
        if (flag == 0) {
            rfalse;
        }
        ++j;
        jump label50849;
    }
    rtrue;
];

[ PrintCommand from emptyf i j k f ;	! 50900 / 0xc6d4
    if (from == 0) {
        i = verb_word;
        from = 1[?];
        f = 1[?];
        if (i == 35076['l//'?]) {
            print "look";
        } else if (i == 41709['z//'?]) {
            print "wait";
        } else if (i == 41619['x//'?]) {
            print "examine";
        } else if (i == 34626['i//'?] or 34797['inv'?]) {
            print "inventory";
        } else if (Stub3(i) == 0) {
            print (address) i;
        }
    }
    j = pcount - emptyf;
    k = from;
  .label51001;
    if (k <= j) {
        if (f == 1[?]) {
            print ' ';
        }
        i = array_24618-->k;
        if (i == 0) {
            print "those things";
        } else if (i == 1[?]) {
            print "that";
        } else if (i >= 10000) {
            i = AdjectiveAddress(i - 10000);
            print (address) i;
        } else {
            Defart(i);
        }
        f = 1[?];
        ++k;
        jump label51001;
    }
    rtrue;
];

[ CantSee i w e ;	! 51088 / 0xc790
    saved_oops = oops_from;
    if (scope_token ~= 0) {
        scope_error = scope_token;
        return ASKSCOPE_PE;
    }
    --wn;
    w = NextWord();
    e = CANTSEE_PE;
    if (w == vague_word) {
        e = ITGONE_PE;
    }
    i = parent(actor);
    if (i has visited && Refers(i,w) == 1[?]) {
        e = SCENERY_PE;
    }
    if (etype > e) {
        return etype;
    }
    return e;
];

[ MultiAdd o i j ;	! 51152 / 0xc7d0
    i = multiple_object-->0;
    if (i == 63) {
        toomany_flag = 1;
        rtrue;
    }
    j = 1[?];
  .label51171;
    if (j <= i) {
        if (o == multiple_object-->j) {
            rtrue;
        }
        ++j;
        jump label51171;
    }
    ++i;
    multiple_object-->i = o;
    multiple_object-->0 = i;
    rtrue;
];

[ MultiSub o i j k et ;	! 51208 / 0xc808
    i = multiple_object-->0;
    et = 0;
    j = 1;
  .label51221;
    if (j <= i) {
        if (o == multiple_object-->j) {
            k = j;
          .label51240;
            if (k <= i) {
                multiple_object-->k = multiple_object-->(k + 1);
                ++k;
                jump label51240;
            }
            --i;
            multiple_object-->0 = i;
            return et;
        }
        ++j;
        jump label51221;
    }
    et = VAGUE_PE;
    return et;
];

[ MultiFilter attr i j o ;	! 51288 / 0xc858
  .label51289;
    i = multiple_object-->0;
    j = 1[?];
  .label51298;
    if (j <= i) {
        o = multiple_object-->j;
        if (o hasnt attr) {
            MultiSub(o);
            jump label51289;
        }
        ++j;
        jump label51298;
    }
    rtrue;
];

[ UserFilter obj ;	! 51328 / 0xc880
    if (token_was >= 128) {
        if (obj has token_was - 128) {
            rtrue;
        }
        rfalse;
    }
    noun = obj;
    return (preactions_table-->(token_was - 16))();
];

[ MoveWord at1 b2 at2 x y ;	! 51364 / 0xc8a4
    x = at1 * 2 - 1;
    y = at2 * 2 - 1;
    parse-->x++ = b2-->y++;
    parse-->x = b2-->y;
    rtrue;
];

[ SearchScope domain1 domain2 context i ;	! 51412 / 0xc8d4
    i = 0;
    if (scope_token ~= 0) {
        scope_stage = 2;
        if (scope_token() ~= 0) {
            rtrue;
        }
    }
    if (actor == domain1 or domain2 && Stub5(actor) ~= 0) {
        rtrue;
    }
    if (context == 5[w_obj?] && advance_warning ~= 65535) {
        if (IsSeeThrough(advance_warning) == 1[?]) {
            ScopeWithin(advance_warning,0,context);
        }
    } else {
        ScopeWithin(domain1,domain2,context);
        ScopeWithin(domain2,0,context);
    }
    rtrue;
];

[ IsSeeThrough o ;	! 51504 / 0xc930
    if (o has supporter || o has transparent || (o has container && o has open)) {
        rtrue;
    }
    rfalse;
];

[ PlaceInScope thing ;	! 51528 / 0xc948
    if (scope_reason ~= PARSING_REASON or TALKING_REASON) {
        DoScopeAction(thing);
        rtrue;
    }
    wn = match_from;
    TryGivenObject(thing);
    placed_in_flag = 1[?];
    rtrue;
];

[ DoScopeAction thing s p1 ;	! 51556 / 0xc964
    s = scope_reason;
    p1 = parser_one;
    if (parser_trace >= 5) {
        print "[DSA on ";
        Defart(thing);
        print " with reason = ", scope_reason, " p1 = ", parser_one, " p2 = ", parser_two, "]^";
    }
    generic_globvar = scope_reason;
    if (generic_globvar == 3[s_obj?]) {
        if (thing.ne_to == nothing or NULL) {
            rtrue;
        }
        if (parser_trace >= 2) {
            print "[Considering react_before for ";
            Defart(thing);
            print "]^";
        }
        if (parser_one == 0) {
            parser_one = RunRoutines(thing,ne_to);
        }
    } else if (generic_globvar == 4[e_obj?]) {
        if (thing.nw_to == nothing or NULL) {
            rtrue;
        }
        if (parser_trace >= 2) {
            print "[Considering react_after for ";
            Defart(thing);
            print "]^";
        }
        if (parser_one == 0) {
            parser_one = RunRoutines(thing,nw_to);
        }
    } else if (generic_globvar == 2[?]) {
        if (thing.&each_turn == 0) {
            rtrue;
        }
        if (parser_trace >= 2) {
            print "[Considering each_turn for ";
            Defart(thing);
            print "]^";
        }
        PrintOrRun(thing,each_turn);
    } else if (generic_globvar == 6[ne_obj?]) {
        if (thing == parser_one) {
            parser_two = 1[?];
        }
    } else if (generic_globvar == 5[w_obj?]) {
        generic_globvar = parser_one(thing);
        parser_one = p1;
    }
    scope_reason = s;
    rtrue;
];

[ ScopeWithin domain nosearch context ;	! 51864 / 0xca98
    if (domain == 0) {
        rtrue;
    }
    if (context == 4[e_obj?] && domain == advance_warning) {
        rtrue;
    }
    if (indef_mode == 0 && domain == actor_location && scope_reason == PARSING_REASON && context ~= 6[ne_obj?]) {
        ScopeWithin(1[?]);
    }
    domain = child(domain);
  .label51911;
    if (domain ~= 0) {
        ScopeWithin_O(domain,nosearch,context);
        domain = sibling(domain);
        jump label51911;
    }
    rtrue;
];

[ ScopeWithin_O domain nosearch context i ad n ;	! 51932 / 0xcadc
    if (scope_reason ~= PARSING_REASON or TALKING_REASON) {
        DoScopeAction(domain);
    } else if (match_from > num_words) {
        i = parser_trace;
        parser_trace = 0;
        if (i >= 5) {
            print "     Out of text: matching ";
            Defart(domain);
            new_line;
        }
        MakeMatch(domain,1[?]);
        parser_trace = i;
    } else {
        wn = match_from;
        i = NounWord();
        if (i == 1[?] && itobj == domain) {
            MakeMatch(itobj,1[?]);
        }
        if (i == 2[?] && himobj == domain) {
            MakeMatch(himobj,1[?]);
        }
        if (i == 3[s_obj?] && herobj == domain) {
            MakeMatch(herobj,1[?]);
        }
        if (i == 4[e_obj?] && player == domain) {
            MakeMatch(player,1[?]);
        }
        --wn;
        TryGivenObject(domain);
    }
    if (child(domain) ~= nothing && domain ~= nosearch && IsSeeThrough(domain) == 1[?]) {
        ScopeWithin(domain,0,context);
    }
    ad = domain.&se_to;
    if (ad ~= 0) {
        if (UnsignedCompare(ad-->0,top_object) > 0) {
            ats_flag = 2 + context;
            RunRoutines(domain,se_to);
            ats_flag = 0;
        } else {
            generic_globvar = domain.&se_to;
            if (generic_globvar) {
                generic_globvar = get_prop_len(generic_globvar);
            }
            n = generic_globvar;
            i = 0;
          .label52171;
            if (2 * i < n) {
                ScopeWithin_O(ad-->i,0,context);
                ++i;
                jump label52171;
            }
        }
    }
    rtrue;
];

[ AddToScope obj ;	! 52200 / 0xcbe8
    if (ats_flag >= 2) {
        ScopeWithin_O(obj,0,ats_flag - 2);
    }
    if (ats_flag == 1 && HasLightSource(obj) == true) {
        ats_hls = 1;
    }
    rtrue;
];

[ MakeMatch obj quality i ;	! 52240 / 0xcc10
    if (parser_trace >= 5) {
        print "    Match with quality ", quality, "^";
    }
    if (token_was ~= 0 && UserFilter(obj) == 0) {
        if (parser_trace >= 5) {
            print "    Match filtered out^";
        }
        rtrue;
    }
    if (quality < match_length) {
        rtrue;
    }
    if (quality > match_length) {
        match_length = quality;
        number_matched = 0;
    } else {
        if (2 * number_matched >= 128) {
            rtrue;
        }
        i = 0;
      .label52341;
        if (i < number_matched) {
            if (match_list-->i == obj) {
                rtrue;
            }
            ++i;
            jump label52341;
        }
    }
    match_list-->number_matched++ = obj;
    if (parser_trace >= 5) {
        print "    Match added to list^";
    }
    rtrue;
];

[ TryGivenObject obj threshold k w j ;	! 52400 / 0xccb0
    if (parser_trace >= 5) {
        print "    Trying ";
        Defart(obj);
        print " (", obj, ") at word ", wn, "^";
    }
    if (indef_mode ~= 0 && wn > parse->1) {
        MakeMatch(obj,0);
        rfalse;
    }
    if (obj.parse_name ~= nothing) {
        parser_action = ##-1;
        j = wn;
        k = RunRoutines(obj,parse_name);
        if (k > 0) {
            wn = j + k;
          .label52497;
            if (parser_action == ##PluralFound) {
                if (allow_plurals == 0) {
                    jump label52685;
                }
                if (indef_mode == 0) {
                    indef_mode = 1[?];
                    indef_type = 0;
                    indef_wanted = 0;
                }
                indef_type = indef_type | 8;
                if (indef_wanted == 0) {
                    indef_wanted = 100;
                }
            }
            MakeMatch(obj,k);
            rfalse;
        }
        if (k == 0) {
            jump label52685;
        }
    }
    w = NounWord();
    if (w == 1[?] && obj == itobj || (w == 2[?] && obj == himobj) || (w == 3[s_obj?] && obj == herobj) || (w == 4[e_obj?] && obj == player)) {
        MakeMatch(obj,1[?]);
        rfalse;
    }
    --wn;
    j = wn;
    threshold = NegativeOne(obj);
    if (threshold >= 0 && parser_trace >= 5) {
        print "    ParseNoun returned ", threshold, "^";
    }
    if (threshold < 0) {
        ++wn;
    }
    if (threshold > 0) {
        k = threshold;
        jump label52497;
    }
    if (threshold == 0 || Refers(obj,w) == 0) {
      .label52685;
        if (indef_mode ~= 0) {
            MakeMatch(obj,0);
        }
        rfalse;
    }
    if (threshold < 0) {
        threshold = 1[?];
      .label52705;
        if (0 ~= Refers(obj,NextWord())) {
            ++threshold;
            jump label52705;
        }
    }
    MakeMatch(obj,threshold);
    if (parser_trace >= 5) {
        print "    Matched^";
    }
    rtrue;
];

[ Refers obj wd k l m ;	! 52752 / 0xce10
    if (obj == nothing) {
        rfalse;
    }
    k = obj.&name;
    generic_globvar = obj.&name;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    l = generic_globvar / 2 - 1;
    m = 0;
  .label52790;
    if (m <= l) {
        if (wd == k-->m) {
            rtrue;
        }
        ++m;
        jump label52790;
    }
    rfalse;
];

[ NounWord i ;	! 52812 / 0xce4c
    i = NextWord();
    if (i == 'it' or 'them') {
        return 1;
    }
    if (i == 'him') {
        return 2;
    }
    if (i == 'her') {
        return 3;
    }
    if (i == 'me' or 'myself' or 'self') {
        return 4;
    }
    if (i == 0) {
        rfalse;
    }
    if (i->6 & 128 == 0) {
        rfalse;
    }
    return i;
];

[ AdjectiveWord i j ;	! 52884 / 0xce94
    j = NextWord();
    if (j == 0) {
        rfalse;
    }
    i = j->6;
    if (i & 8 == 0) {
        rfalse;
    }
    return j->8;
];

[ AdjectiveAddress number m ;	! 52916 / 0xceb4
    m = routine117916;
  .label52922;
    if (1[?] == 1[?]) {
        if (number == m-->1) {
            return m-->0;
        }
        m = m + 4;
        jump label52922;
    }
    m = routine117916;
    print "<Adjective not found>";
    return m;
];

[ NextWord i j k ;	! 52976 / 0xcef0
    if (wn > parse->1) {
        ++wn;
        rfalse;
    }
    i = wn * 2 - 1;
    ++wn;
    j = parse-->i;
    if (j == 0) {
        k = wn * 4 - 3;
        i = array_24021->(parse->k);
        if (i == ',') {
            j = 'xcomma';
        }
        if (i == '.') {
            j = 'then';
        }
    }
    return j;
];

[ NextWordStopped ;	! 53056 / 0xcf40
    if (wn > parse->1) {
        ++wn;
        return 65535[?];
    }
    return NextWord();
];

[ WordAddress wordnum ;	! 53080 / 0xcf58
    return 24021 + parse->(wordnum * 4 + 1);
];

[ WordLength wordnum ;	! 53104 / 0xcf70
    return parse->(wordnum * 4);
];

[ TryNumber wordnum i j c num len mul tot d digit ;	! 53120 / 0xcf80
    i = wn;
    wn = wordnum;
    j = NextWord();
    wn = i;
    j = NumberWord(j);
    if (j >= 1) {
        return j;
    }
    i = wordnum * 4 + 1;
    j = parse->i;
    num = j + 24021;
    len = parse->(i - 1);
    tot = Stub1(num,len);
    if (tot ~= 0) {
        return tot;
    }
    if (len >= 4) {
        mul = 1000[?];
    }
    if (len == 3[s_obj?]) {
        mul = 100[Tiny_Balcony?];
    }
    if (len == 2[?]) {
        mul = 10[u_obj?];
    }
    if (len == 1[?]) {
        mul = 1[?];
    }
    tot = 0;
    c = 0;
    len = len - 1;
    c = 0;
  .label53238;
    if (c <= len) {
        digit = num->c;
        if (digit == 48[furniture?]) {
            d = 0;
        } else if (digit == 49[scratched_cupboard?]) {
            d = 1[?];
        } else if (digit == 50[bird_whistle?]) {
            d = 2[?];
        } else if (digit == 51[gift_wrapped_parcel?]) {
            d = 3[s_obj?];
        } else if (digit == 52[box_of_chocolates?]) {
            d = 4[e_obj?];
        } else if (digit == 53[wrapping_paper?]) {
            d = 5[w_obj?];
        } else if (digit == 54[postcard_of_the_Champs_Elysees?]) {
            d = 6[ne_obj?];
        } else if (digit == 55[medicine_bottle?]) {
            d = 7[se_obj?];
        } else if (digit == 56[red_tablet?]) {
            d = 8[nw_obj?];
        } else if (digit == 57[Over_the_East_Wing?]) {
            d = 9[sw_obj?];
        } else {
            return 64536[?];
        }
        tot = tot + mul * d;
        mul = mul / 10;
        ++c;
        jump label53238;
    }
    if (len > 3) {
        tot = 10000[?];
    }
    return tot;
];

[ ResetVagueWords i ;	! 53392 / 0xd090
    if (i has animate && i ~= player) {
        if (GetGender(i) == 1[?]) {
            himobj = i;
        } else {
            herobj = i;
        }
    } else {
        itobj = i;
    }
    rtrue;
];

[ GetGender person ;	! 53432 / 0xd0b8
    if (person hasnt absent) {
        rtrue;
    }
    rfalse;
];

[ Copy bto bfrom i size ;	! 53440 / 0xd0c0
    size = bto->0;
    i = 1[?];
  .label53448;
    if (i <= size) {
        bto->i = bfrom->i;
        ++i;
        jump label53448;
    }
    rtrue;
];

[ UnsignedCompare x y u v ;	! 53468 / 0xd0dc
    if (x == y) {
        return 0;
    }
    if (x < 0 && y >= 0) {
        return 1;
    }
    if (x >= 0 && y < 0) {
        return 65535;
    }
    u = x & 32767;
    v = y & 32767;
    if (u > v) {
        return 1;
    }
    return 65535;
];

[ ZRegion addr ;	! 53524 / 0xd114
    if (addr == 0) {
        return 0;
    }
    if (addr >= 1 && addr <= top_object) {
        return 1;
    }
    if (UnsignedCompare(addr,46697["CURSES"?]) >= 0) {
        return 3;
    }
    if (UnsignedCompare(addr,10439[Main?]) >= 0) {
        return 2;
    }
    return 0;
];

[ PrintOrRun o prop flag a ;	! 53576 / 0xd148
    generic_globvar = o.&prop;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    if (generic_globvar > 2) {
        return RunRoutines(o,prop);
    }
    if (o.prop == 65535[?]) {
        rfalse;
    }
    a = ZRegion(o.prop);
    if (a == 0 or 1) {
        "** Expected string/routine as prop value! **";
    }
    if (a == 3) {
        print (string) o.prop;
        if (flag == 0) {
            new_line;
        }
        rtrue;
    }
    return RunRoutines(o,prop);
];

[ ValueOrRun obj prop a ;	! 53704 / 0xd1c8
    a = ZRegion(obj.prop);
    if (a == 2[?]) {
        return RunRoutines(obj,prop);
    }
    return obj.prop;
];

[ RunRoutines obj prop i j k l m ssv ;	! 53736 / 0xd1e8
    if (obj == thedark && prop ~= initial) {
        obj = real_location;
    }
    if (obj.prop == 65535[?] or 0) {
        rfalse;
    }
    j = obj.&prop;
    generic_globvar = obj.&prop;
    if (generic_globvar) {
        generic_globvar = get_prop_len(generic_globvar);
    }
    k = generic_globvar;
    m = selfobj;
    selfobj = obj;
    ssv = action;
    if (prop == life) {
        action = orders;
    } else {
        action = verb;
    }
    i = 0;
  .label53809;
    if (i < k / 2) {
        if (j-->i == 65535[?]) {
            selfobj = m;
            action = ssv;
            rfalse;
        }
        l = ZRegion(j-->i);
        if (l == 2[?]) {
            l = (j-->i)();
            if (l ~= 0) {
                selfobj = m;
                action = ssv;
                return l;
            }
        } else if (l == 3[s_obj?]) {
            print (string) j-->i;
            new_line;
        } else {
            print "** Entry in property list not routine or string **^";
        }
        ++i;
        jump label53809;
    }
    selfobj = m;
    action = ssv;
    rfalse;
];

[ DisplayStatus ;	! 53944 / 0xd2b8
    if (the_time == 65535) {
        sline1 = score;
        sline2 = turns;
    } else {
        sline1 = the_time / 60;
        sline2 = the_time % 60;
    }
    rtrue;
];

[ SetTime t s ;	! 53972 / 0xd2d4
    the_time = t;
    time_rate = s;
    time_step = 0;
    if (s < 0) {
        time_step = 0 - s;
    }
    rtrue;
];

[ NotifyTheScore i ;	! 53992 / 0xd2e8
    print "^[Your score has just gone ";
    if (last_score > score) {
        i = last_score - score;
        print "down";
    } else {
        i = score - last_score;
        print "up";
    }
    print " by ";
    EnglishNumber(i);
    print " point";
    if (i > 1) {
        print "s";
    }
    print ".]^";
    rtrue;
];

[ PlayTheGame i j k l ;	! 54072 / 0xd338
    standard_interpreter = 50-->0;
    player = yourself;
    top_object = 757 - 255;
    yourself.capacity = 5;
    j = Initialise;();
    last_score = score;
    move player to location;
  .label54101;
    if (parent(location) ~= nothing) {
        location = parent(location);
        jump label54101;
    }
    i = child(player);
  .label54119;
    if (i ~= 0) {
        give i moved;
        give i ~concealed;
        i = sibling(i);
        jump label54119;
    }
    if (j ~= 2[?]) {
        Banner();
    }
    lightflag = OffersLight(parent(player));
    if (lightflag == false) {
        real_location = location;
        location = thedark;
    }
    R_Process(##Look);
    i = 1[?];
  .label54173;
    if (i <= 100) {
        j = random(i);
        ++i;
        jump label54173;
    }
  .label54187;
    if (deadflag == 0) {
        if (score ~= last_score) {
            if (notify_mode == true) {
                NotifyTheScore();
            }
            last_score = score;
        }
      .label54208;
        inputobjs-->0 = 0;
        inputobjs-->1 = 0;
        inputobjs-->2 = 0;
        inputobjs-->3 = 0;
        meta = 0;
        Parser(24207[?]);
        noun = nothing;
        second = nothing;
        verb = ##Score;
        multiflag = 0;
        onotheld_mode = notheld_mode;
        notheld_mode = 0;
        verb = inputobjs-->0;
        if (verb == ##GiveR or ##ShowR) {
            i = inputobjs-->2;
            inputobjs-->2 = inputobjs-->3;
            inputobjs-->3 = i;
            if (verb == ##GiveR) {
                verb = ##Give;
            } else {
                verb = ##Show;
            }
        }
        if (verb == ##Tell && inputobjs-->2 == player && actor ~= player) {
            inputobjs-->2 = actor;
            actor = player;
            verb = ##Ask;
        }
        if (verb == ##AskFor && inputobjs-->2 ~= player && actor == player) {
            actor = inputobjs-->2;
            inputobjs-->2 = inputobjs-->3;
            inputobjs-->3 = player;
            verb = ##Give;
        }
        if (verb == ##Ask or ##Tell or ##Answer) {
            special_word = special_number1;
        }
      .label54402;
        inp1 = 0;
        inp2 = 0;
        i = inputobjs-->1;
        if (i >= 1) {
            inp1 = inputobjs-->2;
        }
        if (i >= 2) {
            inp2 = inputobjs-->3;
        }
        noun = inp1;
        second = inp2;
        if (inp1 == 1[?]) {
            noun = special_number1;
        }
        if (inp2 == 1[?]) {
            if (inp1 == 1[?]) {
                second = special_number2;
            } else {
                second = special_number1;
            }
        }
        if (actor ~= player) {
            j = RunRoutines(player,orders);
            if (j == 0) {
                j = RunRoutines(actor,orders);
                if (j == 0) {
                    if (verb == ##Orders) {
                        inputobjs-->3 = actor;
                        actor = player;
                        verb = ##Answer;
                        jump label54402;
                    }
                    if (RunLife(actor,259[Greek_Frieze1?]) == 0) {
                        L__M(##Order,1,actor);
                    }
                }
            }
        } else if (i == 0 || inp1 ~= 0) {
            Process();
        } else {
            multiflag = 1;
            j = multiple_object-->0;
            if (j == 0) {
                L__M(##Miscellany,2);
                jump label54208;
            }
            if (toomany_flag == 1) {
                toomany_flag = 0;
                L__M(##Miscellany,1);
            }
            i = location;
            k = 1[?];
          .label54605;
            if (k <= j) {
                if (deadflag ~= 0) {
                    ! no code
                } else if (location ~= i) {
                    print "(Since something dramatic has happened, your list of commands has been cut short.)^";
                } else {
                    l = multiple_object-->k;
                    ResetVagueWords(l);
                    PrintShortName(l);
                    print ": ";
                    inp1 = l;
                    noun = l;
                    Process();
                    inp1 = 0;
                    noun = nothing;
                    ++k;
                    jump label54605;
                }
            }
        }
        if (notheld_mode == 1) {
            meta = 1;
        }
        if (deadflag == 0 && meta == 0) {
            EndTurnSequence();
        }
        jump label54187;
    }
    if (deadflag ~= WON) {
        GoodTryRevoked();
    }
    if (deadflag == 0) {
        jump label54208;
    }
    print "^^    ";
    style bold;
    print "***";
    if (deadflag == DIED) {
        L__M(##Miscellany,3);
    }
    if (deadflag == WON) {
        L__M(##Miscellany,4);
    }
    if (deadflag > 2) {
        print " ";
        routine172820();
        print " ";
    }
    print "***";
    style roman;
    print "^^^";
    ScoreSub();
    DisplayStatus();
  .label54838;
    L__M(##Miscellany,5);
  .label54845;
    print "> ";
    generic_globvar = 0;
    array_24021->1 = 0;
    StatusLinePrinter();
    @aread array_24021 parse -> generic_globvar;
    i = parse-->1;
    if (i == 37839['quit'?] or 37767['q//'?]) {
        @quit;
    }
    if (i == 38037['restart'?]) {
        @restart;
    }
    if (i == 38046['restore'?]) {
        RestoreSub();
        jump label54838;
    }
    if (i == 33501['fullscore'?] or 33492['full'?] && 0 == 0) {
        new_line;
        FullScoreSub();
        jump label54838;
    }
    if (deadflag == WON && i == 29838['amusing'?] && 0 == 0) {
        new_line;
        routine175152();
        jump label54838;
    }
    if (i == 40836['undo'?]) {
        if (undo_flag == 0) {
            L__M(##Miscellany,6);
            jump label54838;
        }
        if (undo_flag == 1) {
            ! no code
        } else {
            @restore_undo -> i;
            if (i ~= 0) jump label54997;
        }
        L__M(##Miscellany,7);
      .label54997;
        jump label54838;
    }
    L__M(##Miscellany,8);
    jump label54845;
];

[ Process ;	! 55012 / 0xd6e4
    if (meta == 1 || BeforeRoutines() == 0) {
        generic_globvar = (actions_table-->verb)();
    }
    rtrue;
];

[ TestScope obj act a al sr x y ;	! 55040 / 0xd700
    x = parser_one;
    y = parser_two;
    parser_one = obj;
    parser_two = 0;
    a = actor;
    al = actor_location;
    sr = scope_reason;
    scope_reason = TESTSCOPE_REASON;
    if (act == 0) {
        actor = player;
    } else {
        actor = act;
    }
    actor_location = actor;
  .label55082;
    if (parent(actor_location) ~= nothing) {
        actor_location = parent(actor_location);
        jump label55082;
    }
    SearchScope(location,player,0);
    scope_reason = sr;
    actor = a;
    actor_location = al;
    parser_one = x;
    x = parser_two;
    parser_two = y;
    return x;
];

[ LoopOverScope routine act x y a al ;	! 55124 / 0xd754
    x = parser_one;
    y = scope_reason;
    a = actor;
    al = actor_location;
    parser_one = routine;
    if (act == 0) {
        actor = player;
    } else {
        actor = act;
    }
    actor_location = actor;
  .label55157;
    if (parent(actor_location) ~= nothing) {
        actor_location = parent(actor_location);
        jump label55157;
    }
    scope_reason = LOOPOVERSCOPE_REASON;
    SearchScope(actor_location,actor,0);
    parser_one = x;
    scope_reason = y;
    actor = a;
    actor_location = al;
    rtrue;
];

[ BeforeRoutines ;	! 55196 / 0xd79c
    if (routine172644() ~= 0) {
        rtrue;
    }
    if (RunRoutines(player,orders) ~= 0) {
        rtrue;
    }
    if (location ~= nothing && RunRoutines(location,after) ~= 0) {
        rtrue;
    }
    scope_reason = REACT_BEFORE_REASON;
    parser_one = 0;
    SearchScope(location,player,0);
    scope_reason = PARSING_REASON;
    if (parser_one ~= 0) {
        rtrue;
    }
    if (inp1 > 1 && RunRoutines(inp1,after) ~= 0) {
        rtrue;
    }
    rfalse;
];

[ AfterRoutines ;	! 55280 / 0xd7f0
    scope_reason = REACT_AFTER_REASON;
    parser_one = 0;
    SearchScope(location,player,0);
    scope_reason = PARSING_REASON;
    if (parser_one ~= 0) {
        rtrue;
    }
    if (location ~= nothing && RunRoutines(location,before) ~= 0) {
        rtrue;
    }
    if (inp1 > 1 && RunRoutines(inp1,before) ~= 0) {
        rtrue;
    }
    return Stub8();
];

[ R_Process acti i j sn ss sa sse ;	! 55348 / 0xd834
    sn = inp1;
    ss = inp2;
    sa = verb;
    sse = selfobj;
    inp1 = i;
    inp2 = j;
    noun = i;
    second = j;
    verb = acti;
    if (meta == 1 || BeforeRoutines() == 0 && verb < 256) {
        generic_globvar = (actions_table-->verb)();
        selfobj = sse;
        inp1 = sn;
        noun = sn;
        inp2 = ss;
        second = ss;
        verb = sa;
        rfalse;
    }
    selfobj = sse;
    inp1 = sn;
    noun = sn;
    inp2 = ss;
    second = ss;
    verb = sa;
    rtrue;
];

[ RunLife a j ;	! 55448 / 0xd898
    orders = j;
    return RunRoutines(a,life);
];

[ LowKey_Menu menu_choices EntryR ChoiceR lines main_title i j ;	! 55464 / 0xd8a8
    ++menu_nesting;
  .label55467;
    menu_item = 0;
    lines = EntryR();
    main_title = submenu_header;
    print "--- ", (string) main_title, " ---^^";
    if (ZRegion(menu_choices) == 3) {
        print (string) menu_choices;
    } else {
        generic_globvar = menu_choices();
    }
  .label55515;
    print "^Type a number from 1 to ", lines, ", 0 to redisplay or press ENTER.^> ";
    generic_globvar = 0;
    array_24021->1 = 0;
    StatusLinePrinter();
    @aread array_24021 parse -> generic_globvar;
    i = parse-->1;
    if (i == 'quit' or 'q//' || parse->1 == 0) {
        --menu_nesting;
        if (menu_nesting > 0) {
            rfalse;
        }
        if (deadflag == 0) {
            R_Process(##Look);
            rtrue;
        }
        rfalse;
    }
    i = TryNumber(1[?]);
    if (i < 1 || i > lines) {
        jump label55515;
    }
    menu_item = i;
    j = ChoiceR();
    if (j == 2) {
        jump label55467;
    }
    if (j == 3) {
        rfalse;
    }
    jump label55515;
];

[ DoMenu menu_choices EntryR Choice lines main_title main_wid cl i j oldcl pke ;	! 55676 / 0xd97c
    if (pretty_mode == false) {
        LowKey_Menu(menu_choices,EntryR,Choice);
        rfalse;
    }
    ++menu_nesting;
    menu_item = 0;
    lines = EntryR();
    main_title = submenu_header;
    main_wid = submenu_number;
    cl = 7[se_obj?];
  .label55708;
    oldcl = 0;
    @erase_window 65535;
    i = lines + 7;
    @split_window i;
    i = 0->33;
    if (i == 0) {
        i = 80[secret_door?];
    }
    @set_window 1;
    @set_cursor 1 1;
    style reverse;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .label55752;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label55752;
    }
    j = i / 2 - main_wid;
    @set_cursor 1 j;
    print (string) main_title;
    @set_cursor 2 1;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .label55790;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label55790;
    }
    @set_cursor 2 2;
    print "N = next subject";
    j = i - 12;
    @set_cursor 2 j;
    print "P = previous";
    @set_cursor 3 1;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .label55852;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label55852;
    }
    @set_cursor 3 2;
    print "RETURN = read subject";
    j = i - 17;
    @set_cursor 3 j;
    if (menu_nesting == 1) {
        print "  Q = resume game";
    } else {
        print "Q = previous menu";
    }
    style roman;
    @set_cursor 5 2;
    0-->8 = 2 | 0-->8;
    if (ZRegion(menu_choices) == 3) {
        print (string) menu_choices;
    } else {
        generic_globvar = menu_choices();
    }
  .label55975;
    if (cl ~= oldcl) {
        if (oldcl > 0) {
            @set_cursor oldcl 4;
            print " ";
        }
        @set_cursor cl 4;
        print ">";
    }
    oldcl = cl;
    @read_char 1 0 0 -> pke;
    if (pke == 78[Dead_End?] or 110[pile_of_sheets?] or 130[little_window?]) {
        ++cl;
        if (cl == 7 + lines) {
            cl = 7[se_obj?];
        }
        jump label55975;
    }
    if (pke == 80[secret_door?] or 112[Potting_Room?] or 129[dark_shaft_obj2?]) {
        --cl;
        if (cl == 6[ne_obj?]) {
            cl = 6 + lines;
        }
        jump label55975;
    }
    if (pke == 81[fire_escape?] or 113[old_gardeners__gloves?] or 27[rod_of_returning2?]) {
        ! no code
    } else {
        if (pke == 10[u_obj?] or 13[in_obj?]) {
            @set_window 0;
            0-->8 = 65533 & 0-->8;
            new_line;
            new_line;
            new_line;
            menu_item = cl - 6;
            generic_globvar = EntryR();
            @erase_window 65535;
            @split_window 1;
            i = 0->33;
            if (i == 0) {
                i = 80[secret_door?];
            }
            @set_window 1;
            @set_cursor 1 1;
            style reverse;
            generic_globvar = i;
            if (generic_globvar >= 1) {
              .label56141;
                print ' ';
                generic_globvar = generic_globvar - 1;
                if (generic_globvar ~= 0) jump label56141;
            }
            j = i / 2 - submenu_number;
            @set_cursor 1 j;
            print (string) submenu_header;
            style roman;
            @set_window 0;
            new_line;
            i = Choice();
            if (i == 2[?]) {
                jump label55708;
            }
            if (i == 3[s_obj?]) {
                jump label56233;
            }
            print "^[Please press SPACE.]^";
            @read_char 1 0 0 -> pke;
            jump label55708;
        }
        jump label55975;
    }
  .label56233;
    --menu_nesting;
    if (menu_nesting > 0) {
        rfalse;
    }
    0-->8 = 65533 & 0-->8;
    @set_cursor 1 1;
    @erase_window 65535;
    @set_window 0;
    new_line;
    new_line;
    new_line;
    if (deadflag == 0) {
        R_Process(##Look);
        rtrue;
    }
    rtrue;
];

[ TimerE ;	! 56284 / 0xdbdc
    "** Too many timers/daemons! Increase MAX_TIMERS **";
];

[ TimerE2 o ;	! 56336 / 0xdc10
    print "** Object ";
    PrintShortName(o);
    " has no time_left property! **";
];

[ TimerE3 o ;	! 56380 / 0xdc3c
    print "** Object ";
    PrintShortName(o);
    " both timer and daemon! **";
];

[ StartTimer obj timer i ;	! 56424 / 0xdc68
    i = 0;
  .label56428;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            if (array_23957->i == 2[?]) {
                TimerE3(obj);
            }
            rfalse;
        }
        ++i;
        jump label56428;
    }
    i = 0;
  .label56469;
    if (i < active_timers) {
        if (the_timers-->i == 0) {
            jump label56513;
        }
        ++i;
        jump label56469;
    }
    i = active_timers++;
    if (i * 2 >= 64) {
        TimerE();
    }
  .label56513;
    if (obj.&number == 0) {
        TimerE2(obj);
    }
    the_timers-->i = obj;
    array_23957->i = 1[?];
    obj.number = timer;
    rtrue;
];

[ StopTimer obj i ;	! 56548 / 0xdce4
    i = 0;
  .label56552;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            jump label56577;
        }
        ++i;
        jump label56552;
    }
    rfalse;
  .label56577;
    if (obj.&number == 0) {
        TimerE2(obj);
    }
    the_timers-->i = 0;
    obj.number = 0;
    rtrue;
];

[ StartDaemon obj i ;	! 56604 / 0xdd1c
    i = 0;
  .label56608;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            if (array_23957->i == 1[?]) {
                TimerE3(obj);
            }
            rfalse;
        }
        ++i;
        jump label56608;
    }
    i = 0;
  .label56649;
    if (i < active_timers) {
        if (the_timers-->i == 0) {
            jump label56693;
        }
        ++i;
        jump label56649;
    }
    i = active_timers++;
    if (i * 2 >= 64) {
        TimerE();
    }
  .label56693;
    the_timers-->i = obj;
    array_23957->i = 2[?];
    rtrue;
];

[ StopDaemon obj i ;	! 56708 / 0xdd84
    i = 0;
  .label56712;
    if (i < active_timers) {
        if (the_timers-->i == obj) {
            jump label56737;
        }
        ++i;
        jump label56712;
    }
    rfalse;
  .label56737;
    the_timers-->i = 0;
    rtrue;
];

[ EndTurnSequence i j ;	! 56744 / 0xdda8
    ++turns;
    if (the_time ~= 65535) {
        if (time_rate >= 0) {
            the_time = the_time + time_rate;
        } else {
            --time_step;
            if (time_step == 0) {
                ++the_time;
                time_step = 0 - time_rate;
            }
        }
        the_time = the_time % 1440;
    }
    i = 0;
  .label56788;
    if (deadflag == 0 && i < active_timers) {
        j = the_timers-->i;
        if (j ~= 0) {
            if (array_23957->i == 2[?]) {
                RunRoutines(j,daemon);
            } else if (j.number == 0) {
                StopTimer(j);
                RunRoutines(j,daemon);
            } else {
                j.number = j.number - 1;
            }
        }
        ++i;
        jump label56788;
    }
    if (deadflag == 0) {
        scope_reason = EACH_TURN_REASON;
        verb_word = 0;
        DoScopeAction(location);
        SearchScope(location,player,0);
        scope_reason = PARSING_REASON;
    }
    if (deadflag == 0) {
        Stub10();
    }
    if (deadflag == 0) {
        AdjustLight();
        i = child(player);
      .label56916;
        if (i ~= 0) {
            if (i hasnt moved) {
                give i moved;
                if (i has scored) {
                    score = score + 4;
                    things_score = things_score + 4;
                }
            }
            i = sibling(i);
            jump label56916;
        }
    }
    rtrue;
];

[ AdjustLight flag i ;	! 56952 / 0xde78
    i = lightflag;
    lightflag = OffersLight(parent(player));
    if (i == 0 && lightflag == true) {
        location = real_location;
        if (flag == 0) {
            R_Process(##Look);
        }
    }
    if (i == 1[?] && lightflag == false) {
        real_location = location;
        location = thedark;
        if (flag == 0) {
            NoteArrival();
            return L__M(##Miscellany,9);
        }
    }
    if (i == 0 && lightflag == false) {
        location = thedark;
    }
    rtrue;
];

[ OffersLight i j ;	! 57036 / 0xdecc
    if (i == nothing) {
        rfalse;
    }
    if (i has light) {
        rtrue;
    }
    j = child(i);
  .label57053;
    if (j ~= nothing) {
        if (HasLightSource(j) == true) {
            rtrue;
        }
        j = sibling(j);
        jump label57053;
    }
    if (i has enterable || IsSeeThrough(i) == 1[?]) {
        return OffersLight(parent(i));
    }
    rfalse;
];

[ HasLightSource i j ad ;	! 57108 / 0xdf14
    if (i == 0) {
        rfalse;
    }
    if (i has light) {
        rtrue;
    }
    if (i has enterable || IsSeeThrough(i) == 1[?]) {
        i = child(i);
      .label57141;
        if (i ~= 0) {
            if (HasLightSource(i) == true) {
                rtrue;
            }
            i = sibling(i);
            jump label57141;
        }
    }
    ad = i.&se_to;
    if (parent(i) ~= nothing && ad ~= 0) {
        if (ad-->0 > top_object) {
            ats_hls = 0;
            ats_flag = 1;
            RunRoutines(i,se_to);
            ats_flag = 0;
            if (ats_hls == 1) {
                rtrue;
            }
        } else {
            j = 0;
          .label57218;
            generic_globvar = i.&se_to;
            if (generic_globvar) {
                generic_globvar = get_prop_len(generic_globvar);
            }
            if (2 * j < generic_globvar) {
                if (HasLightSource(ad-->j) == true) {
                    rtrue;
                }
                ++j;
                jump label57218;
            }
        }
    }
    rfalse;
];

[ PronounsSub p ;	! 57268 / 0xdfb4
    if (p == nothing) {
        print "is unset";
    } else {
        print "means ";
        Defart(p);
    }
    rtrue;
];

[ NounsSub ;	! 57296 / 0xdfd0
    print "At the moment, ~it~ ";
    PronounsSub(itobj);
    print ", ~him~ ";
    PronounsSub(himobj);
    if (player == yourself) {
        print " and";
    } else {
        print ",";
    }
    print " ~her~ ";
    PronounsSub(herobj);
    if (player == yourself) {
        ".";
    }
    " and ~me~ means ", (name) player, ".";
];

[ ChangePlayer obj flag i ;	! 57384 / 0xe028
    if (obj.&time_left == 0) {
        "** Player objects must have ~number~ prop **";
    }
    if (actor == player) {
        actor = obj;
    }
    give player ~transparent;
    give player ~concealed;
    i = obj;
  .label57450;
    if (parent(i) ~= nothing) {
        if (i has animate) {
            give i transparent;
        }
        i = parent(i);
        jump label57450;
    }
    if (player == yourself) {
        player.short = "your former self";
    }
    player.time_left = real_location;
    player = obj;
    if (player == yourself) {
        player.short = NULL;
    }
    give player transparent;
    give player concealed;
    give player animate;
    give player proper;
    i = player;
  .label57517;
    if (parent(i) ~= nothing) {
        i = parent(i);
        jump label57517;
    }
    location = i;
    real_location = player.time_left;
    if (real_location == nothing) {
        real_location = location;
    }
    lightflag = OffersLight(parent(player));
    if (lightflag == false) {
        location = thedark;
    }
    print_player_flag = flag;
    rtrue;
];

[ ChangeDefault prop val ;	! 57568 / 0xe0e0
    0-->5-->(prop - 1) = val;
    rtrue;
];

[ RandomEntry tab ;	! 57584 / 0xe0f0
    if (tab-->0 == 0) {
        "** Table size 0 **";
    }
    return tab-->random(tab-->0);
];

[ Indefart o ;	! 57632 / 0xe120
    if (o hasnt proper) {
        PrintOrRun(o,article,1);
        print " ";
    }
    PrintShortName(o);
    rtrue;
];

[ Defart o ;	! 57656 / 0xe138
    if (o hasnt proper) {
        print "the ";
    }
    PrintShortName(o);
    rtrue;
];

[ CDefart o ;	! 57676 / 0xe14c
    if (o hasnt proper) {
        print "The ";
    }
    PrintShortName(o);
    rtrue;
];

[ PrintShortName o ;	! 57692 / 0xe15c
    if (o == nothing) {
        print "nothing";
        rtrue;
    }
    if (o > top_object || o < 0) {
        print "<no such object>";
        rtrue;
    }
    if (o == player) {
        print "yourself";
        rtrue;
    }
    if (o.&short ~= 0 && PrintOrRun(o,short,1) ~= 0) {
        rtrue;
    }
    print (name) o;
    rtrue;
];

[ DirectionName d ;	! 57772 / 0xe1ac
    generic_globvar = d;
    if (generic_globvar == 5[w_obj?]) {
        print "north";
    } else if (generic_globvar == 6[ne_obj?]) {
        print "south";
    } else if (generic_globvar == 7[se_obj?]) {
        print "east";
    } else if (generic_globvar == 8[nw_obj?]) {
        print "west";
    } else if (generic_globvar == 9[sw_obj?]) {
        print "northeast";
    } else if (generic_globvar == 11[d_obj?]) {
        print "northwest";
    } else if (generic_globvar == 10[u_obj?]) {
        print "southeast";
    } else if (generic_globvar == 12[out_obj?]) {
        print "southwest";
    } else if (generic_globvar == 13[in_obj?]) {
        print "up";
    } else if (generic_globvar == 14[thedark?]) {
        print "down";
    } else if (generic_globvar == 15[yourself?]) {
        print "in";
    } else if (generic_globvar == 16[lm_object?]) {
        print "out";
    } else {
        "** No such direction **";
    }
    rtrue;
];

[ Banner i ;	! 57960 / 0xe268
    style bold;
    print "CURSES";
    style roman;
    print "^An Interactive Diversion^Copyright (c) 1993, 1994, 1995 by Graham Nelson.^", "Release ", 0-->1 & 1023, " / Serial number ";
    i = 18;
  .label58011;
    if (i < 24) {
        print (char) 0->i;
        ++i;
        jump label58011;
    }
    print " / Inform v", "1600", " Library ", "5/12";
    new_line;
    if (standard_interpreter > 0) {
        print "Standard interpreter ", standard_interpreter / 256, ".", standard_interpreter % 256, "^";
    }
    rtrue;
];

[ VersionSub ;	! 58104 / 0xe2f8
    Banner();
    print "Interpreter ", 0->30, " Version ", (char) 0->31, " / ", "Library serial number ", "951024", "^";
    rtrue;
];

! References: lm_object.after

[ LMAfter ;	! 58172 / 0xe33c
    if (action == ##Score) {
        if (deadflag == 0) {
            WhereInGame();
            print "  ";
        }
        rfalse;
    }
    if (action == ##Inv) {
        set_flag_array(0);
        print "You are ";
        if (location == Inside_the_Orb) {
            print "bathed in a curious white light, and ";
        }
        if (lm_n == Compass) {
            "carrying nothing.";
        }
        print "carrying";
        rtrue;
    }
    if (action == ##Drop) {
        if (lm_n == e_obj && noun has rod_attr) {
            set_flag_array(16);
        }
        rfalse;
    }
    if (action == ##Go) {
        if (lm_n == n_obj && game_section == T_DREAMING or (T_DREAMING|T_UNREAL)) {
            "You drift in that direction, but without gaining any ground.";
        }
        rfalse;
    }
    if (action == ##Jump) {
        if (Austin notin location) {
            rfalse;
        }
        if (game_section == T_ALEXANDRIA) {
            "Austin is quite unruffled.";
        }
        print "For some reason, Austin is startled and springs for his life ";
        set_flag_array(7);
        if (location == Souvenirs_Room && charcoal_sketch in slide_projector && south_wall hasnt concealed) {
            move Austin to Causeway;
            Achieved(SCORE_AUSTIN);
            StartDaemon(Outside_the_Royal_Museum);
            "right up through the south wall and into Alexandria!";
        }
        AustinMovements(true);
        rfalse;
    }
    if (action == ##Listen && antiquated_wireless has general && (antiquated_wireless in location || (antiquated_wireless in Conservatory && location == Potting_Room))) {
        "You feel your brain turning to rice pudding.";
    }
    rfalse;
];

! References: rod_of_fire.after, rod_of_returning.after, rod_of_stalking.after, rod_of_infinity.after, rod_of_husbandry.after, rod_of_bronze.after, rod_of_sacrifice.after, rod_of_luck.after, rod_of_ice.after, rod_of_language.after, rod_of_returning2.after, rod_of_life.after, rod_of_death.after, rod_of_love.after

[ RodAfter ;	! 58560 / 0xe4c0
    if (action == ##Read) {
        if (selfobj has unidentiifed_rod) {
            "A featureless mahogany rod, whose purpose is oblique. Or almost featureless: a little silver plaque is left blank at one end.";
        }
        if (selfobj has high_rod) {
            rfalse;
        }
        print "The silver plaque on this mahogany rod proclaims it as ";
        Defart(selfobj);
        print ".";
        if (noun has charged) {
            "  It is fully charged up.";
        }
        new_line;
        rtrue;
    }
    rfalse;
];

! References: rod_of_fire.parse_name, rod_of_returning.parse_name, rod_of_stalking.parse_name, rod_of_infinity.parse_name, rod_of_husbandry.parse_name, rod_of_bronze.parse_name, rod_of_sacrifice.parse_name, rod_of_luck.parse_name, rod_of_ice.parse_name, rod_of_language.parse_name, rod_of_returning2.parse_name, rod_of_life.parse_name, rod_of_death.parse_name, rod_of_love.parse_name

[ RodParse i w ;	! 58728 / 0xe568
    if (parser_action == ##TheSame) {
        if (parser_one has unidentiifed_rod && parser_two has unidentiifed_rod) {
            return 65535;
        }
        return 65534;
    }
  .label58752;
    if (1[?] == 1[?]) {
        w = NextWord();
        if (Refers(selfobj,w) == 1[?]) {
            ++i;
        } else if (w == 'rods') {
            parser_action = ##PluralFound;
            ++i;
        } else {
            return i;
        }
        jump label58752;
    }
    rfalse;
];

! References: rod_of_fire.short, rod_of_returning.short, rod_of_stalking.short, rod_of_infinity.short, rod_of_husbandry.short, rod_of_bronze.short, rod_of_sacrifice.short, rod_of_luck.short, rod_of_ice.short, rod_of_language.short, rod_of_returning2.short, rod_of_life.short, rod_of_death.short, rod_of_love.short

[ rod_short ;	! 58804 / 0xe5b4
    if (selfobj has unidentiifed_rod) {
        print "featureless mahogany rod";
        rtrue;
    }
    if (listing_together hasnt rod_attr) {
        if (selfobj has high_rod) {
            print "High ";
        }
        print "Rod of ";
    }
    rfalse;
];

! References: rod_of_fire.u_to, rod_of_returning.u_to, rod_of_stalking.u_to, rod_of_infinity.u_to, rod_of_husbandry.u_to, rod_of_bronze.u_to, rod_of_sacrifice.u_to, rod_of_luck.u_to, rod_of_ice.u_to, rod_of_language.u_to, rod_of_returning2.u_to, rod_of_life.u_to, rod_of_death.u_to, rod_of_love.u_to

[ rod_display_after ;	! 58852 / 0xe5e4
    if (rod_identity == 2 && selfobj has charged) {
        print " (charged)";
    }
    rfalse;
];

! References: rod_of_life.description, rod_of_death.description, rod_of_love.description

[ LifeDesc ;	! 58876 / 0xe5fc
    print "An adamantine rod, bearing a sculpted ";
    if (selfobj == rod_of_life) {
        print "hand";
    }
    if (selfobj == rod_of_love) {
        print "heart";
    }
    if (selfobj == rod_of_death) {
        print "skull";
    }
    " on one end, and inscribed with its title.";
];

! References: rod_of_life.rod_action, rod_of_death.rod_action, rod_of_love.rod_action

[ LifeAction ;	! 58968 / 0xe658
    "You are knocked off your feet with the power of one of the High Rods, but it is too puissant for a mortal such as you are.";
];

! References: rod_of_language.nw_to, rod_of_returning2.nw_to

[ MasterGameRods enhanced ;	! 59044 / 0xe6a4
    if (rod_identity == 1) {
        if (enhanced == true) {
            print "the High Rods of ";
        } else {
            print "the Rods of ";
        }
        c_style = c_style | (8 + 4096);
        if (c_style & 1 ~= 0) {
            c_style = c_style - 1;
        }
        if (c_style & 2 ~= 0) {
            c_style = c_style - 2;
        }
    }
    rfalse;
];

! References: rod_of_life.nw_to, rod_of_death.nw_to, rod_of_love.nw_to

[ rod_func1 ;	! 59132 / 0xe6fc
    return MasterGameRods(true);
];

[ discover_rod r ;	! 59144 / 0xe708
    give r ~unidentiifed_rod;
    r.&name-->2 = r.rod_word;
    r.&name-->3 = r.rod_word;
    r.article = "the";
    r.d_to = nothing;
    r.nw_to = MasterGameRods;
    rtrue;
];

! References: rod_of_fire.rod_action

[ RodOfFireAction ;	! 59192 / 0xe738
    if (second == player) {
        deadflag = DIED;
        "Oh dear. Like Mad Isaac before you, you have spontaneously combusted!";
    }
    if (second == Austin) {
        set_flag_array(6);
        "You don't really want to vapourise Austin.";
    }
    if (second == adamantine_statue) {
        if (adamantine_skull hasnt general || adamantine_heart hasnt general || adamantine_hand hasnt general) {
            "The bones jerk and rattle, but seem unable to come together into life.";
        }
        remove adamantine_statue;
        move adamantine_knight to West_Side_Chapel;
        Achieved(SCORE_KNIGHT);
        himobj = adamantine_knight;
        "The adamantine knight leaps up, invigorated by the fire in his skeletal eyes, a new spark in his belly!  He bows gravely, in the elaborate style of a mime artist.";
    }
    if (second == adamantine_knight) {
        "Adamantine is fireproof.";
    }
    if (second == loose_board) {
        "The wood seems to have been treated somehow, and is fireproof.";
    }
    if (second has animate) {
        "For heaven's sake, you're only looking for an out-of-date map. Murder does seem a little extreme.";
    }
    if (second == wall_of_thorns_object) {
        if (wall_of_thorns_object has open) {
            "The wall wriggles in discomfort to avoid further devastation.";
        }
        give wall_of_thorns_object open;
        "Fire leaps out from the rod into the heart of the thorn wall, which screams out as it burns, revealing a great hole through the wild flames. You catch a tantalising glimpse of a great Temple, before the wall heals back. But it is unable to recover entirely, and a charred gap is left to the south. You could probably squeeze through it.";
    }
    if (second == medicine_bottle) {
        print "The melting point of this glass is very high, and amazingly it withstands the bolt of fire.^";
        GoodTry();
        rfalse;
    }
    if (second == complicated_looking_bomb or timer_detonator) {
        deadflag = DIED;
        "(Perhaps predictably) the bomb explodes!";
    }
    if (second has scenery || second has static) {
        deadflag = DIED;
        "You start a great conflagration, and then perish in it!";
    }
    remove second;
    print "A bolt of fire leaps from the rod and consumes ";
    Defart(second);
    " utterly!";
];

! References: rod_of_ice.rod_action

[ RodOfIceAction ;	! 60068 / 0xeaa4
    if (second == player) {
        "You feel a sudden chill.";
    }
    if (second has animate) {
        print "For a fleeting moment, ";
        Defart(second);
        " freezes up.";
    }
    if (second has high_rod) {
        if (second has general) {
            "It's already cold.";
        }
        give second general;
        "There is an enormous hissing of steam, creating wildly swirling mists, after whose parting an apparently cool rod is left behind.";
    }
    "Nothing obvious happens.";
];

! References: rod_of_returning.rod_action, rod_of_returning2.rod_action

[ RodOfReturningAction i loc ;	! 60256 / 0xeb60
    if (second ~= player) {
        "Nothing obvious happens.";
    }
    if (location == Inside_the_Orb) {
        move golden_orb to player;
        print "Although nothing seems to happen to you, the whole golden sphere gracefully contracts, pulling itself tight until it sits comfortably in the palm of your hand. You blink.^";
        location = LocationSave;
        move player to ContainerSave;
        R_Process(##Look);
        rtrue;
    }
    routine111612();
    print "You are engulfed in a cloud of spinning white lights, like insects. When the swarm clears, you find yourself transported...^";
    if (game_section == T_ANCIENT_BRITAIN) {
        loc = Infinity_Symbol;
        remove rod_of_returning2;
    } else {
        i = random(4);
        if (debug_deterministic_transportation == 1) {
            i = 1;
        }
        loc = Attic;
        if (i == 2) {
            loc = Old_Furniture;
        }
        if (i == 3) {
            loc = Old_Winery;
        }
        if (i == 4) {
            loc = Over_the_East_Wing;
        }
    }
    PlayerTo(loc);
    rtrue;
];

! References: rod_of_husbandry.rod_action

[ RodOfHusbandryAction ;	! 60552 / 0xec88
    if (second == player) {
        "You feel suddenly obedient, and briefly fancy a dog biscuit.";
    }
    if (second == Austin) {
        "Alas, Austin is far, far too undomesticated. It has no effect.";
    }
    if (second == irate_squirrel_friend) {
        "Guided by some animal sixth sense, the squirrel gracefully jumps out of the way.";
    }
    if (second ~= herd_of_goats) {
        "Nothing obvious happens.";
    }
    give herd_of_goats general;
    set_flag_array(24);
    "The goats suddenly look up at you with awe, although they resume their former interest in eating the grass quite quickly.";
];

! References: rod_of_bronze.rod_action

[ RodOfBronzeAction ;	! 60812 / 0xed8c
    if (second == player) {
        "You acquire a sudden sun tan, but it soon fades.";
    }
    if (second == Austin) {
        "Austin is already ginger, which is near enough.";
    }
    if (second == adamantine_knight) {
        "He shrugs it off. (Isn't adamantine impressive enough for you?)";
    }
    if (second == metal_wall) {
        give metal_wall open;
        "At once, the bronze polishes up to the shine of a mirror.";
    }
    if (second ~= bronze_mural) {
        "Nothing obvious happens.";
    }
    if (bronze_mural has open) {
        "Nothing further happens.";
    }
    give bronze_mural open;
    "With an awful heaving, wrenching noise, the mural slides a little sideways, opening up a murky downward passage which can't have been used for centuries.";
];

! References: rod_of_luck.rod_action

[ RodOfLuckAction ;	! 61136 / 0xeed0
    if (second == player) {
        if (big_electricians_switch has on) {
            "You feel no different. Perhaps there's no such thing as luck.";
        }
        give noun general;
        "You feel optimistic and lucky. Mind you, you feel that most times.";
    }
    if (second == Austin) {
        "Austin is already too lucky by half.";
    }
    if (second == adamantine_knight) {
        "Reassembled after all these years... how lucky can you get?";
    }
    if (second == gambling_sailor) {
        give gambling_sailor lucky;
        "The sailor shudders suddenly.";
    }
    if (second == inscribed_die) {
        give inscribed_die lucky;
        "The die rattles a little, then settles.";
    }
    "Nothing obvious happens.";
];

! References: rod_of_sacrifice.rod_action

[ RodOfSacrificeAction ;	! 61400 / 0xefd8
    if (second == herd_of_goats) {
        if (herd_of_goats hasnt general) {
            "The goats mill around too much to aim at one accurately.";
        }
        "Still obedient to your intent, the goats part so that one stands alone. Using this Rod, you vapourise it instantaneously, and the rest contentedly return.^^Do you think there might be a moral to draw here about the use, and abuse, of power?";
    }
    if (second == Austin) {
        set_flag_array(6);
        "You don't really want to sacrifice Austin.";
    }
    if (second == adamantine_knight) {
        "Would be a shame, after all that surgery.";
    }
    if (second has moved) {
        remove second;
        print "You decide you can manage without ";
        Defart(second);
        ", which you annihilate with the Rod.";
    }
    if (location == Inside_the_Orb && second == array_of_oblong_crystals) {
        if (Inside_the_Orb hasnt general) {
            deadflag = CHECKMATED;
            "The Black pieces make a rash break out of their defences, sacrificing a piece in vain and going down to a rapid defeat as a result.^^The White Queen rises from the board, an avenging angel's smile on her face, and swings a broadsword of burning light across your body...";
        }
        move golden_orb to player;
        give golden_orb general;
        Achieved(SCORE_ORB);
        golden_orb.description = "A treasure in every sense, the orb pulsates with golden radiance.";
        print "The White pieces advance: first a bishop, then a knight is sacrificed, clearing away the wall of pawns which surround the Black king so that a dazzling checkmate can be executed!^^You fade out of the orb as oddly as you came, struck by the way it now almost pulsates in your palm.^";
        move player to ContainerSave;
        location = LocationSave;
        R_Process(##Look);
        rtrue;
    }
    if (second == player) {
        deadflag = DIED;
        "You feel a noble surge of pride as your body is incinerated by the Rod. At least you died for some terribly important cause, although exactly what it was seems to have slipped your mind.";
    }
    "Nothing obvious happens.";
];

! References: rod_of_language.rod_action

[ RodOfLanguageAction ;	! 62260 / 0xf334
    if (second == player) {
        KnowLanguages = true;
        "Nothing obvious happens. You curse eloquently in Celtic.";
    }
    if (second == surly_shopkeeper) {
        "Nice idea. Now the kiosk-keeper also knows a smattering of Celtic. Unfortunately his national pride is too strong. You'll have to try something else - you have carte blanche to solve this problem.";
    }
    "Nothing obvious happens.";
];

! References: rod_of_stalking.rod_action

[ RodOfStalkingAction ;	! 62456 / 0xf3f8
    if (second == adamantine_knight) {
        "The knight jumps on the spot (landing loudly).";
    }
    if (second == potted_shrub) {
        potted_shrub.initial = "A blooming shrub, gay with red flowers, is being nursed in a wide round tub under the wall here.";
        "The shrub bursts into bloom, flowering all over in dozens of delicate red moons.";
    }
    if (second == marble_rose) {
        "The marble jerks, as if straining to grow, but falls back dead.";
    }
    if (second == small_thorny_tree) {
        if (parent(fig) ~= nothing) {
            "The tree tried hard, but in the end it couldn't give a fig.";
        }
        move fig to player;
        "The tree strains especially hard, and manages to produce another fig, which ripens and falls... you jump forward and catch the fruit just before it would splatter to earth.";
    }
    if (second == player) {
        "Your hair stands momentarily on end, as if it wants to stalk up out of your head, but happily it decides against.";
    }
    if (second == plane_tree && location == Family_Tree) {
        "The tree shakes and shivers, but thankfully remains intact.";
    }
    if (second == wall_of_thorns_object) {
        "Whoosh!^^The thorn wall grows another twenty feet high, then collapses in on itself, settling back like a beast. It is thicker and nastier than ever.";
    }
    if (second ~= runner_bean_plant) {
        "Nothing obvious happens.";
    }
    if (runner_bean_plant has open) {
        "Nothing further happens.";
    }
    give runner_bean_plant open;
    print "^Warning: something extremely cliched is about to happen. When you think you have composed yourself and can stand it, press ENTER. ", '>';
    array_24021->1 = 0;
    StatusLinePrinter();
    @aread array_24021 parse -> generic_globvar;
    new_line;
    "Suddenly an enormous beanstalk sprouts out of the ground, exactly as per fairy tale, reaching up high into the sky!  You yawn convulsively.";
];

! References: rod_of_infinity.rod_action

[ RodOfInfinityAction t ;	! 63240 / 0xf708
    if (second == adamantine_knight) {
        "Oh, the knight has been nearer the infinite than you could ever take him.";
    }
    if (second == player) {
        "You acquire no especial sense of the infinite.";
    }
    if (location ~= Infinity_Symbol || second ~= lemniscus) {
        "Nothing obvious happens.";
    }
    t = circular_arc.number;
    set_flag_array(30);
    if (t < 9) {
        "You feel the air charge with excitement, and the symbol glows fiercely gold for a moment, but then the power drains away into one of the empty sockets in the arc.";
    }
    if (noun has general) {
        "Nothing happens this time.";
    }
    print "The air charges with excitement, and the symbol glows fiercely gold, then begins to spin, faster and faster into a pearly golden light with bathes you with the flow of pure magic. ";
    if (spherical_opening hasnt general) {
        "But it is still too weak!  You half-hear, half-imagine a whisper of druids...";
    }
    print "Everything becomes a daze and then you find yourself...^";
    give noun general;
    StartMasterGame();
    rtrue;
];

[ StartMasterGame o sib ;	! 63700 / 0xf8d4
    game_section = T_ANCIENT_BRITAIN;
    o = child(player);
    give daisy_chain ~worn;
  .label63713;
    if (o ~= nothing) {
        sib = sibling(o);
        give o ~worn;
        move o to Infinity_Symbol;
        o = sib;
        jump label63713;
    }
    move historical_pamphlet to player;
    PlayerTo(Murky_Cave);
    rtrue;
];

! References: painting_of_Mad_Isaac_Meldrewe.life, Impressionist_painting.life, still_life.life, Greek_frieze2.life, Roman_mosaic.life, bronze_mural.life, painted_writings.life

[ LagachLife i r flag ;	! 63748 / 0xf904
    if (action == ##Order) {
        flag = true;
        if (painting_of_Mad_Isaac_Meldrewe notin White_Hallway || painting_of_Mad_Isaac_Meldrewe has moved) {
            flag = false;
        }
        if (selfobj == painting_of_Mad_Isaac_Meldrewe && flag == false) {
            "A breeze ripples the canvas of the unanchored painting, but that's all.";
        }
        if (verb ~= ##Lagach) {
            jump label64207;
        }
        i = 0;
        if (location == Greek_Frieze1) {
            i = 1;
        }
        if (location == Mosaic) {
            i = 2;
        }
        if (location == Crypt) {
            i = 3;
        }
        if (location == Bohemia) {
            i = 4;
        }
        if (location == Hall_of_Exhibits) {
            i = 5;
        }
        if (location == XIIth_Dynasty_Pyramid) {
            i = 6;
        }
        if (location == White_Hallway) {
            i = 7;
        }
        if (i == 0) {
            jump label64207;
        }
        if (tourist_map_of_Paris has moved) {
            "Nothing happens!  Already the druids' magic fades from the earth, and you cannot help feeling saddened.";
        }
        r = carbolic_soap;
      .label63996;
        if (r hasnt visited || (r == White_Hallway && flag == false)) {
            if (i++ == 8) {
                i = 1;
            }
            if (i == 1) {
                r = Greek_Frieze1;
            }
            if (i == 2) {
                r = Mosaic;
            }
            if (i == 3) {
                r = Crypt;
            }
            if (i == 4) {
                r = Bohemia;
            }
            if (i == 5) {
                r = Hall_of_Exhibits;
            }
            if (i == 6) {
                r = XIIth_Dynasty_Pyramid;
            }
            if (i == 7) {
                r = White_Hallway;
            }
            jump label63996;
        }
        if (r == location) {
            "A swirl of wind almost bowls you over, but nothing else happens.";
        }
        print "A swirl of wind snakes out from ";
        Defart(selfobj);
        print " and whisks you away to...^";
        PlayerTo(r);
        rtrue;
    }
    if (action == ##Ask or ##Answer) {
      .label64207;
        "There is, unsurprisingly, no reply.";
    }
    rfalse;
];

! References: Death_card.after, Fool_card.after, Drowned_Sailor_card.after, Castle.after, Star.after, Eight_of_Wands_card.after, Maiden_card.after, Ace_of_Cups_card.after, Crescent_Moon.after

[ TarotAfter ;	! 64232 / 0xfae8
    if (action == ##Read) {
        if (selfobj.n_to ~= nothing) {
            print "A beautifully realistic picture. ";
        }
        rfalse;
    }
    rfalse;
];

! References: Death_card.parse_name, Fool_card.parse_name, Drowned_Sailor_card.parse_name, Castle.parse_name, Star.parse_name, Eight_of_Wands_card.parse_name, Maiden_card.parse_name, Ace_of_Cups_card.parse_name, Crescent_Moon.parse_name

[ TarotParseName i w ;	! 64276 / 0xfb14
    if (parser_action == ##TheSame) {
        return 65534[?];
    }
  .label64287;
    if (1[?] == 1[?]) {
        w = NextWord();
        if (Refers(selfobj,w) == 1[?]) {
            ++i;
        } else if (w == 'cards') {
            parser_action = ##PluralFound;
            ++i;
        } else {
            return i;
        }
        jump label64287;
    }
    rfalse;
];

! References: Death_card.short, Fool_card.short, Drowned_Sailor_card.short, Castle.short, Star.short, Eight_of_Wands_card.short, Maiden_card.short, Ace_of_Cups_card.short, Crescent_Moon.short

[ TarotShort ;	! 64336 / 0xfb50
    if (listing_together has card && c_style & 4096 == 0) {
        c_style = c_style | (4096 + 8);
        if (c_style & 2 ~= 0) {
            c_style = c_style - 2;
        }
        if (c_style & 1 ~= 0) {
            c_style = c_style - 1;
        }
    }
    rfalse;
];

! References: Meldrewes_History.parse_name, classical_dictionary.parse_name, romantic_novel.parse_name, book_of_Twenties_poetry.parse_name, ancient_prayer_book.parse_name

[ ConsultableParsename ;	! 64400 / 0xfb90
    if (NextWord() == 'books' or 'volumes' or 'tomes') {
        parser_action = ##PluralFound;
        return 1[?];
    }
    --wn;
    return 65535[?];
];

! References: electric_torch.after

[ TorchAfter ;	! 64428 / 0xfbac
    if (action == ##Receive) {
        if (child(selfobj) ~= nothing) {
            "There's a battery in already.";
        }
        if (noun hasnt battery_flag) {
            "Not surprisingly, it won't fit in the battery compartment.";
        }
        rfalse;
    }
    if (action == ##SwitchOn or ##SwitchOff) {
        "There's no switch, just a battery compartment.";
    }
    rfalse;
];

! References: electric_torch.before

[ TorchBefore bat i ;	! 64544 / 0xfc20
    if (action == ##Open) {
        if (selfobj has light) {
            give selfobj ~light;
            "The torch goes out as you open the battery compartment.";
        }
        "You open the battery compartment of the torch.";
    }
    if (action == ##Close) {
        print "You close the battery compartment of the torch";
        bat = child(selfobj);
        if (bat == obj105_nasty_looking_red_battery) {
            if (game_section == T_MODERN) {
                deadflag = FAILED;
                ", and it explodes with light, becomes hot enough to melt, falls to the floor, catches fire and burns down most of the attic...^^It may be some consolation that since you spend your holiday in the local hospital burns unit, you are never inconvenienced much by not finding the map.";
            } else {
                remove electric_torch;
                ", and it explodes with light, becomes hot enough to melt, falls from your grasp and perishes away to nothing.";
            }
        }
        if (bat == new_battery) {
            Achieved(SCORE_TORCH);
        }
        if (bat == old_smudged_battery or new_battery) {
            i = bat.number;
            if (i == 0) {
                ", but the battery must be dead because nothing happens.";
            }
            give selfobj light;
            if (i > 5) {
                ", and it lights up brightly.";
            }
            ", and it lights up feebly.";
        }
        ".";
    }
    rfalse;
];

! References: electric_torch.daemon

[ TorchTimer o n ;	! 65012 / 0xfdf4
    if (selfobj hasnt on) {
        rfalse;
    }
    o = child(selfobj);
    if (o == nothing) {
        rfalse;
    }
    n = o.number - 1;
    if (n < 200) {
        o.number = n;
    }
    if (n == 2) {
        print "^The torch flickers ominously.^";
    }
    if (n == 0) {
        print "^The torch finally dies out.^";
        give electric_torch ~light;
        set_flag_array(8);
    }
    rfalse;
];

! References: chocolate_biscuit.before

[ BiscuitBefore ;	! 65108 / 0xfe54
    if (action == ##Eat) {
        Achieved(SCORE_BISCUIT);
        rfalse;
    }
    rfalse;
];

! References: hinged_trapdoor.after

[ TrapdoorAfter ;	! 65124 / 0xfe64
    if (action == ##LookUnder) {
        if (antique_jewellery_box hasnt concealed) {
            rfalse;
        }
        give antique_jewellery_box ~concealed;
        move antique_jewellery_box to Attic;
        "You discover a lady's jewellery box under the trapdoor!";
    }
    rfalse;
];

! References: hinged_trapdoor.before

[ TrapdoorBefore ;	! 65184 / 0xfea0
    if (action == ##Open) {
        give selfobj light;
        rfalse;
    }
    if (action == ##Close) {
        give selfobj ~light;
        if (antique_jewellery_box has concealed) {
            give antique_jewellery_box ~concealed;
            move antique_jewellery_box to Attic;
            "You close the trapdoor, surprised to see that something shiny was obscured by it.";
        }
        "You close the trapdoor once more. No more jewellery boxes though.";
    }
    rfalse;
];

! References: teachests.after

[ TeachestsAfter ;	! 65316 / 0xff24
    if (action == ##Search) {
        print "That was the first place you tried, hours and hours ago now";
        if (Meldrewes_History has concealed) {
            print ", and there's nothing there but that boring old book. You pick it up anyway, bored as you are";
            set_flag_array(33);
            give Meldrewes_History ~concealed;
            move Meldrewes_History to player;
        }
        ".";
    }
    rfalse;
];

! References: Meldrewes_History.after

[ HistoryAfter w ;	! 65440 / 0xffa0
    if (action == ##Consult) {
        wn = consult_from;
        w = NextWord();
        if (w == 'mad' or 'sir' or 'honourable') {
            w = NextWord();
        }
        generic_globvar = w;
        if (generic_globvar == 35760['me'?] or 36156['myself'?] or 38811['self'?]) {
            set_flag_array(48);
            "Perhaps you may one day earn a place in vol. III.";
        }
        if (generic_globvar == 37083['peter'?]) {
            "Modestly, the author (died 1940 or so?) missed himself out.";
        }
        if (generic_globvar == 34887['jemima'?]) {
            "She's far too recent to be included.";
        }
        if (generic_globvar == 34842['isaac'?]) {
            "Mad Isaac (1705-1792) went in for mystic experiments of all kinds, and was a noted antiquarian. He believed that the Meldrew family had an ancestral curse, dooming each member to undertake a futile quest. The only way to break the curse, he thought, was for one of them to actually succeed... unfortunately he died in peculiar circumstances before finding out how.^^Then again, he also believed that King Arthur's wizard Merlin was buried not in a Tintagel cave, as is usually claimed, but somewhere in the back garden (near where the motorway is now), and that the moon is a giant pair of black and white discs towed through the night sky by a team of angels.";
        }
        if (generic_globvar == 32646['ebenezer'?]) {
            "It seems Ebenezer (1846-1908), the younger of a pair of twins, threw up a promising career in the East India Company one day, took a packet steamer to Cape Colony and simply marched off into the bush on a quest to find a legendary river. His maps were used for several years after, and a province was named after him for a while, but the locals call it something else now.";
        }
        if (generic_globvar == 38217['roger'?]) {
            "Roger (1846-1913), the elder of a pair of twins, was very Victorian indeed, especially in his disapproval of his beautiful young wife's literary career. He thought her romances so immoral that he refused to allow the family name to appear on them. A prominent local vestryman, his own writing was confined to a great many monographs on the problems of municipal drainage, but he died before his grand National Sewerage Plan was complete.";
        }
        if (generic_globvar == 31044['capability'?] or 41331['willard'?]) {
            "~Capability~ Meldrew (1761-1817) became a mildly celebrated landscape gardener, starting a brief fashion for crypts and memorials as garden ornaments (he claimed it was closer to nature). Very little of his work now survives. His real name, incidentally, was Willard.";
        }
        if (generic_globvar == 34275['henri'?]) {
            "Very little is known about Henri, who lived at some time in the fifteenth century. As a young man he fought at Agincourt, and seems to have been some kind of combat engineer. The story goes that he acquired his nickname, The Black Post, from a joke made by the King when he was standing up to his waist in a ditch. He must have been proud of it because his coat of arms bears his name written down the left hand side, and Black Post down the right.^^In his later years he became morbidly possessed, and (according to legend) spent his declining years working on his own tomb, which he insisted would be of celestial importance.";
        }
        if (generic_globvar == 34230['helene'?]) {
            "Helene Meldrew (1902-) is a noted painter and sculptress. Her relations with the family were broken off in the 20s when she married Anton and ran off to Paris to study art, but she has recently returned to the House, in search (as she puts it) of ~the perfect blue, the blue of the sky, the blue of water~. We wish her well.";
        }
        if (generic_globvar == 29964['anton'?] or 39351['smyslov'?]) {
            "Anton Smyslov shouldn't really be in the book, even if he did marry Helene, but there is a brief passage, since he was so famous - he was a chess grandmaster, and won the Paris Open five years running in the 1930s. His speciality was bold sacrificial attacks, but he was also notorious for eating blueberry yoghurt at the board.";
        }
        if (generic_globvar == 29784['alison'?]) {
            "Under the pseudonym Marie Swelldon, your ancestress Alison (1871-1930) wrote several mildly successful romances. She obsessively collected lucky charms, and advertised in newspapers for double-headed coins and the like (although she never traced a rumoured find of a five-leafed clover, somewhere in County Donegal).^^In order to write in tranquillity and to avoid her husband, it was she who installed the fake wall at the far south end of the attic east wing, and each afternoon she would sneak upstairs to push it aside.";
        }
        if (generic_globvar == 34923['joshua'?]) {
            "Oh dear, the deeply regrettable Sir Joshua Meldrewe (1710-1776). Member of the Dilletanti Society and the Hell-Fire Club, and a politician (chancellor of the exchequer 1762-3; ~probably the least competent minister ever to hold that office~ - Oxford History of England, vol. xii).^^", "His father disinherited him for wildly excessive living (he almost invariably wore jewelled buttons worth at least a thousand pounds) and for marrying a lady of easy virtue while on the run from a prison in France, where he was sentenced to be beheaded. In order to stop his sister getting the fortune, he went back to Italy and advertised for a pregnant bride to provide a male heir. This nefarious plot was foiled when he choked to death on a chicken-bone.^^It is said that he stole the money anyway near the end, and certainly some gold went missing. (He also managed to get the family stripped of its baronetcy by cheating at piquet with the Prince of Wales.)";
        }
        if (generic_globvar == 34131['hartley'?]) {
            "Your distant great-uncle Hartley was a tiresomely enthusiastic amateur Egyptologist who, every Christmas, used to sit you on his knee and drone on about trenches and writings and the fellaheen. It was all a bit of a fraud, you now discover, since he only actually went to Egypt once - there was such a scandal about his refusal to donate his best find to the British Museum that he was never allowed to excavate again, though he spent years writing in vain to the Egyptian government.";
        }
        if (generic_globvar == 33681['gerard'?]) {
            "Roger's eldest son Gerard (1898-1916) was killed in the Battle of the Somme. His mother, ~Marie Swelldon~, gave up writing afterwards.";
        }
        if (generic_globvar == 30234['austin'?]) {
            "Austin's quite venerable for a cat, but not that old.";
        }
        if (generic_globvar == 40512['tobias'?]) {
            "Tobias Meldrew (1801-1870) was Professor of Theology at Christminster, 1850-66. He set himself the task of proving the existence of God from first principles, a task which he announced in 1860 that he had accomplished with the aid of ten thousand intermediate lemmas. The derision which greeted his attempts to publish the mammoth work eventually drove him insane, and he spent the last four years of his life in the madhouse.";
        }
        "Annoyingly there's no index (there was going to be a consolidated one in vol. I) and you can't find what you want.";
        rfalse;
    }
    rfalse;
];

! References: House.before

[ HouseBefore ;	! 69292 / 0x10eac
    if (tourist_map_of_Paris in player || (tourist_map_of_Paris in canvas_rucksack && canvas_rucksack in player)) {
        deadflag = WON;
        "You have succeeded in shaking off the Curse of the Meldrews: for the first time in sixty generations, a Meldrew has found the useless object he was doomed to seek!  Unfortunately on the way to the airport you realise that you left the map on the kitchen table in all the rush, but never mind, you're on holiday now.";
    }
    deadflag = FAILED;
    "Yes, probably just as well to give up looking, and heaven knows there's enough packing to do, what with the rest of the family in uproar. Oh well.";
];

! References: Servants_Room.after

[ ServantsRoomAfter ;	! 69588 / 0x10fd4
    if (action == ##Sleep) {
        if (carbolic_soap hasnt concealed) {
            "Racked with guilt over your bad language, you are unable to nod off.";
        }
        if (player notin servants_bed) {
            rfalse;
        }
        if (Austin in location) {
            "Austin leaps up onto the bed, jumps around for a bit, and then falls back onto the floor. You are unable to get any sleep.";
        }
        if (servants_bed has general) {
            "You doze awhile, but that's all.";
        }
        give servants_bed general;
        print "You sleep unexpectedly deeply, but just as you think you are starting to wake up, you experience a sudden...^";
        routine124836();
        rtrue;
    }
    rfalse;
];

! References: classical_dictionary.after

[ DictionaryAfter w ;	! 69840 / 0x110d0
    if (action == ##Consult) {
        wn = consult_from;
        w = NextWord();
        if (Homer has general && Homer.number < 3 && Homer in location) {
            routine109044();
            print "~Well, if you're going to cheat, forget it,~ says Homer loudly as he falls asleep.^^";
        }
        if (w == 'galita') {
            "Minor deity of tombs, reincarnated from a fly who flew into setting amber.";
        }
        if (w == 'menelaus') {
            "General in Trojan War, and brother of Agamemnon.";
        }
        if (w == 'agamemnon') {
            "General in Trojan War, and brother of Menelaus.";
        }
        if (w == 'ares') {
            "Greek god of war.";
        }
        if (w == 'chlamys') {
            "An emperor's (rectangular) cloak.";
        }
        if (w == 'husbandry') {
            "Not this dictionary!";
        }
        if (w == 'hades') {
            "Underworld of spirits.";
        }
        if (w == 'adamantine') {
            "Hardest stone known to the ancients.";
        }
        if (w == 'iliad' or 'odyssey') {
            "Epic by Homer.";
        }
        if (w == 'helicon') {
            "Mythical mountain of poets and muses.";
        }
        if (w == 'hephaestus') {
            "Greek god of blacksmiths and master of metals.";
        }
        if (w == 'pan') {
            "Greek god of pastures and shepherds; player of the syrinx, or pipes.";
        }
        if (w == 'demeter') {
            "Greek goddess of plenty.";
        }
        if (w == 'poseidon') {
            "Greek god of the sea, and of horses.";
        }
        if (w == 'apollo' or 'loxias') {
            "Greek god of words, music and poetry.";
        }
        if (w == 'zeus') {
            "Greek ruler of the gods.";
        }
        if (w == 'leda') {
            "Mortal woman seduced by Zeus, who appeared to her in the form of a swan.";
        }
        if (w == 'hera') {
            "Jealous wife of Zeus.";
        }
        if (w == 'aphrodite') {
            "Greek goddess of beauty.";
        }
        if (w == 'athene') {
            "Greek goddess of wisdom.";
        }
        if (w == 'diana') {
            "Goddess of hunting, the underworld (with Pluto) and the moon.";
        }
        if (w == 'selenae') {
            "Mythical island mountain home of Diana.";
        }
        if (w == 'sosostris') {
            "Mythical pharoah of Egypt, after whom a curious cult rose: sometimes confused with Alexander the Great.";
        }
        if (w == 'pluto') {
            "Canine Walt Disney character, after whom the planet is named.";
        }
        if (w == 'dionysus') {
            "Greek god of wine, and revelry.";
        }
        if (w == 'furies' or 'curses' or 'eumenides') {
            "Eternally pursuing Greek goddesses, they enforced divine rules by punishing the families of miscreants through all time.";
        }
        if (w == 'omphalos') {
            "Fabled to be the stone at the centre (literally ~navel~) of the world.";
        }
        if (w == 'oracle' or 'pythian') {
            "Priestess of Apollo: her predictions were legendary for their accuracy, and also their difficulty to interpret.";
        }
        if (w == 'pharos') {
            "Lighthouse-tower. The great one at Alexandria was one of the Seven Wonders of the World.";
        }
        if (w == 'aeschylus') {
            "The first great tragic playwright (525 - c.456 BC).";
        }
        if (w == 'kraken') {
            "Legendary sea-monster of Poseidon (though the word derives from the Norwegian - not a lot of people know that).";
        }
        if (w == 'andromeda') {
            "Maiden sacrificed to a sea-monster, according to myth eventually saved by Perseus.";
        }
        if (w == 'perseus') {
            "Greek hero and slayer of monsters.";
        }
        if (w == 'syrinx') {
            "Pan-pipes: reed-cut.";
        }
        if (w == 'homer') {
            "Earliest poet of the Greek tradition, legendarily blind: nothing is known about him, except that he (supposedly) wrote the ~Iliad~ and the ~Odyssey~.";
        }
        if (w == 'ekmek' or 'eraina') {
            "The Ekmek Special is a delicacy still served to this day by the Eraina Taverna, Free School Lane, Cambridge, England. Much prized by itinerant mathematicians.";
        }
        if (w == 'callimachus') {
            "Cataloguer of the Alexandrian library: most famous of all the wittily brief epigrammatic poets.";
        }
        if (w == 'apollonius') {
            "Librarian, mathematician, epic poet, politician.";
        }
        if (w == 'arthur') {
            "Half-mythical High King of the Britons.";
        }
        if (w == 'merlin' or 'merlyn') {
            "Half-mythical wizard to the court of King Arthur.";
        }
        if (w == 'alexandria') {
            "City on the Nile Delta founded by Alexander the Great.";
        }
        if (w == 'alexander') {
            "Macedonian who conquered the known world in his twenties.";
        }
        if (w == 'ptolemy') {
            "General of Alexander the Great, governed and later inherited Egypt.";
        }
        if (w == 'odysseus' or 'ulysses') {
            "Wasn't he a sailor?";
        }
        "Sorry, there's nothing on that.";
    }
    rfalse;
];

! References: bird_whistle.after

[ WhistleAfter ;	! 71948 / 0x1190c
    if (action == ##Blow) {
        if (gas_mask has worn) {
            "With the gas mask on?";
        }
        print "Fweep!  Fweep!^";
        if (Austin in location) {
            print "^Austin is startled, but too lazy to look up.^";
        }
        if (location == Hedgery) {
            "^The sparrows swoop down and around you, but rapidly lose interest.";
        }
        if (location == Summer_House) {
            if (flock_of_sparrows has general) {
                "^But the sparrows cannot hear.";
            }
            if (gold_watch_on_a_chain has moved) {
                "^But the sparrows are wise to that one.";
            }
            give gold_watch_on_a_chain moved;
            give flock_of_sparrows general;
            remove irate_squirrel_friend;
            Achieved(SCORE_WATCH);
            "^The sparrows swoop down onto the roof, battering against the glass. In the process the gold watch comes loose, and falls to the ground with a disconcerting thud.^^It just misses the squirrel, who bolts away, startled.^^The sudden motion once more disturbs the flighty sparrows, who take to the skies. You feel rather deserted all of a sudden.";
        }
        if (location == Cliffs or Cave_Mouth) {
            "^The sacred falcon of Apollo wheels high in the sky over the cave mouth, but then flies away.";
        }
        if (location == Necropolis && unexciting_tombstone in nothing) {
            move cloak_of_many_colours to Necropolis;
            move unexciting_tombstone to Necropolis;
            Necropolis.d_to = unexciting_tombstone;
            "^The birds of prey swoop, startled, down to an unexciting tombstone which you hadn't noticed before; but after a moment they relax and slip away into the darkness.";
        }
        if (location == Hollow && corn_crake in Hollow) {
            "Although seemingly distractable, the corn crake must be stone deaf. (You vaguely recall reading somewhere that corn crakes are the noisiest birds in Ireland, famous for keeping farm-hands awake at night.)";
        }
        rtrue;
    }
    rfalse;
];

! References: gift_wrapped_parcel.after

[ ParcelAfter ;	! 72724 / 0x11c14
    if (action == ##Open) {
        remove gift_wrapped_parcel;
        move postcard_of_the_Champs_Elysees to player;
        move box_of_chocolates to player;
        move wrapping_paper to location;
        "You tear open the parcel to find a box of chocolates and a card.";
    }
    rfalse;
];

! References: postcard_of_the_Champs_Elysees.before

[ PostcardBefore ;	! 72788 / 0x11c54
    if (action == ##Read && location == Dark_Room && Dark_Room has light) {
        Achieved(SCORE_HAMBURG);
        set_flag_array(31);
        "^No... wait. The eerie lamp-light is bringing out a message in invisible ink:^^   Hamburg 1420^^   Ticket 7.-^^The seven is crossed through in continental fashion.";
    }
    rfalse;
];

! References: medicine_bottle.short

[ MedicineShort ;	! 72936 / 0x11ce8
    if (selfobj hasnt locked) {
        print "cracked medicine bottle";
    } else {
        print "guaranteed-unbreakable medicine bottle with a child-proof lock";
    }
    rtrue;
];

! References: medicine_bottle.after

[ MedicineAfter ;	! 73008 / 0x11d30
    if (action == ##Attack) {
        "You become extremely violent in your attempt, but the glass resists all attacks. Whatever would it take to break the dratted thing?";
    }
    if (action == ##Open) {
        if (selfobj hasnt locked) {
            rfalse;
        }
        "You try absolutely everything. Pushing the top down, turning it, pulling it, putting it on the floor and jumping up and down on it, everything. It is resolutely adult-proof. Whatever would it take to break the dratted thing?";
    }
    if (action == ##Receive) {
        if (selfobj has open && noun ~= red_tablet) {
            "The neck is too narrow to fit anything but the pill.";
        }
        rfalse;
    }
    rfalse;
];

! References: red_tablet.before

[ TabletBefore ;	! 73296 / 0x11e50
    if (action == ##Eat) {
        give player ~general;
        tablet_eaten = true;
        "It tastes alarmingly of chocolate.";
    }
    rfalse;
];

! References: Over_the_East_Wing.initial

[ OverEastWingInitial ;	! 73336 / 0x11e78
    if (Austin in selfobj) {
        StartDaemon(Austin);
    }
    rfalse;
];

! References: Austin.after

[ AustinAfter ;	! 73352 / 0x11e88
    if (action == ##Clean or ##Touch or ##Squeeze) {
        "Austin curls about your foot implacably.";
    }
    if (action == ##Take) {
        "Austin sidles out of reach resentfully, then belches.";
    }
    if (action == ##Pull) {
        "Austin hisses and will not be pulled by the tail.";
    }
    if (action == ##Push) {
        "Perhaps you should say which way to push Austin.";
    }
    if (action == ##PushDir) {
        if (location == Attic && inp2 == 2[?] or 4[e_obj?] or 3[s_obj?]) {
            ! no code
        } else if (location == Old_Winery && inp2 == 5[w_obj?] or 3[s_obj?]) {
            ! no code
        } else if (location == Conservatory && inp2 == 5[w_obj?] or 4[e_obj?]) {
            ! no code
        } else if (location == Old_Furniture && inp2 == 2[?] or 7[se_obj?]) {
            ! no code
        } else if (location == Servants_Room && inp2 == 5[w_obj?]) {
            ! no code
        } else if (location == Over_the_East_Wing && inp2 == 8[nw_obj?] or 3[s_obj?] or 5[w_obj?]) {
            ! no code
        } else if (location == Over_the_East_Wing or Dark_Room && inp2 == 4[e_obj?]) {
            ! no code
        } else if (location == East_Annexe && inp2 == 5[w_obj?]) {
            ! no code
        } else if (location == Disused_Observatory && inp2 == 2[?] or 3[s_obj?]) {
            ! no code
        } else if (location == Souvenirs_Room && inp2 == 2[?]) {
            ! no code
        } else {
            "Austin refuses to go that way.";
        }
        routine166092();
        give selfobj moved;
        rtrue;
    }
    rfalse;
];

! References: Austin.before

[ AustinBefore ;	! 73696 / 0x11fe0
    if (action == ##PushDir) {
        "Austin reluctantly accompanies you.";
    }
    rfalse;
];

! References: Austin.life

[ AustinLife ;	! 73728 / 0x12000
    if (action == ##Attack) {
        "It is so pathetically easy to kick Austin that you never quite have the heart. Thus he outwits you again.";
    }
    if (action == ##Order or ##Answer) {
        "I can see you've never had a cat.";
    }
    if (action == ##Ask) {
        "Austin belches splendidly by way of reply.";
    }
    if (action == ##Kiss) {
        "Austin (just) tolerates this show of affection.";
    }
    if (action == ##Give or ##Show) {
        if (noun == chicken_wishbone) {
            GoodTry();
            "Some cats do like the smell of chicken bones, but Austin doesn't.";
        }
        if (noun == robot_mouse) {
            move robot_mouse to location;
            "Austin claws it to the ground, captiously.";
        }
        if (noun has edible) {
            "For once, Austin is not really hungry.";
        }
        print "Austin is unimpressed with ";
        Defart(noun);
        ".";
    }
    rfalse;
];

! References: Austin.daemon

[ AustinDemon i ;	! 74068 / 0x12154
    if (selfobj has moved) {
        give selfobj ~moved;
        rfalse;
    }
    if (game_section ~= T_MODERN or T_ALEXANDRIA) {
        rfalse;
    }
    if (game_section == T_ALEXANDRIA) {
        if (Austin notin location) {
            rfalse;
        }
        print "^Austin ";
        i = random(6);
        if (i == 1) {
            print "preens himself";
        }
        if (i == 2) {
            print "wriggles";
        }
        if (i == 3) {
            print "springs about";
        }
        if (i == 4) {
            print "frisks";
        }
        if (i == 5) {
            print "purrs";
        }
        if (i == 6) {
            print "hisses";
        }
        i = random(3);
        if (i == 1) {
            " contentedly.";
        }
        if (i == 2) {
            " happily.";
        }
        " cheerfully.";
    }
    AustinMovements(false);
    rfalse;
];

[ AustinMovements to_current env i newroom ;	! 74232 / 0x121f8
    env = parent(Austin);
    newroom = invalidObj65535;
    if (to_current == true) {
        env = location;
    } else {
        if (env == Potting_Room) {
            move Austin to Conservatory;
            if (location == Potting_Room) {
                "^Jemima catches sight of Austin, and without warning jumps on the spot, startling him. He springs away, hissing.";
            }
            if (location == Conservatory) {
                "^Austin springs in from the potting room like a scalded cat, but hastily rearranges himself to his usual ~cool slob~ demeanour.";
            }
            rfalse;
        }
        i = random(10);
        if (i > 8) {
            ! no code
        } else {
            if (env ~= location) {
                rfalse;
            }
            if (robot_mouse in location) {
                "^Austin plays with the robot mouse, kicking it wildly across the floorboards. It beeps piteously, hoping to be rescued.";
            }
            if (location == East_Annexe && random(2) == 1) {
                "^Austin scuffles with the insulation rolls, as if trying to bury something.";
            }
            if (location == Dark_Room && random(2) == 1) {
                "^Austin jumps up at the cord, but falls back down again, growling.";
            }
            if (i == 1) {
                "^Austin yawns.";
            }
            if (i == 2) {
                "^Austin rolls over on his back and stretches.";
            }
            if (i == 3) {
                "^Austin looks ineffable again.";
            }
            if (i == 4) {
                "^Austin purrs and licks one of his paws.";
            }
            rfalse;
        }
        if (env == House && hinged_trapdoor hasnt open) {
            if (location == Attic) {
                "^There is a faint scratching noise at the trapdoor.";
            }
            rfalse;
        }
        if (env == House) {
            move Austin to Attic;
            if (location == Attic) {
                "^Austin, your ginger cat, jumps up through the trap door.";
            }
        }
        if (env == Attic && hinged_trapdoor has open && i == 10) {
            move Austin to House;
            if (location == Attic) {
                "^Austin, bored again, disappears through the trap door.";
            }
        }
    }
    if (env == Attic) {
        i = random(3);
        if (i == 1) {
            newroom = Old_Furniture;
        }
        if (i == 2) {
            newroom = Old_Winery;
        }
        if (i == 3) {
            newroom = Servants_Room;
        }
    }
    if (env == Servants_Room) {
        newroom = Attic;
    }
    if (env == Old_Furniture) {
        if (i == 9) {
            newroom = Attic;
        } else {
            newroom = Over_the_East_Wing;
        }
    }
    if (env == Over_the_East_Wing) {
        i = random(4);
        if (i == 1) {
            newroom = Old_Furniture;
        }
        if (i == 2) {
            newroom = East_Annexe;
        }
        if (i == 3) {
            newroom = Dark_Room;
        }
        if (i == 4) {
            newroom = Disused_Observatory;
        }
    }
    if (env == East_Annexe) {
        newroom = Over_the_East_Wing;
    }
    if (env == Dark_Room) {
        newroom = Over_the_East_Wing;
    }
    if (env == Disused_Observatory) {
        if (slide_projector has on && ball_polished ~= false && to_current == false) {
            if (location == Disused_Observatory) {
                "^Austin seems fascinated by the beam of light.";
            }
            rfalse;
        }
        i = random(3);
        if (i == 1) {
            newroom = Over_the_East_Wing;
        }
        if (i == 2) {
            newroom = Library_Storage;
        }
        if (i == 3) {
            newroom = Souvenirs_Room;
        }
    }
    if (env == Library_Storage) {
        newroom = Disused_Observatory;
    }
    if (env == Souvenirs_Room) {
        if (slide_projector has on && to_current == false) {
            if (location == Souvenirs_Room) {
                "^Austin stares curiously at the slideshow.";
            }
            rfalse;
        }
        newroom = Disused_Observatory;
    }
    if (env == Old_Winery) {
        i = random(2);
        if (i == 1) {
            newroom = Attic;
        }
        if (i == 2) {
            newroom = Conservatory;
        }
    }
    if (env == Conservatory) {
        i = random(2);
        if (i == 1) {
            newroom = Potting_Room;
        }
        if (i == 2) {
            newroom = Old_Winery;
        }
    }
    if (newroom == invalidObj65535) {
        rfalse;
    }
    move Austin to newroom;
    if (location == env or newroom) {
        if (to_current == false) {
            print "^Austin ";
            i = random(10);
            if (i == 1) {
                print "sidles";
            }
            if (i == 2) {
                print "ambles";
            }
            if (i == 3) {
                print "strolls";
            }
            if (i == 4) {
                print "runs";
            }
            if (i == 5) {
                print "oozes";
            }
            if (i == 6) {
                print "scurries";
            }
            if (i == 7) {
                print "tiptoes";
            }
            if (i == 8) {
                print "leaps";
            }
            if (i == 9) {
                print "crawls";
            }
            if (i == 10) {
                print "rolls";
            }
            if (location == env) {
                print " away to ";
                i = newroom;
            } else {
                print " in from ";
                i = env;
            }
        } else {
            print "to ";
            i = newroom;
        }
        print "the ";
        if (i == 35) {
            "attic.";
        }
        if (i == 47) {
            "furniture store.";
        }
        if (i == 103) {
            "winery.";
        }
        if (i == 42) {
            "servant's bedroom.";
        }
        if (i == 107) {
            "conservatory.";
        }
        if (i == 112) {
            "potting room.";
        }
        if (i == 57) {
            "east landing.";
        }
        if (i == 74) {
            "annexe.";
        }
        if (i == 59) {
            "dark room.";
        }
        if (i == 64) {
            "observatory.";
        }
        if (i == 71) {
            "souvenirs room.";
        }
        if (i == 67) {
            "book store.";
        }
        "cold.";
    }
    rtrue;
];

! References: Dark_Room.before

[ DarkRoomBefore ;	! 75660 / 0x1278c
    if (action == ##Look) {
        if (selfobj has light) {
            print "^The room is filled with an eerie, reddish light. You feel gloomy and can't help thinking about aviation accident statistics.^";
        }
        rfalse;
    }
    rfalse;
];

! References: hanging_cord.after

[ HangingCordAfter ;	! 75752 / 0x127e8
    if (action == ##Pull) {
        print "Click!  ";
        if (Dark_Room has light) {
            give Dark_Room ~light;
            remove red_lamp;
            "The lamp goes out.";
        }
        give Dark_Room light;
        move red_lamp to Dark_Room;
        "A developing lamp comes on, emitting an eerie red light.";
    }
    rfalse;
];

! References: photographers_flash.after

[ FlashAFter ;	! 75840 / 0x12840
    if (action == ##Receive) {
        generic_globvar = 0;
        if (child(selfobj) ~= nothing) {
          .label75855;
            ++generic_globvar;
            @get_sibling SP -> SP ?label75855;
        }
        @add SP generic_globvar -> SP;
        @je SP 2[?] ?~label75890;
        "The flash is full already.";
      .label75890;
        if (noun == timer_detonator) {
            rfalse;
        }
        if (noun hasnt battery_flag) {
            "Only batteries and timers will fit in.";
        }
        if (child(selfobj) has battery_flag) {
            "There is already a battery inside, and there's only room now for a timer.";
        }
        rfalse;
    }
    rfalse;
];

! References: Disused_Observatory.before

[ ObservatoryBefore ;	! 75984 / 0x128d0
    if (action == ##Look) {
        if (slide_projector hasnt on || ball_polished == false) {
            rfalse;
        }
        print "^A beam of white light runs into the room from the slide projector to the south, and hits the ";
        if (solid_glass_ball hasnt general) {
            "opaque glass ball.";
        }
        print "glass ball, which ";
        ObservatoryDiffraction();
        rtrue;
    }
    rfalse;
];

[ ObservatoryDiffraction card ;	! 76092 / 0x1293c
    card = child(slide_projector);
    if (card == nothing) {
        "diffracts it into a beautiful spectrum across the ceiling.";
    }
    if (card == Eight_of_Wands_card) {
        "throws it into a straight rod of white light across one wall.";
    }
    if (card == Castle) {
        "spins it about wildly, as if it were a strobe light at a discotheque.";
    }
    if (card == Star) {
        "amplifies it into a powerful yellow searchlight which slowly turns about the room.";
    }
    if (card == Crescent_Moon) {
        "throws it in a crescent against one wall.";
    }
    print "somehow bends it so that it strikes the mural at the sign of ";
    if (card == miniature) {
        "Scorpio.";
    }
    if (card == Maiden_card) {
        "Virgo.";
    }
    if (card == Ace_of_Cups_card) {
        "Aquarius.";
    }
    if (card == Death_card) {
        "Cancer.";
    }
    if (card == Drowned_Sailor_card) {
        "Pisces.";
    }
    if (card == Fool_card) {
        print "Capricorn.^";
        TriggerAlert();
        Achieved(SCORE_SMOKE);
        rtrue;
    }
    if (card == charcoal_sketch) {
        "Leo.";
    }
    rtrue;
];

[ TriggerAlert ;	! 76480 / 0x12ac0
    if (fire_escape in Dead_End) {
        rfalse;
    }
    Dead_End.e_to = fire_escape;
    Dead_End.d_to = fire_escape;
    move fire_escape to Dead_End;
    Beside_the_Drive.u_to = Dead_End;
    Beside_the_Drive.w_to = Dead_End;
    give Dead_End light;
    "^Your footfall causes the crystal ball to wobble fractionally, just enough for the beam of light to cross the smoke detector. Click! and then some electronic bleeping. Little servo motors fire lethargically into life, then collapse in exhaustion. The alarm soon runs down to a tiny drone, then silence.^^But there's quite a loud report from off to the east somewhere.";
];

! References: solid_glass_ball.after

[ GlassBallAfter i ;	! 76752 / 0x12bd0
    if (action == ##Clean) {
        give selfobj general;
        if (ball_polished == true && slide_projector has on) {
            print "You polish the ball to a nice shine, and get out of the way of the beam. Now the glass ball ";
            ObservatoryDiffraction();
            rtrue;
        }
        "You polish the ball to a nice shine.";
    }
    if (action == ##Read or ##Search) {
        if (selfobj hasnt general) {
            "The ball is scratched and misted up.";
        }
        set_flag_array(32);
        i = random(12);
        print "In the ball mists swirl, then part to show ";
        if (i == 1) {
            "a reflection of your face.";
        }
        if (i == 2) {
            "a dizzying aerial view of Meldrew Hall gardens.";
        }
        if (i == 3) {
            "confused pictures of a tree being planted.";
        }
        if (i == 4) {
            "an image of a typist, home from work and wandering about her bedsit room.";
        }
        if (i == 5) {
            "a dark picture of a museum display case.";
        }
        if (i == 6) {
            "an Old Master painting, perhaps a Watteau, of a scene from classical mythology.";
        }
        if (i == 7) {
            "an oddly-angled view of a Roman villa half in ruins.";
        }
        if (i == 8) {
            "a flickery view of faces round a camp fire.";
        }
        if (i == 9) {
            "a dark, spooky view of a crypt.";
        }
        if (i == 10) {
            "a dreamy, enclosed view of somewhere half-familiar.";
        }
        if (i == 11) {
            "a sketch of a great marble palace.";
        }
        if (i == 12) {
            "a vision of English countryside.";
        }
        rfalse;
    }
    rfalse;
];

! References: water_pipe.after

[ WaterPipeAfter ;	! 77352 / 0x12e28
    if (action == ##TurnWith) {
        if (second ~= steel_wrench) {
            CDefart(second);
            " proves inadequate as a plumbing tool.";
        }
        R_Process(##Turn,selfobj);
        rtrue;
    }
    if (action == ##Repair or ##Turn) {
        if (steel_wrench has general) {
            "The joint is fairly safe already.";
        }
        if (steel_wrench notin player) {
            if (old_gardeners__gloves in player && old_gardeners__gloves has worn) {
                "Even with gloves on you are unable to tighten the joint without some sort of tool.";
            }
            "With your bare hands, you are unable to tighten the joint.";
        }
        give steel_wrench general;
        Achieved(SCORE_PLUMBING);
        give book_of_Twenties_poetry ~concealed;
        give book_of_Twenties_poetry moved;
        give romantic_novel ~concealed;
        give romantic_novel moved;
        "You tighten the joint with the wrench, just enough for the books to fall away without a gushing explosion of water.";
    }
    rfalse;
];

! References: romantic_novel.after

[ RomanticNovelAfter ;	! 77636 / 0x12f44
    if (action == ##Take) {
        if (steel_wrench hasnt general) {
            routine77984();
            rtrue;
        }
        rfalse;
    }
    if (action == ##Read) {
        if (steel_wrench hasnt general) {
            "You can't read it while it's holding the pipe up.";
        }
        set_flag_array(35);
        rfalse;
    }
    rfalse;
];

! References: book_of_Twenties_poetry.after

[ PoetryAfter ;	! 77704 / 0x12f88
    if (action == ##Take) {
        if (steel_wrench hasnt general) {
            routine77984();
            rtrue;
        }
        rfalse;
    }
    if (action == ##Read) {
        if (steel_wrench hasnt general) {
            "You can't read it while it's holding the pipe up.";
        }
        if (location == thedark) {
            "1920s poetry may be literarily enlightening, but not literally. It is, in fact, too dark to make out the print.";
        }
        if (location == Lighthouse) {
            "The glare of the sun off the ocean is too bright to make out the words without giving you a headache.";
        }
        print "Publishers talk a lot of nonsense about readers being transported away by books, but somehow you have arrived in the...^";
        move book_of_Twenties_poetry to location;
        PlayerTo(Unreal_City);
        rtrue;
    }
    rfalse;
];

[ routine77984 ;	! 77984 / 0x130a0
    deadflag = FAILED;
    "As you pull the book away, the pipe bursts and sprays water everywhere, drenching you, rendering the book unreadable, leaking through the ceiling into the bedrooms below and causing an enormous furore. You are obliged to spend the rest of the afternoon getting a plumber at short notice.";
];

[ routine78156 local1 ;	! 78156 / 0x1314c
    print "the picture on ";
    Defart(local1);
    if (local1.n_to == nothing) {
        ".";
    }
    ", beautifully magnified and amazingly life-like. Why, you'd hardly know there was a wall there at all.";
];

! References: Souvenirs_Room.after

[ SouvenirsRoomAfter local1 ;	! 78248 / 0x131a8
    if (action == ##Read) {
        if (noun == s_obj && slide_projector has on) {
            local1 = child(slide_projector);
            if (local1 == 0) {
                "The south wall is lit up by the projector.";
            }
            print "The south wall shows ";
            routine78156(local1);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: Souvenirs_Room.before

[ SouvenirsRoomBefore local1 ;	! 78328 / 0x131f8
    if (action == ##Look) {
        if (slide_projector hasnt on) {
            rfalse;
        }
        local1 = child(slide_projector);
        if (local1 == 0) {
            print "^The south wall is lit up by the projector.^";
        } else {
            print "^The south wall displays ";
            DisplayCardDesc(local1);
        }
        if (ball_polished == true) {
            "^A beam of white light points directly backward from the projector, through the north doorway into the Observatory.";
        }
        rtrue;
    }
    rfalse;
];

! References: Souvenirs_Room.s_to

[ SouvenirsRoomSouth ;	! 78480 / 0x13290
    R_Process(##Enter,south_wall);
    rtrue;
];

! References: slide_projector.after

[ ProjectorAfter ;	! 78492 / 0x1329c
    if (action == ##Receive) {
        if (child(selfobj) ~= nothing) {
            "There's a slide in already.";
        }
        if (noun == postcard_of_the_Champs_Elysees) {
            print "The postcard is just too large to fit.^";
            GoodTry();
            rtrue;
        }
        if (noun == framed_charcoal_sketch) {
            print "The frame is too bulky.^";
            GoodTry();
            rtrue;
        }
        if (noun == charcoal_sketch or miniature) {
            rfalse;
        }
        if (noun hasnt card) {
            "It won't fit. There's only room for something flat and the size of, say, a playing card.";
        }
        rfalse;
    }
    if (action == ##Turn) {
        if (ball_polished == true) {
            ball_polished = false;
            if (selfobj has on) {
                give Disused_Observatory ~light;
                "The sharp beam of light cuts out again.";
            }
            "Click.";
        }
        ball_polished = true;
        if (selfobj has on) {
            give Disused_Observatory light;
            "A sharp beam of white light appears backward out of the projector. As you step out of the beam, it extends dead straight through the north doorway.";
        }
        "Click.";
    }
    rfalse;
];

! References: slide_projector.before

[ ProjectorBefore local1 ;	! 78820 / 0x133e4
    if (action == ##Receive) {
        if (selfobj has on) {
            ToggleSouthWall(noun);
            rtrue;
        }
        rfalse;
    }
    if (action == ##Release) {
        if (selfobj has on) {
            ToggleSouthWall(nothing);
            rtrue;
        }
        rfalse;
    }
    if (action == ##SwitchOn) {
        give Souvenirs_Room light;
        if (ball_polished == true) {
            give Disused_Observatory light;
        }
        local1 = child(slide_projector);
        if (local1 == 0) {
            print "The south wall is lit up. ";
            if (ball_polished == true) {
                print "Also, a narrow white beam of light extends backwards from the projector, pointing out up through the Observatory doorway to the north.";
            }
            new_line;
            rtrue;
        }
        ToggleSouthWall(local1);
        rtrue;
    }
    if (action == ##SwitchOff) {
        give Souvenirs_Room ~light;
        give Disused_Observatory ~light;
        give south_wall concealed;
        rfalse;
    }
    rfalse;
];

! References: south_wall.after

[ SouthWallAfter local1 ;	! 79012 / 0x134a4
    if (action == ##Enter) {
        local1 = child(slide_projector);
        if (local1 == 0) {
            "You can't go that way.";
        }
        if (local1 == 192[Eight_of_Wands_card?]) {
            "You are unable to enter the picture. It isn't very realistic, more a stylised figure-eight.";
        }
        print "You walk confidently into the south wall...^";
        if (local1 has general) {
            "But are unable to enter the scene for a second time.";
        }
        if (local1 == 164[Death_card?]) {
            print "^And find yourself in a golden cornfield on a sunny afternoon. You have just time to admire the ears of wheat before the scythe of the Grim Reaper cuts your soul from your body.^";
            FakeDie(local1);
            rtrue;
        }
        if (local1 == 166[Drowned_Sailor_card?]) {
            print "^You are underwater, in the wreck of a ship, surrounded by the skeletons of its former crew, whom you abruptly join as your air runs out.^";
            FakeDie(local1);
            rtrue;
        }
        if (local1 == 165[Fool_card?]) {
            print "^And find yourself stepping off a cliff. All is well for a moment, and then like a cartoon character you notice there is no ground beneath you and you plummet to a stony death far below.^";
            FakeDie(local1);
            rtrue;
        }
        give local1 general;
        PlayerTo(local1.n_to);
        rtrue;
    }
    rfalse;
];

[ DisplayCardDesc o ;	! 79532 / 0x136ac
    print "the picture on ";
    Defart(o);
    if (o.n_to == nothing) {
        ".";
    }
    ", beautifully magnified and amazingly life-like. Why, you'd hardly know there was a wall there at all.";
];

[ ToggleSouthWall o ;	! 79624 / 0x13708
    if (o ~= nothing) {
        if (o.n_to ~= nothing) {
            south_wall.n_to = o.n_to;
            give south_wall ~concealed;
        }
        print "The south wall lights up with ";
        DisplayCardDesc(o);
        rtrue;
    }
    give south_wall concealed;
    "The south wall becomes blank again.";
];

[ FakeDie card ;	! 79704 / 0x13758
    print "^^    ";
    style bold;
    print "*** You have died ***";
    style roman;
    print "^^Or have you?  No... this isn't quite the end. You see an intense blue-white light at the end of what seems a tunnel, and drift toward it until you realise that you are staring, dazed, into the light of the slide projector, and have hardly moved at all.^";
    give card general;
    rtrue;
];

! References: East_Annexe.description

[ EastAnnexeDesc ;	! 79900 / 0x1381c
    print "This tight annexe at the eastern end of the house is piled up with old loft insulation rolls, left over from the last time the job was done (whenever that was). A gap between the tiles of the roof (which you really must mend before winter) lets a little natural light in";
    if (Dead_End.d_to == nothing) {
        ", but the attics to the west and south are dark.";
    }
    " and the dead end south is bright with sunlight through a square open hatchway in the roof.";
];

! References: East_Annexe.after

[ EastAnnexeAfter ;	! 80144 / 0x13910
    if (action == ##Go or ##Enter) {
        if (old_smudged_battery in electric_torch && noun == n_obj or cupboard_door) {
            "You know you only have an old, nearly dead battery in the torch, and are reluctant to tread on the weaker floorboards inside the cupboard without safer illumination.";
        }
        if (child(electric_torch) == nothing && noun == n_obj or cupboard_door) {
            "But it's dark in there and you have no battery in your torch.";
        }
        rfalse;
    }
    rfalse;
];

! References: insulation_rolls.after

[ InsulationAfter ;	! 80320 / 0x139c0
    if (action == ##Read or ##Search or ##LookUnder) {
        if (old_gardeners__gloves hasnt worn) {
            "A rash act. The itchy fibres of the insulation soon deter you.";
        }
        if (new_battery notin selfobj) {
            "Nothing else there, unfortunately.";
        }
        move new_battery to East_Annexe;
        Achieved(SCORE_BATTERY);
        "You uncover a shiny new battery. It must have been dropped by accident when the loft insulation was being done.";
    }
    rfalse;
];

! References: cupboard_door.after

[ CupboardAfter ;	! 80488 / 0x13a68
    if (action == ##Knock) {
        "There is no reply, and frankly it's hard to imagine anyone's in there.";
    }
    rfalse;
];

! References: Dead_End.after

[ DeadEndAfter ;	! 80540 / 0x13a9c
    if (verb == ##Knock && noun == s_obj) {
        "The south wall rings curiously hollow.";
    }
    if (noun == s_obj && secret_door hasnt concealed) {
        R_Process(verb,secret_door,second);
        rtrue;
    }
    if (action == ##Push) {
        if (noun == s_obj && secret_door has concealed) {
            give secret_door ~concealed;
            move secret_door to Dead_End;
            Achieved(SCORE_SECRETDOOR);
            "A secret door springs open!";
        }
        rfalse;
    }
    if (action == ##Go) {
        if (noun == e_obj or d_obj && selfobj.d_to ~= nothing) {
            print "You clamber out onto a rickety ladder which runs right down the east wall of the Hall, and nervously descend...^";
        }
        rfalse;
    }
    rfalse;
];

! References: painting_of_Mad_Isaac_Meldrewe.before

[ IsaacPaintingBefore ;	! 80740 / 0x13b64
    if (action == ##Take) {
        if (selfobj in White_Hallway && picture_hook has scenery) {
            give selfobj ~scenery;
            give selfobj static;
            give selfobj ~talkable;
            "You take Mad Isaac down.";
        }
        if (big_iron_fireplace has concealed) {
            give big_iron_fireplace ~concealed;
            "Taken. (There's a fireplace behind it, by the way.)";
        }
        rfalse;
    }
    rfalse;
];

! References: big_iron_fireplace.before

[ FireplaceBefore ;	! 80840 / 0x13bc8
    if (action == ##Receive) {
        move noun to Priest_s_Hole;
        if (sooty_old_stick hasnt moved) {
            move sooty_old_stick to Priest_s_Hole;
            give sooty_old_stick moved;
        }
        if (noun == medicine_bottle && medicine_bottle has locked) {
            give medicine_bottle ~moved;
            medicine_bottle.initial = "The medicine bottle, alas, was undamaged by the fall down the chimney.";
        }
        CDefart(noun);
        " rattles out of sight down the chimney.";
    }
    rfalse;
];

! References: cranked_skylight.after

[ SkylightAfter ;	! 80924 / 0x13c1c
    if (action == ##Open or ##Close) {
        "How, exactly?";
    }
    if (action == ##Turn) {
        print "With a horrid creaking noise, the crank ";
        if (Inside_Cupboard has light) {
            give Inside_Cupboard ~light;
            give cranked_skylight ~open;
            "shuts down the skylight, shutting out the sunshine.";
        }
        give Inside_Cupboard light;
        give cranked_skylight open;
        "winds open the skylight, flooding the room with sunshine.";
    }
    rfalse;
];

! References: gas_mask.before

[ GasMaskBefore ;	! 81060 / 0x13ca4
    if (action == ##Wear) {
        "After a brief ecstasy of fumbling, you pull it on. It smells unpleasantly of World War II leftover cork.";
    }
    rfalse;
];

! References: iron_key.after

[ GothicKeyAfter ;	! 81140 / 0x13cf4
    if (action == ##Take) {
        if (selfobj has general) {
            rfalse;
        }
        give Sir_Joshua_Meldrewe ~concealed;
        move selfobj to Sir_Joshua_Meldrewe;
        Sir_Joshua_Meldrewe.number = 5;
        StartDaemon(Sir_Joshua_Meldrewe);
        "As you reach for the key, a swirling mist condenses about it, into a ghostly head which opens its mouth and eats up the key!  The rest of the ghostly body solidifies about the head and rises to swagger before you.";
    }
    rfalse;
];

! References: iron_key.initial

[ IronKeyInitial ;	! 81300 / 0x13d94
    if (location == Priest_s_Hole) {
        "This chimney must have been the one the gothic-looking iron key fell down, for here it is.";
    }
    "An iron, gothic-looking key catches your eye.";
];

! References: Sir_Joshua_Meldrewe.daemon

[ JoshuaMeldreweDaemon n ;	! 81396 / 0x13df4
    if (location ~= Battlements) {
        rfalse;
    }
    n = selfobj.number - 1;
    selfobj.number = n;
    if (n == 4) {
        "^The ghost laughs in a gurgling kind of way, as it were always coughing and spluttering.";
    }
    if (n == 3) {
        "^The ghost begins to speak:^^                       My hour is almost come^   When I to sulph'rous and tormenting flames^   Must render up myself...^^Can this possibly be the infamous Sir Joshua Meldrewe?";
    }
    if (n == 2) {
        "^~But not yet it hasn't, mark my word. And there's the burden of my inheritance, little wart! Get thee from my sight ere I slice thee as befits a hog!~";
    }
    if (n == 1) {
        "^~I prithee but once more, begone!~";
    }
    deadflag = SPOOKED;
    "^The ghost swoops around and through you, making you scream with panic. Somehow you manage to run back to safety, where your family (who never believe a word of it) give you plenty of tea and occupy you with holiday arrangements. As for you, you are so traumatised that you never venture into the attic again.^";
];

! References: Sir_Joshua_Meldrewe.life

[ GhostLife ;	! 81944 / 0x14018
    if (action == ##Give or ##ThrowAt) {
        remove noun;
        StopDaemon(selfobj);
        if (noun == chicken_wishbone) {
            move iron_key to Priest_s_Hole;
            give iron_key general;
            remove Sir_Joshua_Meldrewe;
            Achieved(SCORE_JOSHUA);
            "The ghost swallows the wishbone, grinning nastily. Then a look of consternation spreads across his face. He begins to choke and as he fades away, his arms flailing wildly, he lets go of the key, which sails through the air onto the roof and (against all odds) falls neatly down a chimney.";
        }
        print "The ghost swallows ";
        Defart(noun);
        " whole and grins!";
    }
    if (action == ##Attack or ##Kiss) {
        "Ectoplasm is as nice to touch as its reputation suggests.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "~I'll tell you nothing, varlet!~";
    }
    rfalse;
];

! References: Chimney.after

[ ChimneyAfter o ;	! 82264 / 0x14158
    if (verb ~= ##Inv or ##Look or ##Go or ##Exit) {
        "There's not enough room in this confined space to do anything much!";
    }
    if (action == ##Go) {
        if (noun == d_obj) {
            o = child(player);
          .label82331;
            if (o ~= nothing) {
                if (o hasnt worn || o == canvas_rucksack) {
                    "It's too narrow a squeeze for you at present.";
                }
                o = sibling(o);
                jump label82331;
            }
            print "You squeeze awkwardly down the chimney. Lucky your best clothes are all packed, because you're getting filthy.^";
        }
        rfalse;
    }
    rfalse;
];

! References: Priest_s_Hole.after

[ PriestHoleAfter o ;	! 82456 / 0x14218
    if (action == ##Enter) {
        if (noun == hatch) {
            DownTheHatch();
            rfalse;
        }
        rfalse;
    }
    if (action == ##Go) {
        if (noun == u_obj) {
            o = child(player);
          .label82488;
            if (o ~= nothing) {
                if (o hasnt worn || o == canvas_rucksack) {
                    "It's too narrow a squeeze for you at present.";
                }
                o = sibling(o);
                jump label82488;
            }
            print "You squeeze awkwardly back up the chimney.";
        }
        if (noun == d_obj) {
            DownTheHatch();
            rfalse;
        }
        rfalse;
    }
    rfalse;
];

[ DownTheHatch ;	! 82580 / 0x14294
    if (hatch has open) {
        print "You zoom rapidly down the chute, but decelerate just in time and land in a dark corner of...^";
    }
    rtrue;
];

! References: ancient_prayer_book.after

[ PrayerBookAfter year ;	! 82652 / 0x142dc
    if (action == ##Consult) {
        year = TryNumber(consult_from);
        if (year < 1725 || year > 1792) {
            "He didn't seem to be experimenting in those days.";
        }
        if (year == 1792) {
            "In 1792, the last year of his life, ol' red-eyes becomes very excited about his new discovery. This time he claims that Merlyn bounde uppe the mystic estate (by this he means the back garden - Isaac never did have any sense of proportion) wyth great Roddes of Power. These are dangerous, yet also useful in themselves, but are really part of a great key... the usual nonsense. Of course you never actually see these rods, because they disguise themselves until waved by someone wearing Merlyn's hat.^^", "The funny thing is that Isaac died (legend has it, by spontaneous combustion) only a week after this breakthrough, preventing him from sending yet another paper to the Royal Society. But since Merlyn supposedly lived in about the sixth century A.D., there can't be a lot left of his hat, so the matter may be academic.";
        }
        print "In the year ";
        EnglishNumber(year);
        print ", Isaac was mainly concerned with ";
        year = year % 6;
        if (year == 0) {
            "alchemy.";
        }
        if (year == 1) {
            "caustical opticks.";
        }
        if (year == 2) {
            "concave mirrors.";
        }
        if (year == 3) {
            "the edibility of reptiles.";
        }
        if (year == 4) {
            "the spleens of flightless birds.";
        }
        "melting points of metals.";
    }
    rfalse;
];

! References: Alisons_Writing_Room.description

[ WritingRoomDesc ;	! 83392 / 0x145c0
    print "A pleasantly furnished, if now mildewed, box room. There are engravings of Alison's heroines: Christina Rossetti, Elizabeth Browning, Emily Dickinson and Queen Victoria, an unlikely quartet. The wallpaper is done out in a dice motif, and a square outline of sixes surrounds a rather small door leading back north into the attics.^^";
    if (flag_of_the_British_Merchant_Navy in comfortable_bed) {
        "The flag is spread out as a blanket on the comfortable bed.";
    }
    "The room is provided with a comfortable bed, which looks very inviting.";
];

! References: Alisons_Writing_Room.after

[ WritingRoomAfter ;	! 83696 / 0x146f0
    if (action == ##Sleep) {
        if (player in comfortable_bed) {
            if (flag_of_the_British_Merchant_Navy notin comfortable_bed) {
                "Awareness that something important is happening tugs at your subconscious.^^But you feel too exposed to sleep with only a sheet on the bed, and can't get comfortable.";
            }
            Achieved(SCORE_SLEEP);
            if (comfortable_bed has general) {
                "You doze awhile, but that's all.";
            }
            give comfortable_bed general;
            print "You sleep uneasily, fancying you can see Miss Alison writing at her table, trying to see the words, and always on the edge of a...^";
            routine126184();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: Alisons_Writing_Room.before

[ WritingRoomBefore ;	! 83944 / 0x147e8
    if (action == ##Exit) {
        if (Melancholy_Dream has visited) {
            set_flag_array(44);
        }
        rfalse;
    }
    rfalse;
];

! References: comfortable_bed.after

[ ComfyBedAfter ;	! 83964 / 0x147fc
    if (action == ##Receive) {
        if (noun ~= flag_of_the_British_Merchant_Navy) {
            "That seems unlikely to make a good blanket.";
        }
        move flag_of_the_British_Merchant_Navy to comfortable_bed;
        "You spread the flag over the bed as a blanket.";
    }
    rfalse;
];

! References: windows.after

[ WindowAfter ;	! 84044 / 0x1484c
    if (action == ##Attack or ##Push or ##Pull) {
        give windows open;
        give windows openable;
        selfobj.after = 65535[?];
        "The windows suddenly give way in a shower of flakes of paint, letting fresh summer air into the room!";
    }
    if (action == ##Enter) {
        if (selfobj hasnt open) {
            "The windows are shut.";
        }
        rfalse;
    }
    if (action == ##Open) {
        "The windows are old and gummed up somehow.";
    }
    rfalse;
];

[ CheckMirror o ;	! 84192 / 0x148e0
    if (long_vanity_mirror has general) {
        rfalse;
    }
    if (o in player or canvas_rucksack && (o has rod_attr || o has hidden_rod || o has unidentiifed_rod)) {
        rtrue;
    }
    rfalse;
];

[ MonkeyAlive ;	! 84228 / 0x14904
    if (Crescent_Moon in Old_Evans) {
        give model_of_ugly_animal ~general;
        "^The monkey revels briefly in its new life, but then catches your eyes, sadly realising you offer it no home. Quite quickly it settles back into an ugly idol.";
    }
    remove model_of_ugly_animal;
    give model_of_ugly_animal ~general;
    move pet_monkey to Stone_Cross;
    Old_Evans.description = "Evans is content once again.";
    "^Now that you have finally been able to look it in the eyes, the monkey leaps from your arms, revelling in its new life, and scampers away through the windows onto the balcony, then up and over the side of the house. You can just make it out as it races down the footpath.";
];

! References: long_vanity_mirror.after

[ MirrorAfter o i ;	! 84524 / 0x14a2c
    if (action == ##Attack) {
        "What, and earn seven years bad luck?";
    }
    if (action == ##Clean) {
        give selfobj general;
        set_flag_array(21);
        "You polish up the mirror just a little more.";
    }
    if (action == ##Read or ##Search) {
        print "In the mirror is one of the most strikingly attractive people you have ever seen in all your born days";
        i = 0;
        o = child(player);
      .label84670;
        if (o ~= nothing) {
            if (CheckMirror(o) == false) {
                ++i;
                give o workflag;
            } else {
                give o ~workflag;
            }
            o = sibling(o);
            jump label84670;
        }
        if (i == 0) {
            ".";
        }
        print ", carrying ";
        if (model_of_ugly_animal has workflag) {
            give model_of_ugly_animal general;
        }
        WriteListFrom(child(player),512 + 8 + 64);
        print ".^";
        if (model_of_ugly_animal has general) {
            MonkeyAlive();
        }
        rtrue;
    }
    rfalse;
];

! References: window_sill.after

[ WindowSillAfter ;	! 84776 / 0x14b28
    if (action == ##Search or ##LookUnder) {
        if (delicate_gold_key has concealed) {
            give delicate_gold_key ~concealed;
            "You dislodge something shiny!";
        }
        rfalse;
    }
    rfalse;
];

! References: Old_Winery.before

[ routine84820 ;	! 84820 / 0x14b54
    if (action == ##Look) {
        if (selfobj has general) {
            rfalse;
        }
        give selfobj general;
        print "^As you disturb the still air, the attic key, which was balanced on top of the demijohn, slips onto the floor and disappears into a crack in the floorboards. Your spirits sink as it does, rattling down some distance. How on earth are you going to get it back?^";
        rfalse;
    }
    rfalse;
];

! References: Old_Winery.daemon

[ OldWineryDaemon ;	! 84996 / 0x14c04
    print "^Sorry. Thinking about it again, the score only gets in a muddle this way, so the bonus points had better go after all.^";
    good_try_bonus = 0;
    displaying_quote = true;
    score = score - 5;
    rfalse;
];

! References: Old_Winery.after

[ OldWineryBefore ;	! 85084 / 0x14c5c
    if (action == ##PutOn) {
        if (second == demijohn) {
            "We know already what happens to things balanced on the demijohn.";
        }
        rfalse;
    }
    rfalse;
];

! References: demijohn.after

[ DemijohnAfter ;	! 85140 / 0x14c94
    if (action == ##Open) {
        if (old_gardeners__gloves hasnt worn) {
            "Your hands slip on the screw-top of the demijohn and can't get a grip.";
        }
        Achieved(SCORE_DEMIJOHN);
        rfalse;
    }
    if (action == ##Attack) {
        "The demijohn is made of something like industrial-grade chemistry glass. You kick it and hurt your foot.";
    }
    rfalse;
];

! References: tourist_map.after

[ TouristMapAfter n ;	! 85276 / 0x14d1c
    if (action == ##Consult) {
        if (selfobj in demijohn) {
            "You can't get a close enough look.";
        }
        n = TryNumber(consult_from);
        if (n == 1420) {
            if (Museum_Foyer has visited) {
                "You remember, the museum.";
            }
            print "^At that exact grid reference is Meldreustrasse, a minor back street which houses a museum of arcana.^^Suddenly you remember!  You visited the place once, and the curator Doktor Stein showed you round... and he hypnotised you into a swirl of unconsciousness...^^";
            move tourist_map to location;
            PlayerTo(Museum_Foyer);
            rtrue;
        }
        "Just some anonymous streets. The detail of this map is so tiny that unless you have the exact four-digit grid reference for what you want, you'll never find it.";
    }
    rfalse;
];

! References: Conservatory.before

[ ConservatoryBefore ;	! 85632 / 0x14e80
    if (action == ##Look) {
        if (antiquated_wireless has general && antiquated_wireless in Airing_Cupboard) {
            print "^Execrable music drifts in from the airing cupboard.^";
        }
        rfalse;
    }
    rfalse;
];

! References: daisy_calendar.after

[ CalendarAfter i w ;	! 85692 / 0x14ebc
    if (action == ##Read) {
        print "The calendar is turned to ";
        i = selfobj.time_left;
        if (i == 0) {
            print "January";
        }
        if (i == 1) {
            print "February";
        }
        if (i == 2) {
            print "March";
        }
        if (i == 3) {
            print "April";
        }
        if (i == 4) {
            print "May";
        }
        if (i == 5) {
            print "June";
        }
        if (i == 6) {
            print "July";
        }
        if (i == 7) {
            print "August";
        }
        if (i == 8) {
            print "September";
        }
        if (i == 9) {
            print "October";
        }
        if (i == 10) {
            print "November";
        }
        if (i == 11) {
            print "December";
        }
        print " and a watercolour painting of some ";
        DaisyType(i);
        " daisies.";
    }
    if (action == ##Turn or ##SwitchOn) {
        selfobj.time_left = (selfobj.time_left + 1) % 12;
        R_Process(##Read,selfobj);
        rtrue;
    }
    if (action == ##Consult) {
        if (consult_words == 1[?]) {
            wn = consult_from;
            w = NextWord();
            i = 65535;
            if (w == 'january') {
                i = 0;
            }
            if (w == 'february') {
                i = 1;
            }
            if (w == 'march') {
                i = 2;
            }
            if (w == 'april') {
                i = 3;
            }
            if (w == 'may') {
                i = 4;
            }
            if (w == 'june') {
                i = 5;
            }
            if (w == 'july') {
                i = 6;
            }
            if (w == 'august') {
                i = 7;
            }
            if (w == 'september') {
                i = 8;
            }
            if (w == 'october') {
                i = 9;
            }
            if (w == 'november') {
                i = 10;
            }
            if (w == 'december') {
                i = 11;
            }
            if (i >= 0) {
                selfobj.time_left = i;
                R_Process(##Read,selfobj);
                rtrue;
            }
        }
        "It only has the usual twelve months.";
    }
    rfalse;
];

! References: pile_of_sheets.after

[ SheetsAFter ;	! 86108 / 0x1505c
    if (action == ##Take) {
        print "The thought of Jemima's wrath if you actually took one of her tie-dyed sheets (~Dyeing is an art like everything else... I do it very well~) is just too dreadful. ";
        if (antiquated_wireless has concealed) {
            "But there seems to be something lurking beneath.";
        }
        new_line;
        rtrue;
    }
    if (action == ##Search or ##LookUnder or ##Read) {
        if (antiquated_wireless has concealed) {
            give antiquated_wireless ~concealed;
            Achieved(SCORE_WIRELESS);
            "Not as many sheets as you thought - they were on top of a large black wireless, now exposed to the light for the first time in months.";
        }
        print "No, you're only getting your ";
        if (old_gardeners__gloves has worn) {
            print "gloves";
        } else {
            print "hands";
        }
        " stained looking.";
    }
    rfalse;
];

! References: pile_of_sheets.daemon

[ SheetsDaemon ;	! 86420 / 0x15194
    if (antiquated_wireless hasnt on) {
        StopDaemon(selfobj);
        give antiquated_wireless ~general;
        rtrue;
    }
    if (antiquated_wireless in Conservatory && location == Potting_Room) {
        print "^Jemima hums along to ";
    } else if (antiquated_wireless in location) {
        print "^The radio plays ";
    } else {
        rtrue;
    }
    if (random(81) == 1) {
        "a splendid concert of the Sibelius Violin Concerto by the Minot Symphony Orchestra of North Dakota.";
    }
    print (string) RandomEntry(24948[?]), (string) RandomEntry(24974[?]), (string) RandomEntry(24986[?]);
    new_line;
    rtrue;
];

! References: antiquated_wireless.after

[ WirelessAfter ;	! 86604 / 0x1524c
    if (selfobj has concealed) {
        "You've played this game before.";
    }
    if (action == ##Take) {
        "It's too heavy to lift off the casters.";
    }
    if (action == ##Push or ##Pull or ##Turn) {
        "It moves easily on the casters.";
    }
    if (action == ##PushDir) {
        if (location == Conservatory && second == e_obj) {
            "Not upstairs you can't.";
        }
        if (location == Conservatory && second == w_obj) {
            deadflag = FAILED;
            "Aunt Jemima spends the next four hours explaining to you exactly why she put the radio into storage. The reason is awfully convoluted and due to her firm conviction that magnetic fields influence the growth of plants. By that time you have to leave for the airport...";
        }
        routine166092();
        rtrue;
    }
    rfalse;
];

! References: antiquated_wireless.before

[ WirelessBefore ;	! 86892 / 0x1536c
    if (action == ##SwitchOn) {
        StartTimer(selfobj,6);
        "You push the switch on the wireless, but nothing happens.";
    }
    if (action == ##SwitchOff) {
        if (selfobj has general) {
            give antiquated_wireless ~general;
            "Thank heaven for that.";
        }
        rfalse;
    }
    if (action == ##PushDir) {
        print "It moves easily on the casters.^";
        rfalse;
    }
    rfalse;
];

! References: antiquated_wireless.daemon

[ WirelessDaemon ;	! 86996 / 0x153d4
    if (selfobj has on) {
        StartDaemon(pile_of_sheets);
        give selfobj general;
        if (antiquated_wireless in location) {
            print "^The radio valves glow, and execrable so-called easy listening music fills the air with a sort of bland aural candy-floss.^";
        }
        if (location == Potting_Room && antiquated_wireless in Conservatory) {
            print "^Execrable music begins to sound from the conservatory, and Aunt Jemima hums vacantly.^";
        }
    }
    rfalse;
];

! References: antiquated_wireless.describe

[ WirelessDescribe ;	! 87156 / 0x15474
    if (selfobj has general) {
        "^The wireless fills the air with Jemima's favourite station, ~Mild-n-Breezy FM~, about which the least said the better.";
    }
    print "^To one side is a heavy cabinet on casters containing an antiquated wireless, the kind with ";
    if (selfobj has on) {
        print "glowing ";
    }
    "valves inside. On the top is a bakelite on-off switch.";
];

! References: Potting_Room.before

[ PottingRoomBefore ;	! 87344 / 0x15530
    if (action == ##Go) {
        if (parent(daisy_chain) == nothing && daisy_given == true) {
            give Jemima general;
            print "^~Oh, silly old you,~ says Jemima condescendingly, ~You've lost your daisy chain!  What colour do you want then?~^";
        }
        rfalse;
    }
    if (action == ##Look) {
        if (antiquated_wireless has general && antiquated_wireless in Conservatory) {
            print "^Execrable music drifts in from the conservatory.^";
        }
        if (antiquated_wireless has general && antiquated_wireless in Airing_Cupboard) {
            print "^Happily, the radio is almost inaudible from here.^";
        }
        rfalse;
    }
    rfalse;
];

! References: old_gardeners__gloves.after

[ GlovesAfter ;	! 87548 / 0x155fc
    if (action == ##Take) {
        if (antiquated_wireless in Conservatory && antiquated_wireless has general) {
            rfalse;
        }
        if (old_gardeners__gloves hasnt moved) {
            deadflag = FAILED;
            "Aunt Jemima suddenly hears you, spins round to see you filching her gloves and screeches with irritation, eventually summoning the entire family. You volunteer to shift some suitcases about just to get away from her.";
        }
        rfalse;
    }
    rfalse;
];

! References: Jemima.daemon

[ JemimaDaemon ;	! 87700 / 0x15694
    if (location ~= Potting_Room) {
        StartTimer(selfobj,1);
        rtrue;
    }
    print "^~There we are!  All done now.~  Jemima hangs a daisy chain around your neck, then frowns and adjusts your hair in an exceedingly annoying way.^";
    Achieved(SCORE_DAISY);
    give daisy_chain moved;
    give daisy_chain worn;
    daisy_given = true;
    move daisy_chain to player;
    rtrue;
];

! References: Jemima.life

[ JemimaLife i ;	! 87832 / 0x15718
    if (action == ##Order) {
        if (verb == ##Give && noun == old_gardeners__gloves) {
            "~I can't give you those, I'm using them!~^^(This is plainly not true, but you know how it is with aunts.)";
        }
        "Aunt Jemima has never done what you suggested at the best of times. This is not the best of times.";
    }
    if (action == ##Give) {
        if (noun == box_of_chocolates) {
            remove box_of_chocolates;
            Achieved(SCORE_CHOCOLATE);
            give Jemima general;
            Jemima.description = "Definitely mollified.";
            "Aunt Jemima pounces on the chocolates, wolfs down a strawberry cream and persuades you to have a vile toffee cracknell. ~Now,~ she says, ~Your turn for a daisy chain!~^^You try to look pleased.^^~Let's see, the others have had theirs... I have only a few colours left. What would you like?~";
        }
        if (noun == chocolate_biscuit) {
            print "Jemima grudgingly takes the biscuit and nibbles at it, but she is still sulking.^";
            GoodTry();
            remove chocolate_biscuit;
            rtrue;
        }
        if (noun == red_tablet) {
            "Jemima looks very suspiciously at the pill. ~Not just now, thanks.~";
        }
        if (noun == medicine_bottle && noun has locked) {
            remove red_tablet;
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "Jemima takes the bottle absent-mindedly, opens it without the slightest difficulty and (before you can stop her) swallows the pill. You'd better hope it wouldn't have been useful anyway.^^~I'm always leaving my medicine lying around,~ she says vaguely as she hands the bottle back. ~I'll forget my head one day.~";
        }
        print "A peace offering is a nice idea, but somehow ";
        Defart(noun);
        if (noun == gift_wrapped_parcel) {
            print " lacks style... after all, it isn't Christmas.^";
            GoodTry();
            rtrue;
        }
        " seems inappropriate.";
    }
    if (action == ##Kiss) {
        print "She is slightly mollified, but only slightly.^";
        GoodTry();
        rtrue;
    }
    if (action == ##Attack) {
        set_flag_array(28);
        "Well, she's annoying, but that's family for you.";
    }
    if (action == ##ThrowAt) {
        set_flag_array(28);
        "Well, quite. Best to just grit your teeth and put up with her though.";
    }
    if (action == ##Answer) {
        if (selfobj hasnt general) {
            set_flag_array(17);
            "She pretends not to have heard, a favourite ploy of hers when sulking.";
        }
        give Jemima ~general;
        i = 0;
        if (noun == invalidObj41664 or invalidObj41673) {
            i = 1;
        }
        if (noun == invalidObj30666) {
            i = 2;
        }
        if (noun == invalidObj37947) {
            i = 4;
        }
        if (noun == invalidObj41304 or invalidObj37236) {
            i = 5;
        }
        if (noun == invalidObj33933) {
            i = 6;
        }
        if (noun == invalidObj36687) {
            i = 9;
        }
        if (i ~= 0) {
            print "~Right you are then, I'm sure I have some which are just right.~^^";
        }
        if (i == 0) {
            i = 5;
            print "~Nothing like that left. Just plain old daisies for you then dear!~^^";
        }
        StartTimer(Jemima,7);
        daisy_chain.number = i;
        "After a moment she notices you're still here. ~Come back later, it'll be done soon.~  You groan inwardly but force a sickly smile. Should have eaten the chocolates myself, you find yourself thinking.";
    }
    if (action == ##Ask) {
        set_flag_array(17);
        if (second == invalidObj31971 or invalidObj31251) {
            "Jemima gives you a cool look. ~They're just for decoration.~";
        }
        if (second == invalidObj30234 or invalidObj31152) {
            "~Wretched cat!  More trouble than he's worth.~";
        }
        if (second == invalidObj38379 or invalidObj33780) {
            "~Those are my gloves.~";
        }
        if (second == invalidObj40593 or invalidObj35625 or invalidObj36975 or invalidObj34473) {
            "~I wouldn't know. I'm not the one going on holiday.~";
        }
        if (second == invalidObj30207 or invalidObj34977 or invalidObj41421) {
            "~You haven't lost the attic key again?  Hmph.~";
        }
        if (second == invalidObj32124 or invalidObj30765) {
            "~Load of old junk.~";
        }
        if (second == invalidObj32556 or invalidObj41070 or invalidObj32565) {
            "~You leave that rickety old thing alone!~";
        }
        if (second == invalidObj30972) {
            "~Not bad. Of course, my daisies are better, but not bad for beginners.~";
        }
        if (second == invalidObj31584 or invalidObj31593) {
            "~Everyone has his own favourite.~";
        }
        if (second == invalidObj37866 or invalidObj41448) {
            "~I've told you a hundred times, I don't want a transistor radio. That old valve set is fine for me.~";
        }
        if (second == invalidObj31917 or invalidObj31926 or invalidObj32988) {
            "~Nothing wrong with this family that a good long holiday wouldn't set right.~";
        }
        if (second == invalidObj35760) {
            "~Know thyself, that's what the good book says.~";
        }
        "Jemima has nothing to say on the subject.";
    }
    rfalse;
];

! References: daisy_chain.after

[ DaisyChainAfter ;	! 89704 / 0x15e68
    if (action == ##Read) {
        print "A delicate, pretty chain of ";
        DaisyType(selfobj.number);
        " daisies.";
    }
    if (action == ##Drop) {
        remove selfobj;
        give selfobj ~worn;
        "The daisychain falls to pieces in your hands!  Cheer up, though, perhaps Jemima might give you another.";
    }
    rfalse;
];

! References: daisy_chain.u_to

[ DaisyUp o ;	! 89828 / 0x15ee4
    if (selfobj has worn && rod_identity == 2) {
        o = child(player);
      .label89843;
        if (o ~= nothing) {
            if (o has hidden_rod) {
                print " (which rustles as if with a magical wind)";
                rtrue;
            }
            o = sibling(o);
            jump label89843;
        }
        print " (around your neck)";
        rtrue;
    }
    rfalse;
];

[ DaisyType n ;	! 89908 / 0x15f34
    if (n == 0) {
        print "speckled Jemima's Pride";
    }
    if (n == 1) {
        print "yellowish Merlyn's Hat";
    }
    if (n == 2) {
        print "blue-tinted bell";
    }
    if (n == 3) {
        print "heavy-headed Dorset Pride";
    }
    if (n == 4) {
        print "reddish meadow-heart";
    }
    if (n == 5) {
        print "wild white common";
    }
    if (n == 6) {
        print "green-edged hedgerow";
    }
    if (n == 7) {
        print "plain Russian Steppe";
    }
    if (n == 8) {
        print "tall-stemmed Breton";
    }
    if (n == 9) {
        print "orange meadow";
    }
    if (n == 10) {
        print "short-leaved Meldrew";
    }
    if (n == 11) {
        print "tiny bonsai";
    }
    rtrue;
];

! References: Storage_Room.after

[ StorageRoomAfter ;	! 90148 / 0x16024
    if (action == ##Enter) {
        if (noun == dark_shaft_obj) {
            if (dumbwaiter in dark_shaft_obj) {
                R_Process(##Enter,dumbwaiter);
                rtrue;
            }
            "But you suffer from vertigo. Even the thought of the plane journey tomorrow is nerve-wracking.";
        }
        rfalse;
    }
    rfalse;
];

! References: wheel2.after, wheel.after

[ WheelAfter r ;	! 90240 / 0x16080
    if (action == ##TurnWith) {
        if (second == steel_wrench) {
            "The wrench doesn't fit a hand-wheel like this.";
        }
        rfalse;
    }
    if (action == ##Turn) {
        if (player in dumbwaiter) {
            "You can just reach the wheel from here, but have too little leverage to turn it.";
        }
        if (selfobj has on) {
            "It won't turn. Perhaps it's broken, or perhaps only rusty.";
        }
        print "It spins round smoothly, and the dumbwaiter is hoisted ";
        if (dumbwaiter in location) {
            print "away out of sight.";
        } else {
            print "into view. ";
            if (medicine_bottle in dark_shaft_obj2 && medicine_bottle has locked) {
                give medicine_bottle ~locked;
                give medicine_bottle open;
                print "(Just before it reached the bottom there was a curious cracking noise. Was it really wise to leave something in the shaft?)";
            }
        }
        r = parent(dumbwaiter);
        if (r == Storage_Room) {
            move dumbwaiter to Cellars;
        }
        if (r == Dark_Shaft) {
            move dumbwaiter to location;
        }
        if (r == Cellars) {
            move dumbwaiter to Storage_Room;
        }
        new_line;
        rtrue;
    }
    rfalse;
];

! References: dark_shaft_obj.before

[ ShaftBefore ;	! 90596 / 0x161e4
    if (action == ##Receive) {
        move noun to dumbwaiter;
        if (dumbwaiter in location) {
            "Put on the dumbwaiter.";
        }
        if (noun == medicine_bottle) {
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "It disappears into the darkness, and there is a slight cracking noise.";
        }
        "It disappears into the darkness.";
    }
    rfalse;
];

! References: steel_wrench.before

[ WrenchBefore ;	! 90704 / 0x16250
    if (action == ##Take) {
        "It's a wrench, but you take it.";
    }
    rfalse;
];

! References: pulley_ropes.after

[ RopesAfter r ;	! 90736 / 0x16270
    if (action == ##Pull) {
        if (player notin dumbwaiter) {
            "You can't reach them!";
        }
        Achieved(SCORE_WAITER);
        if (location == Storage_Room) {
            r = Cellars;
            print "You begin moving, and then plummet, but friction gradually slows you down and you land without too much of a thump...^";
        }
        if (location == Dark_Shaft) {
            r = Storage_Room;
            print "You heave yourself up to the attic again...^";
        }
        if (location == Cellars) {
            r = Dark_Shaft;
            print "You heave yourself half-way up, and then need to stop for a rest.^";
        }
        move dumbwaiter to r;
        location = r;
        R_Process(##Look);
        rtrue;
    }
    if (action == ##Climb) {
        "If only you didn't suffer from such dreadful vertigo...";
    }
    rfalse;
];

! References: chicken_wishbone.after

[ WishboneBefore ;	! 91000 / 0x16378
    if (action == ##Pull) {
        "It already has been. The part you have, lost.";
    }
    rfalse;
];

! References: Dark_Shaft.before

[ ShaftAfter ;	! 91040 / 0x163a0
    if (action == ##Look) {
        if (dumbwaiter notin Dark_Shaft) {
            print "^Since the dumbwaiter isn't here, the best you can do is clamber down the shaft to the cellars.^";
        }
        rfalse;
    }
    rfalse;
];

! References: Dark_Shaft.after

[ Shaft2After ;	! 91112 / 0x163e8
    if (action == ##Go) {
        if (noun == d_obj && dumbwaiter in Dark_Shaft) {
            "Since the dumbwaiter is here, why not travel in that instead.";
        }
        rfalse;
    }
    rfalse;
];

! References: Dark_Passage.after

[ DarkPassageAfter ;	! 91172 / 0x16424
    if (sandstone_recess has open) {
        Achieved(SCORE_SECRET_PASS);
    } else if (verb == ##Enter && noun == sandstone_recess) {
        "The recess is too shallow.";
    }
    if (gas_mask has worn) {
        rfalse;
    }
    if (verb == ##Go or ##Enter) {
        rfalse;
    }
    "The coal dust makes you cough and splutter, and your eyes stream. You are unable to concentrate on doing anything here.";
];

! References: metal_door.before

[ MetalDoorBefore ;	! 91304 / 0x164a8
    if (action == ##Unlock) {
        give coal_bunker ~locked;
        rfalse;
    }
    if (action == ##Lock) {
        give coal_bunker locked;
        rfalse;
    }
    if (action == ##Open) {
        give coal_bunker open;
        rfalse;
    }
    if (action == ##Close) {
        give coal_bunker ~open;
        rfalse;
    }
    rfalse;
];

! References: Cellars.after

[ CellarsAfter ;	! 91352 / 0x164d8
    if (action == ##Enter) {
        if (noun == dark_shaft_obj2) {
            if (dumbwaiter in Cellars) {
                R_Process(##Enter,dumbwaiter);
                rtrue;
            }
            "No, don't. There's nothing there and it's nasty and dirty. Bring the dumbwaiter down instead.";
        }
        rfalse;
    }
    rfalse;
];

[ MouseBoundary i j cell ;	! 91436 / 0x1652c
    if (i < 0 || i > 8 || j < 0 || j > 6) {
        rfalse;
    }
    cell = global142->(9 * j + i);
    if (cell == '0') {
        rfalse;
    }
    if (cell == '1') {
        rtrue;
    }
    rtrue;
];

! References: robot_mouse.life

[ MouseLife frm dst prev_loc x y ;	! 91484 / 0x1655c
    if (action == ##Order or ##Answer or ##Ask) {
        if (gas_mask has worn && MouseUnderstandsMask == false) {
            MouseUnderstandsMask = true;
            print "(amazingly, the mouse can make out your voice even when you have the gas mask on - that's real engineering, that is)^";
        }
        if (verb == ##Beep or ##Sing) {
            "The mouse bleeps with happy pride. That's one thing it really knows how to do.";
        }
        if (verb ~= ##Go) {
            "The mouse emits a querulous, unhappy bleep.";
        }
        if (noun == ne_obj) {
            noun = u_obj;
        }
        if (noun == nw_obj) {
            noun = u_obj;
        }
        if (noun == se_obj) {
            noun = u_obj;
        }
        if (noun == sw_obj) {
            noun = u_obj;
        }
        if (noun == d_obj) {
            noun = u_obj;
        }
        if (noun == u_obj) {
            "The mouse bleeps with annoyance.";
        }
        frm = parent(selfobj);
        if (frm == Cellars_South) {
            if (noun == n_obj) {
                dst = Cellars;
                jump label92201;
            }
            if (noun == w_obj) {
                dst = hole_in_the_wall;
                Mouse_x = 8;
                Mousy_y = 3;
                jump label92201;
            }
        } else if (frm == Cellar_West) {
            if (noun == e_obj) {
                dst = Cellars;
                jump label92201;
            }
        } else if (frm == Wine_Cellars) {
            if (noun == w_obj) {
                dst = Cellars;
                jump label92201;
            }
        } else if (frm == Cellars) {
            if (noun == w_obj) {
                dst = Cellar_West;
                jump label92201;
            }
            if (noun == s_obj) {
                dst = Cellars_South;
                jump label92201;
            }
            if (noun == e_obj) {
                dst = Wine_Cellars;
                jump label92201;
            }
        } else {
            if (frm == hole_in_the_wall && Mouse_x == 8 && Mousy_y == 3 && noun == e_obj) {
                dst = Cellars_South;
            } else {
                if (frm == hole_in_the_wall) {
                    if (noun == n_obj) {
                        x = Mouse_x;
                        y = Mousy_y - 1;
                    }
                    if (noun == e_obj) {
                        x = Mouse_x + 1;
                        y = Mousy_y;
                    }
                    if (noun == s_obj) {
                        x = Mouse_x;
                        y = Mousy_y + 1;
                    }
                    if (noun == w_obj) {
                        x = Mouse_x - 1;
                        y = Mousy_y;
                    }
                    if (MouseBoundary(x,y) == true) {
                        "From somewhere inside the hole, you hear a disconsolate bleep.";
                    }
                    Mouse_x = x;
                    Mousy_y = y;
                    if (Mouse_x == 4 && Mousy_y == 1 && small_brass_key in hole_in_the_wall) {
                        move small_brass_key to robot_mouse;
                        set_flag_array(2);
                        "From somewhere inside the hole, you hear the spinning of tiny wheels, followed by an excitable high-pitched beep and a dull clanging noise.";
                    }
                    "From somewhere inside the hole, you hear tiny wheels spin.";
                }
                "The mouse wheels spin, but can't get a good enough grip to move.";
            }
          .label92201;
            prev_loc = frm;
            move robot_mouse to dst;
            give robot_mouse moved;
            if (location == prev_loc) {
                if (dst == hole_in_the_wall) {
                    set_flag_array(1);
                    "The mouse just squeezes through the hole, and disappears from view. Unfortunately you can't very easily talk to it now...";
                } else {
                    "The mouse runs off as ordered.";
                }
            }
            if (location == dst) {
                print "The mouse runs back out of the hole, looking dustier but none the worse for its adventure";
                if (small_brass_key notin robot_mouse) {
                    ".";
                }
                move small_brass_key to Cellars_South;
                set_flag_array(3);
                ", and then almost looks proud as a magnet cuts out and something metal drops off the underside of the mouse onto the floor. The lost key is found!";
            }
        }
        "The mouse emits a low-pitched bleep.";
    }
    rfalse;
];

! References: Wine_Cellars.description

[ WineCellarsDescription ;	! 92516 / 0x16964
    print "The wine cellars are now quite badly stocked, many of the hexagonal racks being home only to woodlice now. Much of what there is was laid in by your father and has corked";
    if (selfobj hasnt light) {
        ".";
    }
    ". The barrel-shaft slants upwards to the north, and bright light floods in from the gardens above.";
];

! References: Wine_Cellars.after

[ WineCellarsAfter ;	! 92688 / 0x16a10
    if (action == ##Drink) {
        "But you are teetotal, which is why the cellars have got in this state.";
    }
    rfalse;
];

! References: Wine_Cellars.u_to

[ WineCellarsUp ;	! 92740 / 0x16a44
    if (selfobj hasnt light) {
        rfalse;
    }
    "The barrel-shaft is too steep to climb. You were lucky enough not to break your neck on the way down.";
];

! References: hole_in_the_wall.after

[ HoleAfter ;	! 92808 / 0x16a88
    if (action == ##Receive) {
        if (second == hole_in_the_wall) {
            "Nothing is to be gained by this.";
        }
        rfalse;
    }
    if (action == ##Release) {
        "There's nothing within reach inside.";
    }
    rfalse;
];

! References: hole_in_the_wall.life

[ HoleLife ;	! 92872 / 0x16ac8
    if (action == ##Order or ##Ask or ##Answer) {
        if (robot_mouse in selfobj) {
            return RunRoutines(robot_mouse,life);
        }
        rfalse;
    }
    rfalse;
];

! References: ironbound_door.after

[ IronboundDoorAfter ;	! 92900 / 0x16ae4
    if (action == ##Knock) {
        "You bark your knuckles painfully on the iron, and to no avail.";
    }
    rfalse;
];

! References: Infinity_Symbol.before

[ LemniscusBefore i ;	! 92944 / 0x16b10
    if (action == ##Look) {
        print "^Around the edge of the disc is a circular arc, surrounding the lemniscus, which passes through nine equally spaced sockets or cylindrical wells.";
        i = circular_arc.number;
        if (i == 0) {
            new_line;
            rfalse;
        }
        if (i == 1) {
            "  One socket contains a rod, fixed in place.";
        }
        if (i == 2) {
            "  Two of the sockets contain rods, fixed in place.";
        }
        if (i == 3) {
            "  Three sockets contain rods, fixed in place.";
        }
        if (i == 4) {
            "  Four sockets contain rods, fixed in place.";
        }
        if (i == 5) {
            "  Five sockets contain rods, fixed in place.";
        }
        if (i == 6) {
            "  Six sockets contain rods, fixed in place.";
        }
        if (i == 7) {
            "  Seven sockets contain rods, fixed in place.";
        }
        if (i == 8) {
            "  Only one socket is left empty.";
        }
        if (i == 9) {
            "  All nine sockets are occupied by rods.";
        }
        rfalse;
    }
    rfalse;
];

! References: circular_arc.after

[ ArcAfter local1 ;	! 93356 / 0x16cac
    if (action == ##Receive) {
        local1 = selfobj.number;
        if (local1 == 9[sw_obj?]) {
            "The sockets are all full.";
        }
        if (noun hasnt rod_attr) {
            "That won't fit in a socket.";
        }
        if (noun == rod_of_infinity) {
            if (noun has unidentiifed_rod) {
                "For some reason, that rod is just too large to fit.";
            }
            "The Rod of Infinity is just slightly too large to fit.";
        }
        move noun to selfobj;
        give noun static;
        ++local1;
        selfobj.number = local1;
        print "It fits perfectly in one of the arc sockets.^";
        if (parent(spherical_opening) == nothing) {
            move spherical_opening to Infinity_Symbol;
            print "^As the rod goes home, a spherical opening a few inches across appears in one wall.^";
        }
        if (local1 == 9[sw_obj?]) {
            Achieved(SCORE_ARC);
        }
        rtrue;
    }
    rfalse;
];

! References: spherical_opening.after

[ SphericalOpeningAfter ;	! 93620 / 0x16db4
    if (action == ##Receive) {
        if (noun == hard_wooden_ball) {
            "Though correctly shaped, it is not quite small enough to fit the cavity.";
        }
        if (noun ~= golden_orb) {
            "That doesn't seem to fit properly.";
        }
        if (golden_orb hasnt general) {
            "The orb fits perfectly, but nothing happens: it is as if the socket is dead, and the orb rolls out again into your hands. Curious.";
        }
        move spherical_opening to golden_orb;
        remove golden_orb;
        give spherical_opening general;
        Infinity_Symbol.description = "A cave carved from crystal icicles of rock and glowing with vivid, golden light, so bright it almost hurts your eyes. A narrow crevice opens out to an iron doorway and the relative darkness of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol.";
        "The orb fits perfectly, and the socket comes alive with golden light, which soaks out into the fabric of the cave until the whole place is shining bright.";
    }
    rfalse;
];

! References: The_Octagon.before

[ OctagonBefore ;	! 93900 / 0x16ecc
    if (action == ##Take or ##Remove) {
        if (noun has rod_attr && noun hasnt unidentiifed_rod) {
            Achieved(SCORE_ROD_IDENT);
        }
        rfalse;
    }
    rfalse;
];

! References: gilded_model_coffin.before

[ CoffinBefore local1 ;	! 93928 / 0x16ee8
    if (action == ##Receive) {
        if (noun has rod_attr) {
            "The mahogany rod fits in perfectly.";
        }
        rfalse;
    }
    if (action == ##Close) {
        give gilded_model_coffin ~general;
        local1 = child(gilded_model_coffin);
      .label93977;
        if (local1 ~= 0) {
            if (local1 has unidentiifed_rod) {
                discover_rod(local1);
                give gilded_model_coffin general;
            }
            local1 = sibling(local1);
            jump label93977;
        }
        if (gilded_model_coffin hasnt general) {
            gilded_model_coffin.initial = "A rather morbid gilded model coffin rests here.";
            rfalse;
        }
        gilded_model_coffin.initial = "The model coffin is closed and throbbing with electric power.";
        "The coffin sparks, spitting with electricity, and begins throbbing with a life of its own!";
    }
    if (action == ##Open) {
        selfobj.initial = "A rather morbid gilded model coffin rests open here.";
        rfalse;
    }
    rfalse;
];

! References: gilded_model_coffin.after

[ CoffinAfter ;	! 94088 / 0x16f88
    if (action == ##Open) {
        if (gilded_model_coffin has general && old_gardeners__gloves hasnt worn) {
            deadflag = FAILED;
            "There is a flash and then everything goes dark!^^You were given a nasty shock by that coffin. ~Must have been some old wiring,~ says a doctor, leaning over you in hospital.";
        }
        rfalse;
    }
    rfalse;
];

! References: gilded_model_coffin.description

[ CoffinDesc ;	! 94220 / 0x1700c
    print "The lid bears an inscription in strange hieroglyphics:^";
    0-->8 = 2 | 0-->8;
    print "^   (()) #+*+ <>   ->#.^             |||^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];

! References: framed_charcoal_sketch.after

[ SketchAfter ;	! 94344 / 0x17088
    if (action == ##Attack or ##Open) {
        remove framed_charcoal_sketch;
        move charcoal_sketch to location;
        move dog_eared_old_letter to location;
        "Breaking open the frame looses the sketch, which falls to the floor.";
    }
    rfalse;
];

! References: dog_eared_old_letter.description

[ LetterDesc ;	! 94404 / 0x170c4
    print "A faint typewritten letter, postmarked Cairo, October 1920, with a handwritten note signed simply ~Ellingsworth~:^^Hartley - Thought you might be able to date some of these queer pictograms and determinitives, early New Kingdom?  Pottery unclear, work continues^";
    0-->8 = 2 | 0-->8;
    print "^  ::   and        #     the               #.    this^  :;   but        +*+   god/spirit?       (())  all^  =    of         []    house/building    |||   indicates plural^  ->   through    >>>   moves             <>    item/thing?^  __   sits/lies/rests/is near            /     to/toward^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];

! References: picture_hook.after

[ HookAfter ;	! 94844 / 0x1727c
    if (action == ##Receive) {
        if (noun ~= painting_of_Mad_Isaac_Meldrewe) {
            "Doesn't seem right there, somehow.";
        }
        move painting_of_Mad_Isaac_Meldrewe to White_Hallway;
        give painting_of_Mad_Isaac_Meldrewe ~moved;
        give painting_of_Mad_Isaac_Meldrewe talkable;
        give selfobj ~static;
        give selfobj scenery;
        painting_of_Mad_Isaac_Meldrewe.initial = "Mad Isaac's painting glares at you from the picture hook.";
        "You hang up Mad Isaac, who seems ideally placed there.";
    }
    rfalse;
];

! References: Halfway_up_the_Stairs.u_to

[ HalfwayUpStairsUp ;	! 94940 / 0x172dc
    Servants_Room.d_to = Halfway_up_the_Stairs;
    Servants_Room.n_to = Halfway_up_the_Stairs;
    move tight_door to Servants_Room;
    selfobj.u_to = Servants_Room;
    print "The staircase leads up into...^";
    return 42[Servants_Room?];
];

! References: Unreal_City.each_turn, Near_Ring_Road.each_turn

[ UnrealEachTurn local1 ;	! 94988 / 0x1730c
    local1 = random(10);
    if (local1 == 1[?]) {
        "^A clock keeps the hours, with a dead sound on the final stroke of nine.";
    }
    if (local1 == 2[?]) {
        "^There is a brown fog about, like a winter dawn's.";
    }
    if (local1 == 3[s_obj?]) {
        "^You can almost make out the pleasant whining of a mandoline from a faraway bar.";
    }
    if (local1 == 4[e_obj?]) {
        "^Drifting through the streets from some distant bar comes the sound of one of Scott Joplin's newfangled piano pieces, accompanying song settings from ~Romeo and Juliet~.";
    }
    rfalse;
];

! References: poster.after

[ PosterAfter ;	! 95240 / 0x17408
    if (action == ##Take or ##RipDown or ##Rip or ##Pull) {
        if (selfobj has scenery) {
            give selfobj ~scenery;
            "You hastily tear down the poster, but there's nothing interesting behind it, only painted graffiti: ~Shantih Shantih Shantih~.";
        }
        rfalse;
    }
    if (action == ##Wave) {
        if (location == Down_by_River && tourist_boat hasnt open) {
            print "You wave the poster at the boat, but the boat remains unmoved.^";
            GoodTry();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: Bohemia.initial

[ BohemiaInitial local1 ;	! 95408 / 0x174b0
    local1 = random(10);
    if (local1 == 1[?]) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a yellow chair.";
    }
    if (local1 == 2[?]) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of lilies on a pond.";
    }
    if (local1 == 3[s_obj?]) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a chateau in Aix-en-Provence.";
    }
    if (local1 == 4[e_obj?]) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of nude bathers.";
    }
    if (local1 == 5[w_obj?]) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a waitress at a bar.";
    }
    if (local1 == 6[ne_obj?]) {
        Impressionist_painting.initial = "One whole wall is an Cubist mural painting of a woman with a plate of fish on her head.";
    }
    if (local1 == 7[se_obj?]) {
        Impressionist_painting.initial = "One whole wall is an abstract Cubist mural painting.";
    }
    if (local1 == 8[nw_obj?]) {
        Impressionist_painting.initial = "One whole wall is an Pre-Raphaelite mural painting of the Virgin Mary looking up at the light.";
    }
    if (local1 == 9[sw_obj?]) {
        Impressionist_painting.initial = "One whole wall is an Impressionist mural painting of a woman with a parasol.";
    }
    if (local1 == 10[u_obj?]) {
        Impressionist_painting.initial = "One whole wall is an pointillist mural painting of a scene in a park by a lake.";
    }
    rfalse;
];

[ Deal_card_number rank ;	! 95536 / 0x17530
    print "the ";
    if (rank == 1) {
        print "Ace";
    }
    if (rank == 2) {
        print "Two";
    }
    if (rank == 3) {
        print "Three";
    }
    if (rank == 4) {
        print "Four";
    }
    if (rank == 5) {
        print "Five";
    }
    if (rank == 6) {
        print "Six";
    }
    if (rank == 7) {
        print "Seven";
    }
    if (rank == 8) {
        print "King";
    }
    if (rank == 9) {
        print "Queen";
    }
    if (rank == 10) {
        print "Knave";
    }
    rtrue;
];

[ Deal_random_card i j card ;	! 95644 / 0x1759c
    if (card_ptr == 0) {
      .label95650;
        card = random(50);
        if (card == i) {
            jump label95650;
        }
        if (card == j) {
            jump label95650;
        }
        if (card == 1) {
            print "the Blank Card (~which I am forbidden to see~)";
        }
        if (card == 2) {
            print "the One-Eyed Merchant";
        }
        if (card == 3) {
            print "Marie, the Sledging Girl";
        }
        if (card == 4) {
            print "the Red Rock";
        }
        if (card == 5) {
            print "the Stony Wastes";
        }
        if (card == 6) {
            print "the Arch-Duke";
        }
        if (card == 7) {
            print "the Hyacinths";
        }
        if (card == 8) {
            print "the Wheel";
        }
        if (card == 9) {
            print "Belladonna, the Lady of the Rocks";
        }
        if (card == 10) {
            print "the Hypocrit Reader";
        }
        if (card == 11) {
            print "the Golden Cupidon";
        }
        if (card == 12) {
            print "the Candle-Flames";
        }
        if (card == 13) {
            print "the Carved Dolphin";
        }
        if (card == 14) {
            print "Philomel, the Barbarous King";
        }
        if (card == 15) {
            print "the Lonely Typist";
        }
        if (card == 16) {
            print "the Bradford Millionaire";
        }
        if (card == 17) {
            print "Magnus, the Martyr";
        }
        if (card == 18) {
            print "Phlebas, the Phoenician";
        }
        if (card == 19) {
            print "the Woman with Long Black Hair";
        }
        if (card == 20) {
            print "the Cicadas in the Pine Trees";
        }
        if (card < 21) {
            return card;
        }
        if (card < 31) {
            Deal_card_number(card - 20);
            print " of Staves";
            return card;
        }
        if (card == 31) {
            print "Tiresias, the shape changer";
            return card;
        }
        if (card < 41) {
            Deal_card_number(card - 30);
            print " of Cups";
            return card;
        }
        Deal_card_number(card - 40);
        print " of Stones";
        return card;
    }
    --card_ptr;
    card = card_deck-->card_ptr;
    move card to Consulting_Room;
    Defart(card);
    return card;
];

[ InsertCardIntoDeck o ;	! 96236 / 0x177ec
    card_deck-->card_ptr = o;
    ++card_ptr;
    rtrue;
];

[ SosostrisDeals card3 card2 card1 ;	! 96248 / 0x177f8
    print "Madame Sosostris picks up the cards and deals them onto the table. She frowns in concentration as ";
    card3 = Deal_random_card(0,0);
    print ", ";
    card2 = Deal_random_card(card3,0);
    print " and then ";
    card1 = Deal_random_card(card3,card2);
    print " show. ";
    if (card3 == Death_card) {
        print "She blanches with alarm, then recovers and jabbers something about not taking the cards too literally, the images being symbolic and so on. As rapidly as she possibly can, she warns you to fear death by water and then hustles you out onto the street.^";
    } else {
        if (card3 ~= Star || card2 ~= Maiden_card || card1 ~= Eight_of_Wands_card) {
            ! no code
        } else {
            print "~You have come!  At last, after all these centuries!  But there is little I can do to ease your way, save to return the staff you left with me for safe keeping.~  And she shows you out. You feel rather bewildered.^";
            move oak_quarterstaff to player;
            give Unreal_City general;
            jump label96853;
        }
        set_flag_array(18);
        print "~Curse it, another nobody,~ she hisses in an unguarded moment, as she tidies the pack absentmindedly with her hands. Then she recovers her poise and advises about handsome strangers, fearing death by water, crossing palms with gold and so on. Eventually she ushers you out.^";
    }
  .label96853;
    PlayerTo(Unreal_City);
    rtrue;
];

! References: Consulting_Room.after

[ ConsultingRoomAfter ;	! 96860 / 0x17a5c
    if (action == ##Smell) {
        "You feel briefly incensed.";
    }
    rfalse;
];

! References: Tarot_pack.after

[ TarotPackAfter ;	! 96888 / 0x17a78
    if (action == ##Take or ##Remove) {
        "That's funny. For a moment there your hand seemed to go straight through the pack of cards without touching it!";
    }
    if (action == ##Stack) {
        if (second == nothing) {
            "An intriguing idea, but you'll have to be more explicit about how to do it.";
        }
        R_Process(##Insert,second,selfobj);
        rtrue;
    }
    if (action == ##Receive) {
        if (Madame_Sosostris in location) {
            "Madame Sosostris won't let you.";
        }
        if (noun hasnt card) {
            "That would look rather incongruous, surely?";
        }
        remove noun;
        InsertCardIntoDeck(noun);
        print "You carefully lay ";
        Defart(inp1);
        " face down on the tarot pack.";
    }
    if (action == ##Search or ##Read or ##LookUnder) {
        "The cards defy mortal examination.";
    }
    rfalse;
];

! References: bell_push.after

[ BellPushAfter ;	! 97180 / 0x17b9c
    if (action == ##Push) {
        if (Madame_Sosostris in Consulting_Room) {
            "Madame Sosostris looks at you in some irritation.";
        }
        if (Madame_Sosostris hasnt general) {
            move Madame_Sosostris to Consulting_Room;
            give curtain general;
            "Madame Sosostris, the famous clairvoyante, breezes in through the hanging curtain and sits behind the table, making waving gestures with her hands.^^~First, this I must know, were you born in an even, or an odd, year?~";
        }
        if (Unreal_City has general) {
            "She has helped enough.";
        }
        print "Madame Sosostris breezes in once more. ~You again,~ she says warily. ~Let us see how your fortunes have changed.~^^";
        SosostrisDeals();
        rtrue;
    }
    rfalse;
];

! References: Madame_Sosostris.life

[ routine97492 ;	! 97492 / 0x17cd4
    if (action == ##Give) {
        if (noun == silk_handkerchief) {
            "Gratefully she blows her nose but then returns the handkerchief. You refold it ingeniously.";
        }
        print "She looks warily at ";
        Defart(noun);
        ".";
    }
    if (action == ##Kiss) {
        "She kisses you forcibly. Her mouth tastes of tobacco.";
    }
    if (action == ##Attack) {
        "She mesmerises you into immobility. She hasn't lived all these centuries in the Latin Quarter for nothing, you know.";
    }
    if (action == ##Answer) {
        if (curtain hasnt general) {
            "She is startled and stares.";
        }
        if (special_word == 32880 or 36525) {
            SosostrisDeals();
            remove Madame_Sosostris;
            give curtain ~general;
            give Madame_Sosostris general;
            give Madame_Sosostris concealed;
            rtrue;
        }
        "~You must answer my question!~  She does seem anxious.";
    }
    rfalse;
];

! References: Down_by_River.after

[ DownByRiverAfter ;	! 97800 / 0x17e08
    if (action == ##Swim or ##Drink) {
        "That foul water?  Not a chance.";
    }
    rfalse;
];

! References: Down_by_River.w_to

[ DownByRiverWest ;	! 97832 / 0x17e28
    if (tourist_boat hasnt open) {
        R_Process(##Enter,tourist_boat);
        rtrue;
    }
    return 170[tourist_boat?];
];

! References: silk_handkerchief.after

[ HandkerchiefAfter ;	! 97852 / 0x17e3c
    if (action == ##Wave && location == Down_by_River && tourist_boat hasnt open) {
        give tourist_boat open;
        "You wave the handkerchief, and the boat glides smoothly across the river toward you.";
    }
    rfalse;
];

! References: tourist_boat.after

[ TouristBoatAfter ;	! 97928 / 0x17e88
    if (action == ##Enter) {
        if (selfobj hasnt open) {
            "Are you in Seine?  There is a river in between you and the boat.";
        }
        rfalse;
    }
    rfalse;
];

! References: hollow_man.life

[ HollowManLife ;	! 97984 / 0x17ec0
    if (action == ##Attack) {
        "You are unable to touch the man. It is as if he isn't there.";
    }
    if (action == ##Order or ##Answer) {
        if (special_word == 40476 || verb == ##Time) {
            print "You lose all sense of time and place as the boat drifts down river... It comes as a considerable relief to your befuddled nerves when the man helps you off the boat again, and you find yourself:^";
            if (tourist_map_of_Paris has moved) {
                PlayerTo(Infinity_Symbol);
                rtrue;
            }
            PlayerTo(Garden_Stream);
            if (hollow_man hasnt general) {
                give hollow_man general;
                move Ace_of_Cups_card to player;
                "^Was any of that real? you wonder, as you relax in the sunshine. But then you realise you are clutching a tarot card which certainly is.";
            }
            rtrue;
        }
        ++hollow_man_cnt;
        if (hollow_man_cnt == 1) {
            "~I don't believe in that place any more. Hurry up please it's time!~";
        }
        if (hollow_man_cnt == 2) {
            "~Hurry up please it's time!~";
        }
        if (hollow_man_cnt == 3) {
            "~HURRY UP PLEASE IT'S TIME!~";
        }
        if (hollow_man_cnt == 4) {
            "He can't be bothered to say anything this time.";
        }
        if (hollow_man_cnt == 5) {
            "It really is time you thought of something.";
        }
        if (hollow_man_cnt == 6) {
            "Time and time again you haven't guessed correctly.";
        }
        if (hollow_man_cnt == 7) {
            "The hollow man must be beginning to think you can't take a hint.";
        }
        "~It's time!~ repeats the hollow man.";
    }
    if (action == ##Ask) {
        "Your question merely echoes inside him.";
    }
    rfalse;
];

! References: Chatelet_les_Halles.after

[ ChateletAfter ;	! 98620 / 0x1813c
    if (action == ##Buy) {
        "~Q'est-ce que vous voulez acheter?~";
    }
    rfalse;
];

! References: surly_shopkeeper.life

[ ShopkeeperLife ;	! 98656 / 0x18160
    if (action == ##Give) {
        if (noun ~= fifty_franc_note) {
            "~Ceci n'est pas argent,~ he explains wearily.";
        }
        remove noun;
        give noun general;
        "He takes the money. ~Q'est-ce que vous desirez?~";
    }
    if (action == ##Answer) {
        if (fifty_franc_note hasnt general) {
            "It's not that he doesn't understand you, he's just obstructive for the sake of it.";
        }
        if (special_word == 31107) {
            move tourist_map_of_Paris to player;
            Achieved(SCORE_MAP);
            give tourist_map_of_Paris moved;
            "Extremely reluctantly he serves you, giving you a tourist map of Paris.";
        }
        if (special_word == 35625) {
            "He refuses to understand you, on principle.";
        }
        "~Non.~  And he folds his arms defiantly. Perhaps he has no such thing.";
    }
    rfalse;
];

! References: Museum_Foyer.s_to

[ FoyerSouth ;	! 98960 / 0x18290
    print "You pass between the steel walls and a light passes over you. Now you know how paper feels in a photocopier";
    if (child(player) == nothing) {
        print ".^";
        return Hall_of_Exhibits;
    }
    " - in this case, one which jams. Steel barriers appear across the corridor, and you are obliged to withdraw back to the foyer.^^After a moment, the barriers recede again.";
];

! References: revolving_door_obj.after

[ RevolvingDoorAfter ;	! 99148 / 0x1834c
    if (action == ##Turn or ##Push or ##Pull) {
        print "You give the revolving door a heave, and it begins to move; but you pause, out of breath, after only a half turn. ";
        if (Museum_Foyer.ne_to == Revolving_Door1) {
            Museum_Foyer.ne_to = Revolving_Door2;
        } else {
            Museum_Foyer.ne_to = Revolving_Door1;
        }
        Museum_Foyer.ne_to;	! not popped
        generic_globvar = 0;
        @get_child SP -> SP ?~label99270;
      .label99263;
        ++generic_globvar;
        @get_sibling SP -> SP ?label99263;
      .label99270;
        @add SP generic_globvar -> SP;
        @je SP 1[?] ?~label99281;
        new_line;
        rtrue;
      .label99281;
        "Interestingly, there's something inside this segment of it.";
    }
    if (action == ##Enter) {
        R_Process(##Go,ne_obj);
        rtrue;
    }
    rfalse;
];

! References: Revolving_Door1.n_to, Revolving_Door2.n_to

[ RevolvingDoorNorth ;	! 99336 / 0x18408
    R_Process(##Push,door1);
    rtrue;
];

! References: door1.after, door2.after

[ MuseumDoorAfter ;	! 99348 / 0x18414
    if (action == ##Push or ##Turn or ##Pull) {
        "You revolve clockwise with the door, and wind up back adjacent to the foyer.";
    }
    rfalse;
];

! References: beach_ball.after

[ BeachBallAfter ;	! 99404 / 0x1844c
    if (action == ##Take or ##Remove) {
        "The beach ball, a welcome dash of colour in this drab monochrome night, is simply too big, cumbersome and round to get hold of.";
    }
    if (action == ##PushDir) {
        if (second == s_obj && location == Museum_Foyer) {
            print "You pass between the steel walls and a light passes over you. Suddenly barriers spring out across the corridor, thumping into the beach ball which rapidly begins to deflate.^^There is a sharp hiss as you nimbly jump over the ball, and then a horrid clang as the barriers come together behind you.^";
            remove beach_ball;
            Achieved(SCORE_SECURITY);
            PlayerTo(Hall_of_Exhibits);
            rtrue;
        }
        routine166092();
        rtrue;
    }
    rfalse;
];

! References: beach_ball.before

[ BeachBallBefore ;	! 99700 / 0x18574
    if (action == ##PushDir) {
        "You bounce the beach ball along in front of you.";
    }
    rfalse;
];

! References: Tarot_box.after

[ TarotBoxAfter ;	! 99736 / 0x18598
    if (action == ##Receive) {
        if (noun hasnt card) {
            "Only cards will fit.";
        }
        rfalse;
    }
    rfalse;
];

! References: Dark_Staircase.after

[ DarkStaircaseAfter ;	! 99768 / 0x185b8
    if (action == ##Listen) {
        "It sounds like a thinly, but enthusiastically, attended football match. There are ragged German chants but only the word ~Eumenides~ pokes out.";
    }
    if (action == ##Go) {
        if (noun == s_obj or d_obj) {
            "You step downward in some confusion, but your senses are assailed by some kind of vision, of a ghastly circle of druids watching your every move and plotting, plotting...^^In horror you turn back.";
        }
        rfalse;
    }
    rfalse;
];

! References: Dark_Staircase.before

[ DarkStaircaseBefore ;	! 100008 / 0x186a8
    set_flag_array(14);
    rfalse;
];

! References: Coven_Cell.daemon

[ CovenCellDaemon ;	! 100016 / 0x186b0
    if (player notin selfobj) {
        rtrue;
    }
    if (Coven_Cell hasnt general) {
        if (tablet_eaten == false) {
            give player general;
        }
        give Coven_Cell general;
        StartTimer(selfobj,3);
        rtrue;
    }
    print "^A key turns in the door and Doktor Stein bursts in. He stops to pat the goat affectionately. ~Cheer up, Dobbin. As soon as I've finished this brutal human sacrifice I'll take you for your walk.~  He feeds Dobbin some sugar-cake. ~They make such marvellous cheese,~ he explains confidentially.^";
    deadflag = DIED;
    if (player has general) {
        "^In a trance, you go willingly to your (somewhat messy) sacrifice...";
    }
    "^Kicking and screaming, you are are dragged off to a grisly sacrifice...";
];

! References: Coven_Cell.after

[ CovenCellAfter ;	! 100348 / 0x187fc
    if (verb == ##Ram) {
        "No, this is a goat. A ~ram~ is a kind of sheep.";
    }
    if (verb == ##Wait || player hasnt general) {
        rfalse;
    }
    "You seem to lack the will any more. The drug must have taken hold.";
];

! References: goat.life

[ GoatLife ;	! 100444 / 0x1885c
    if (action == ##Give) {
        if (noun has edible) {
            remove noun;
            print "The goat happily munches down ";
            Defart(inp1);
            ".";
        }
        if (noun == medicine_bottle && medicine_bottle has locked) {
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "The medicine bottle cracks open in the goat's jaws!";
        }
        if (noun == daisy_chain) {
            "For heaven's sake, the daisy chain is far too useful for that.";
        }
        rfalse;
    }
    if (action == ##Order or ##Answer or ##Ask) {
        if (special_word == 31926) {
            print "In a harsh voice, the goat intones:^^";
            VersionSub();
            rtrue;
        }
        "Grunt!";
    }
    rfalse;
];

! References: cell_door.after

[ CelldoorAfter ;	! 100640 / 0x18920
    if (action == ##Knock) {
        "They're coming as fast as they can!  Ritual doesn't just happen by itself, you know.";
    }
    rfalse;
];

! References: Cabinet_Room.after

[ CabinetRoomAfter ;	! 100704 / 0x18960
    if (action == ##Read) {
        if (noun in glass_cabinet) {
            "It's too dark to see much inside the cabinet.";
        }
        rfalse;
    }
    rfalse;
];

! References: glass_cabinet.after

[ CabinetAfter ;	! 100752 / 0x18990
    if (action == ##Attack) {
        if (selfobj has open) {
            "Just how broken do you want it to be?";
        }
        give selfobj open;
        StartTimer(selfobj,5);
        "You smash the glass... noisily. Still, the cabinet is open now.";
    }
    if (action == ##Open or ##Close) {
        "The hinges are too secure.";
    }
    rfalse;
];

! References: glass_cabinet.daemon

[ CabinetDAemon ;	! 100868 / 0x18a04
    if (game_section == T_HAMBURG && location ~= Coven_Cell) {
        print "^Finally reacting to the alarm you set off, Doktor Stein appears and steps toward you, clapping his hands sharply. And dozens of robed figures leap out of the darkness - but these are no security guards. Their faces are painted hideously and they betray no emotion as they pinion you tight...^^~So, Meldrew. It is all as it was prophesied,~ says Stein in a perfectly conversational tone as he forces your mouth open and makes you swallow a violet pill.^^~One of your apothecary ancestors made this drug!  Appropriate, no?~^^", "You feel queasy, but this is perhaps the least of your problems as they drag you off...^^";
        StartTimer(Coven_Cell,0);
        tablet_eaten = false;
        PlayerTo(Coven_Cell);
        rtrue;
    }
    rfalse;
];

! References: smooth_round_stone.after

[ RoundStoneAfter ;	! 101280 / 0x18ba0
    if (action == ##Take) {
        if (selfobj has general) {
            "Reach down the grating as you may, it remains just beyond reach.";
        }
        rfalse;
    }
    rfalse;
];

! References: Ruined_Castle_Cafe.before

[ CafeBefore ;	! 101336 / 0x18bd8
    if (action == ##Look) {
        if (Cups_and_Glasses has visited && complicated_looking_bomb has concealed) {
            "^Over in one corner, you can see a little square window, behind which must be the store of cups and glasses. Remembering this, you are distracted and unable to enjoy the entertainment. Even the table is annoying. It must have one leg shorter than the rest, or something, because it rattles now and then.";
        }
        rfalse;
    }
    if (action == ##Strike) {
        "You look rather conspicuous striking the rod on the cafe table, but everyone else assumes you're part of the cabaret. Anyway, the rod charges up as usual.";
    }
    rfalse;
];

! References: Ruined_Castle_Cafe.initial

[ CafeInitial ;	! 101636 / 0x18d04
    if (complicated_looking_bomb has concealed) {
        StartTimer(complicated_looking_bomb,10);
    }
    rfalse;
];

! References: Ruined_Castle_Cafe.each_turn

[ routine101652 ;	! 101652 / 0x18d14
    if (complicated_looking_bomb hasnt concealed) {
        new_line;
        routine103600();
    } else {
        print "^The table rattles again.^";
    }
    rfalse;
];

! References: cafe_table.after

[ CafeTableAfter ;	! 101692 / 0x18d3c
    if (action == ##LookUnder or ##Search) {
        if (complicated_looking_bomb has concealed) {
            give complicated_looking_bomb ~concealed;
            move complicated_looking_bomb to Ruined_Castle_Cafe;
            "Now don't panic, but there's a ticking bomb loosely taped to the underside of the table you're sitting at!";
        }
        "You make no further alarming discoveries.";
    }
    if (action == ##Enter) {
        "Even in a cafe as lively as this, your natural English inhibitions make it impossible for you to climb up on the table.";
    }
    rfalse;
];

! References: complicated_looking_bomb.daemon

[ BombDaemon ;	! 101884 / 0x18dfc
    if (location ~= Ruined_Castle_Cafe) {
        rfalse;
    }
    if (complicated_looking_bomb hasnt concealed) {
        if (209[blue_wire?] ~= array_25223->0 || 207[green_wire?] ~= array_25223->1 || 210[black_wire?] ~= array_25223->2 || 208[red_wire?] ~= array_25223->3) {
            print "^Click!  Perhaps there's more to bomb disposal than you thought.^";
        } else {
            print "^Click!  The timer runs out, but the bomb was disarmed. You pocket the timer and hide the rest of the evidence under the table.^";
            move timer_detonator to player;
            give timer_detonator ~static;
            remove complicated_looking_bomb;
            rtrue;
        }
    }
    print "^In a sudden cataclysm, there is an enormous explosion from your table, blowing out all the arrowslit windows, making a thunderous noise, starting a minor fire, and of course having one other consequence:^";
    deadflag = DIED;
    rfalse;
];

! References: complicated_looking_bomb.before

[ BombBefore ;	! 102212 / 0x18f44
    if (action == ##Take) {
        deadflag = PRISON;
        "Suddenly, someone catches sight of you with the bomb and screams. One thing leads to another, and, well, you know how it is with foreign legal systems. At least the bomb gets defused, and twenty-five years isn't all that long.";
    }
    rfalse;
];

! References: timer_detonator.daemon

[ TimerDaemon local1 local2 local3 ;	! 102360 / 0x18fd8
    local1 = 206[timer_detonator?];
    local2 = parent(local1);
    selfobj.time_left = 0;
  .label102372;
    if (parent(local1) ~= nothing) {
        local1 = parent(local1);
        jump label102372;
    }
    if (location == local1) {
        print "^You hear a sharp click!^";
        if (local2 == 63[photographers_flash?]) {
            new_line;
            local3 = child(local2);
            if (local3 == 206[timer_detonator?]) {
                local3 = sibling(local3);
            }
            if (local3 == 0) {
                "But the flash does nothing.";
            }
            if (local3 ~= 105[obj105_nasty_looking_red_battery?]) {
                "And the flash gives a pathetically small flash of light.";
            }
            print "The flash suddenly gives an enormous magnesium-flare flash, almost blinding in its intensity. Your eyes take a little while to adjust. ";
            if (location == Ruined_Castle_Cafe) {
                print "Consequently you can only hear as the cabaret audience gives you a round of applause for what they think is a magic trick.";
            }
            local3 = 63[photographers_flash?];
            local3 = parent(local3);
            if (local3 == 258[mirrored_device?] && photographers_flash hasnt general) {
                give photographers_flash general;
                print "Consequently you can only hear as the smudge on the horizon rises from the waves, becomes an enormous Kraken sea monster and lunges for the stone tower. (Considering this is supposed to be a Greek myth it feels surprisingly like a Japanese 1960s creature film.)  The Kraken swipes at you, overreaches itself and falls over forward, impaling itself extremely messily on the pharos. Your eyes just about recover by the time the rest of your body is crushed by its weight.^^Up on Mount Olympus, Zeus is still cross. ~Take me to your Leda~, you wittily demand, but this does not seem to improve matters. Poseidon also looks rather fed up, but luckily a sizeable faction of goddesses takes your side and arranges to have you resurrected...^";
                Achieved(SCORE_ANDROMEDA);
                remove photographers_flash;
                give Lighthouse ~visited;
                give Lighthouse ~scored;
                local1 = child(player);
              .label103161;
                if (local1 ~= 0) {
                    local2 = sibling(local1);
                    if (local1 ~= 115[daisy_chain?]) {
                        move local1 to Lighthouse;
                        give local1 ~worn;
                    }
                    local1 = local2;
                    jump label103161;
                }
                PlayerTo(Family_Tree);
                rtrue;
            }
            new_line;
            if (Austin in location) {
                "^Austin jumps with fear, then slouches back again into his ~cool~ pose.";
            }
            if (irate_squirrel_friend in location) {
                "^The squirrel covers his eyes with his paws for a moment.";
            }
        }
    }
    rfalse;
];

! References: timer_detonator.after

[ TimerAfter local1 ;	! 103296 / 0x19380
    if (action == ##Read) {
        print "The timer seems quite simple to set. ";
        local1 = selfobj.number;
        if (selfobj.time_left ~= 0) {
            print "The clock is running, and currently at ";
            EnglishNumber(local1);
            " minutes.";
        }
        if (local1 ~= 0) {
            routine103600();
            rtrue;
        }
        "At present the clock is reset to zero.";
    }
    if (action == ##Set) {
        if (selfobj.time_left ~= 0) {
            "It is already running!";
        }
        StartTimer(selfobj,10);
        selfobj.time_left = 1;
        "You wind back the timer to ten minutes, and off it goes.";
    }
    rfalse;
];

! References: green_wire.after, red_wire.after, blue_wire.after, black_wire.after

[ WireAfter local1 ;	! 103492 / 0x19444
    if (action == ##Pull) {
        if (selfobj has general) {
            "That one's already pulled out.";
        }
        give selfobj general;
        print "You pull out ";
        Defart(inp1);
        print ". ";
        local1 = complicated_looking_bomb.time_left;
        complicated_looking_bomb.time_left = local1 + 1;
        array_25223->local1 = selfobj;
        if (local1 == 3[s_obj?]) {
            give complicated_looking_bomb general;
            "All four wires are now disconnected.";
        }
        rtrue;
    }
    rfalse;
];

[ routine103600 local1 local2 ;	! 103600 / 0x194b0
    print "The clock is ticking downwards, and is ";
    if (complicated_looking_bomb.number == 0) {
        print "right on the red zone!  ";
    } else {
        EnglishNumber(complicated_looking_bomb.number);
        print " minute";
        if (complicated_looking_bomb.number ~= 1) {
            print "s";
        }
        print " short of the red zone. ";
        if (complicated_looking_bomb.number == 5) {
            set_flag_array(10);
        }
    }
    local1 = complicated_looking_bomb.time_left;
    if (local1 == 0) {
        "All four wires are plugged into the timer.";
    }
    if (local1 == 1[?]) {
        print "Only the ";
    }
    if (local1 == 2[?]) {
        print "The ";
    }
    if (local1 == 3[s_obj?]) {
        print "The ";
    }
    if (local1 == 4[e_obj?]) {
        "None of the wires are plugged in.";
    }
    local2 = local1;
    if (red_wire has general) {
        PrintShortName(red_wire);
        --local2;
        routine103900(local2);
    }
    if (green_wire has general) {
        PrintShortName(green_wire);
        --local2;
        routine103900(local2);
    }
    if (blue_wire has general) {
        PrintShortName(blue_wire);
        --local2;
        routine103900(local2);
    }
    if (black_wire has general) {
        PrintShortName(black_wire);
        --local2;
        routine103900(local2);
    }
    if (local1 == 1[?]) {
        " is unplugged.";
    }
    " are unplugged.";
];

[ routine103900 local1 ;	! 103900 / 0x195dc
    if (local1 == 1[?]) {
        print " and ";
        rfalse;
    }
    if (local1 == 0) {
        rfalse;
    }
    print ", ";
    rtrue;
];

! References: Cups_and_Glasses.each_turn

[ routine103924 local1 ;	! 103924 / 0x195f4
    selfobj.number = selfobj.number + 1;
    local1 = selfobj.number;
    if (local1 == 2[?]) {
        "^There is a scuffling noise as some people gather up on the pavement outside the skylight.";
    }
    if (local1 == 3[s_obj?]) {
        "^The men begin to talk like conspirators, but half in chants. You catch occasional sounds, but can make little sense of them.";
    }
    if (local1 == 4[e_obj?]) {
        "^Alarmingly, you catch the odd word ~incendiary~ and are almost sure you can make out someone say ~accursed Meldrew~ (in the old-fashioned way, you know, so that ~accursed~ rhymes with ~dead~). Paranoia, bound to be. There surely can't really be a conspiracy of druid-worshippers out to get you?";
    }
    if (local1 == 5[w_obj?]) {
        "^~The prophecy must be fulfilled!~ one warns, in an unearthly voice which suddenly carries. The others hush him.";
    }
    if (local1 == 6[ne_obj?]) {
        "^The men walk away, perhaps a few feet, perhaps a mile.";
    }
    rfalse;
];

! References: cups_and_glasses.after

[ routine104396 ;	! 104396 / 0x197cc
    if (action == ##Search or ##Read or ##LookUnder) {
        if (model_ship hasnt general) {
            "Nothing else.";
        }
        give model_ship ~general;
        give model_ship moved;
        move model_ship to player;
        "In fact there's nothing hidden among the crates but a model sailing ship. You pick it up from force of habit.";
    }
    rfalse;
];

! References: ship_in_a_bottle.after

[ routine104504 ;	! 104504 / 0x19838
    if (action == ##Read) {
        if (ship_in_a_bottle notin player) {
            "You can't get a good look from here.";
        }
        if (game_section ~= T_TAROT) {
            "You admire the fine detail on the model sailing ship, and feel strangely drawn to it. But back out of the world of the Tarot box, nothing else could happen.";
        }
        if (location == Lighthouse) {
            "Bright sunshine glints off the glass bottle, making it impossible to see detail within.";
        }
        move ship_in_a_bottle to Souvenirs_Room;
        PlayerTo(Aboard_Ship,1);
        "You look very closely at the fine detail on the model sailing ship. Perhaps it's the distorting glass of the bottle, perhaps your romantic imagination, but the deck seems more detailed, the rigging might almost be swaying, the little figure by one mast might almost be alive...^^In fact, the closer you look the more sea-sick you feel.^^Thank heavens for the deck rail, something to hang on to while this moment of queasiness passes.";
    }
    rfalse;
];

! References: model_ship.after, stick_with_an_anchor.after

[ routine104972 ;	! 104972 / 0x19a0c
    if (verb == ##Pull) {
        if (noun == model_ship) {
            remove model_ship;
            move stick_with_an_anchor to player;
            itobj = stick_with_an_anchor;
            give itobj moved;
            "As you pull the anchor chain, the masts fold inwards and the decks concertina back, until you're holding no more than a tight bundle of sticks.";
        }
        remove stick_with_an_anchor;
        move model_ship to player;
        itobj = model_ship;
        "As you pull the anchor chain, the sticks spring back outwards into the fully-rigged model sailing ship you knew of old.";
    }
    if (verb == ##Insert && second == mounted_bottle) {
        if (noun == model_ship) {
            "The model ship is, of course, far too large to fit into the bottle.";
        }
        if (noun == stick_with_an_anchor) {
            remove mounted_bottle;
            remove stick_with_an_anchor;
            move ship_in_a_bottle to player;
            give ship_in_a_bottle moved;
            Achieved(SCORE_SHIP);
            "The bundle of sticks will just fit through the bottle's neck. With a sudden spring, just as the last of the stick passes the neck, its masts fold out... and you have put the ship into the bottle.";
        }
    }
    if (verb == ##Wave && noun == stick_with_an_anchor) {
        "Ever the optimist.";
    }
    rfalse;
];

! References: Sea_Shore.description

[ routine105380 ;	! 105380 / 0x19ba4
    print "A rough rocky sea shore below barely-climbable cliffs, against which inviting deep blue sea laps. It seems to be early morning, soon after dawn, from the look of the sun on the water.^";
    if (Lighthouse has visited && Lighthouse hasnt general) {
        give Lighthouse general;
        "^You can just make out the Pharos atop the cliffs. But it seems to be earlier, nearer dawn, than your last visit.";
    }
    rtrue;
];

! References: Sea_Shore.after

[ routine105584 ;	! 105584 / 0x19c70
    if (action == ##Drink) {
        "Salt water!  No thanks.";
    }
    if (action == ##Swim) {
        if (poseiden_warning == false) {
            poseiden_warning = true;
            "Mmm. Here is your first and only warning: the sea is the domain of Poseidon, and he's not what you'd call a gentleman.";
        }
        deadflag = MYTH;
        "As you dive into the sea, you catch sight of Andromeda looking suddenly cheerful. It soon becomes apparent why, as a Kraken wakes from the depths of the ocean and swipes you for a quick snack. You seem to have replaced her as sacrifice... a Pyrrhic victory which even the prospect of stellification does little to assuage.";
    }
    rfalse;
];

! References: Andromeda.description

[ routine105888 ;	! 105888 / 0x19da0
    print "Avert your eyes. She is naked";
    if (amber_hairband has static) {
        print " (unless you count a hairband)";
    }
    print ", as was fashionable for human sacrifices: the victim left overnight without food or shelter until the dawn. It has to be said that she doesn't look all that keen to be rescued";
    if (photographers_flash hasnt general) {
        ".";
    }
    ".^^Of course you've already rescued her, in a sense, but that's not due to happen for an hour or two yet by her time, so you can hardly expect thanks. Gives you a nice warm feeling inside, all the same.";
];

! References: Andromeda.life

[ routine106172 ;	! 106172 / 0x19ebc
    if (action == ##Kiss) {
        "She evades you deftly, having had years of practice with Greek men.";
    }
    if (action == ##Attack) {
        "No need, if the sea-monster is all it's cracked up to be.";
    }
    if (action == ##Give) {
        if (noun has edible) {
            if (noun == Ekmek_Special) {
                remove noun;
                give amber_hairband ~static;
                give amber_hairband moved;
                move amber_hairband to player;
                "She smiles as if to say there's not much point watching her waist-line any more, and hungrily wolfs down her favourite dessert. As a gesture of thanks, she takes off her amber hairband and hands it you. Quickly she readopts her noble pose, however, just in case anyone else is looking.";
            }
            "She looks with obvious hunger, but her sense of duty wins out and she refuses.";
        }
        "She looks down her nose at you.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "Andromeda hisses something contemptuous at you in Greek. (Attic, not Demotic, ironically enough, but then it's all Greek to you.)";
    }
    rfalse;
];

! References: Clifftop_Walk.e_to

[ routine106648 ;	! 106648 / 0x1a098
    if (herd_of_goats hasnt general) {
        "The goats hiss and butt against you, not letting you through.";
    }
    print "The goats obediently part to allow you to get by.^";
    return 224[Outside_Taverna?];
];

! References: herd_of_goats.life

[ routine106732 ;	! 106732 / 0x1a0ec
    if (action == ##Order or ##Ask or ##Answer) {
        "Grunt!";
    }
    rfalse;
];

! References: small_thorny_tree.after

[ routine106752 ;	! 106752 / 0x1a100
    if (action == ##Climb or ##Enter) {
        "The thorns deter you.";
    }
    rfalse;
];

! References: Eraina_Taverna.after

[ routine106776 ;	! 106776 / 0x1a118
    if (action == ##Buy) {
        "Given the language difficulty, you'd better resort to barter.";
    }
    rfalse;
];

! References: Eraina_Taverna.each_turn

[ routine106824 local1 ;	! 106824 / 0x1a148
    local1 = random(13);
    if (local1 == 1[?]) {
        "^The diners grumble and play backgammon viciously.";
    }
    if (local1 == 2[?]) {
        "^The bartender gives you a hard stare.";
    }
    if (local1 == 3[s_obj?]) {
        "^A fight breaks out, over an obscure question to do with somebody's second cousin.";
    }
    if (local1 == 4[e_obj?]) {
        "^The gentle sound of bazouki music strikes up in the background, gradually rising to an intolerable pitch. After a moment comes a dull thud and a strangled noise, then blessed quiet.";
    }
    rfalse;
];

! References: Ekmek_Special.after

[ routine107076 ;	! 107076 / 0x1a244
    if (action == ##Take) {
        if (selfobj hasnt moved && copper_coin hasnt general) {
            "You can't understand a word of what the bartender says, but the drift is clear enough. Not until you pay for it.";
        }
        rfalse;
    }
    rfalse;
];

! References: bartender.life

[ routine107164 ;	! 107164 / 0x1a29c
    if (action == ##Give) {
        if (noun == copper_coin) {
            remove copper_coin;
            give copper_coin general;
            "The bartender takes the coin wearily, with a ~how can you eat at a time like this?~ look.";
        }
        print "The bartender looks at ";
        Defart(noun);
        " with a glazed expression.";
    }
    if (action == ##Ask or ##Answer or ##Order) {
        "Being an educated person, the bartender speaks a little Latin and some Aramaic. Being an uneducated one, you don't, and communication proves impossible.";
    }
    if (action == ##Attack or ##Kiss) {
        "Here, surrounded by all his cronies?";
    }
    rfalse;
];

! References: Sacred_Earth.s_to

[ routine107416 ;	! 107416 / 0x1a398
    print "Zeus, chief of all the gods, appears and hurls a thunderbolt down just before you begin to cross into the Temple. ";
    if (big_electricians_switch has on) {
        deadflag = DIED;
        "With the kind of calculation only a god could make, Zeus has worked out exactly what would happen and aimed the thunderbolt so that it hits you straight in the back despite your attempt to weave about. Pretty impressive prediction, is your last thought.";
    }
    if (rod_of_luck has general) {
        print "Astonishingly, you beat the luck of the gods and slip into the temple just clear of the thunderbolt. ~Damn, missed!~ says a sepulchral voice from without.^";
        return 233[Temple_of_Zeus?];
    }
    deadflag = DIED;
    "With the luck of the gods, Zeus' thunderbolt strikes you just about exactly in the back, despite your attempts to weave about.";
];

! References: Sacred_Earth.before

[ routine107832 ;	! 107832 / 0x1a538
    set_flag_array(4);
    rfalse;
];

! References: Temple_of_Zeus.n_to

[ routine107840 ;	! 107840 / 0x1a540
    print "~I'll get you this time, worm!~ bellows Zeus, and hurls another thunderbolt, but now he's angry his aim is right off. You survive once more.^";
    return 232[Sacred_Earth?];
];

! References: inscribed_stone.description

[ routine107936 ;	! 107936 / 0x1a5a0
    print "The stone bears two inscriptions, side by side:^";
    0-->8 = 2 | 0-->8;
    print "^   #. [] = # +*+  __             an-ta re-im ka u bir ka-i^             |||       ^        |        |     ^   / # -+- :; # -+-                 ka ne : to-ro-ma ka ur^        |        |     ^                       ^   >>> -> # (---)         .je-fe-im ka ur-a an-ge to-ro-ma^             |||^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];

! References: symbol.description

[ routine108268 ;	! 108268 / 0x1a6ec
    0-->8 = 2 | 0-->8;
    print "   (---)  (---)  (---)  (---)^";
    0-->8 = 65533 & 0-->8;
    rtrue;
];

! References: Inner_Sanctum.initial

[ routine108336 ;	! 108336 / 0x1a730
    StopDaemon(Cross_Centre);
    rfalse;
];

! References: Homer.life

[ routine108344 ;	! 108344 / 0x1a738
    if (action == ##Order or ##Ask) {
        if (Homer has general) {
            "Homer is far too busy composing Book XIV of the Iliad.";
        } else {
            "Homer is asleep.^";
        }
        rfalse;
    }
    if (action == ##WakeOther) {
        if (Homer has general) {
            "Homer is awake already.";
        }
        give Homer general;
        Homer.time_left = 0;
        Homer.initial = "Homer sits half-awake, clutching his syrinx.";
        "Homer wakes up, with a start. ~I suppose you want the syrinx,~ he grumbles, ~they always do. There are three questions you must answer wisely. The usual deal.~^^(He seems to be under an enchantment and able to speak modern English, or at least American.)^^~First: who is the brother of Menelaus?~";
    }
    if (action == ##Attack) {
        "What, strike the greatest poet who ever lived?";
    }
    if (action == ##Answer) {
        if (Homer hasnt general) {
            "Homer is asleep.";
        }
        if (Homer.time_left == 3) {
            "Homer glares back.";
        }
        if (Homer.time_left == 0) {
            if (special_word == 29730) {
                Homer.time_left = 1;
                "~Mph,~ he says (untranslatably). ~But can ya see the future?  Who's gonna rule Alexandria after the fall of the guy they're gonna call Alexander the Big?~";
            }
          .label108857;
            routine109044();
            "~Hopeless,~ he says dismissively and falls asleep.";
        }
        if (Homer.time_left == 1) {
            if (special_word == 37650) {
                Homer.time_left = 2;
                "~What's your favorite color?~";
            }
            jump label108857;
        }
        if (special_word == 41664) {
            Homer.initial = "Homer glares at you through sightless eyes.";
            move Pan_pipes to player;
            Homer.time_left = 3;
            Achieved(SCORE_HOMER);
            "Homer reluctantly hands you the syrinx. ~Now leave me alone, I got six books of the Iliad left to compose.~";
        }
        jump label108857;
    }
    rfalse;
];

[ routine109044 ;	! 109044 / 0x1a9f4
    give Homer ~general;
    Homer.initial = "Homer is asleep again, his syrinx tight in his arms.";
    rtrue;
];

! References: Pan_pipes.after

[ routine109056 local1 ;	! 109056 / 0x1aa00
    if (action == ##Blow) {
        if (gas_mask has worn) {
            "With the gas mask on?";
        }
        if (location == Clifftop_Walk) {
            "The goats are amused by your derisory playing.";
        }
        if (location ~= Cave_Mouth) {
            "You sound off some dissonant notes.";
        }
        print "Seized by divine inspiration, you launch into J. S. Bach's ";
        local1 = random(5);
        if (local1 == 1[?]) {
            print "Prelude number 1";
        }
        if (local1 == 2[?]) {
            print "Passacaglia";
        }
        if (local1 == 3[s_obj?]) {
            print "Chromatic Fantasy and Fugue";
        }
        if (local1 == 4[e_obj?]) {
            print "partita for unaccompanied flute";
        }
        if (local1 == 5[w_obj?]) {
            print "duet number four";
        }
        if (Oracle in location) {
            ".";
        }
        move Oracle to location;
        give flaming_bronze_urn ~static;
        give flaming_bronze_urn scenery;
        print ". Suddenly the great god Apollo appears before you!  As he speaks the very rock reverberates.^^   ~All wisdom is mine, mortal!^   Though you shall seek out your curse^   A thousand years and more. Now ask!~^^Apollo, as he vanishes, laughs in that style more recently popularised by Third World dictators and mad scientists. His priestess, the Oracle, steps out of the shadows.^";
        Achieved(SCORE_ORACLE);
        rtrue;
    }
    rfalse;
];

! References: Cross_Centre.initial

[ routine109576 ;	! 109576 / 0x1ac08
    StartDaemon(selfobj);
    rfalse;
];

! References: Cross_Centre.after

[ routine109584 ;	! 109584 / 0x1ac10
    if (verb == ##Take or ##Remove && noun == inscribed_stone or old_timber_spar && noun has scenery) {
        give noun ~scenery;
        give noun moved;
    }
    rfalse;
];

! References: Cross_Centre.before

[ routine109612 ;	! 109612 / 0x1ac2c
    if (verb == ##Take or ##Remove && noun == inscribed_stone or old_timber_spar && noun has static) {
        inscriptions.initial = "The two-foot opening is clear again.";
    }
    rfalse;
];

! References: Cross_Centre.daemon

[ routine109644 ;	! 109644 / 0x1ac4c
    if (parent(statue_of_Poseidon) == Northeast_Cross && parent(statue_of_Demeter) == Northwest_Cross && parent(statue_of_Ares) == Southeast_Cross && parent(statue_of_Dionysus) == Southwest_Cross) {
        if (inscriptions has open) {
            rtrue;
        }
        give inscriptions open;
        Achieved(SCORE_TEMPLE);
        "^You hear the noise of stone grating against stone.";
    }
    rfalse;
];

! References: inscriptions.after

[ routine109740 ;	! 109740 / 0x1acac
    if (action == ##Receive) {
        if (selfobj hasnt open) {
            rfalse;
        }
        if (noun ~= inscribed_stone or old_timber_spar) {
            CDefart(noun);
            print " would simply fall through.";
            new_line;
            rtrue;
        }
        if (noun == inscribed_stone) {
            selfobj.initial = "The opening is securely wedged with the stone.";
        } else {
            selfobj.initial = "The opening is securely wedged with the prop.";
        }
        give noun scenery;
        give noun ~moved;
        give noun ~scored;
        move noun to location;
        print "You wedge ";
        Defart(noun);
        print " across the opening.";
        new_line;
        rtrue;
    }
    rfalse;
];

! References: gleaming_amber_gem.after

[ routine109848 ;	! 109848 / 0x1ad18
    if (action == ##Take) {
        if (selfobj has moved) {
            rfalse;
        }
        print "There is a horrible screeching sound as a trap is sprung. ";
        if (inscribed_stone has scenery || old_timber_spar has scenery) {
            print "The walls begin to crush together: but are securely wedged, and cannot move...^^";
            rfalse;
        }
        deadflag = DIED;
        "The opening crushes together, and so do the walls!  They reduce you to powdered dog biscuit in a matter of seconds.";
    }
    rfalse;
];

! References: statue_of_Poseidon.after, statue_of_Demeter.after, statue_of_Ares.after, statue_of_Dionysus.after

[ routine110036 ;	! 110036 / 0x1add4
    if (action == ##Push) {
        "Perhaps you should say which way to push.";
    }
    if (action == ##PushDir) {
        if (inscriptions has open) {
            "The only direction to push the statue in is to the centre of the cross, but there's a pit open in the floor there.";
        }
        if (second ~= u_obj or d_obj) {
            routine166092();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: statue_of_Poseidon.before, statue_of_Demeter.before, statue_of_Ares.before, statue_of_Dionysus.before

[ routine110156 ;	! 110156 / 0x1ae4c
    if (action == ##PushDir) {
        "You heave the statue along with you.";
    }
    rfalse;
];

! References: Oracle.life

[ routine110184 ;	! 110184 / 0x1ae68
    if (action == ##Attack or ##Kiss or ##ThrowAt) {
        "As you ought to know, the Oracle is inviolable.";
    }
    if (action == ##Ask or ##Order or ##Answer) {
        routine110288();
        rtrue;
    }
    rfalse;
];

[ routine110240 local1 ;	! 110240 / 0x1aea0
    if (local1 < 0) {
        local1 = 0 - local1;
    }
    if (local1 == 0) {
        print "nought";
    }
    if (local1 == 1[?]) {
        print "a pace";
        rfalse;
    }
    if (local1 >= 2) {
        EnglishNumber(local1);
    }
    print " paces";
    rtrue;
];

[ routine110288 ;	! 110288 / 0x1aed0
    if (priest_cnt == 3) {
        "The priestess has told you enough.";
    }
    if (Oracle hasnt general) {
        "The priestess remains silent. Only by an offering can the wisdom of Apollo be gained.";
    }
    give Oracle ~general;
    ++priest_cnt;
    print "The priestess, Pythian oracle of Loxias, seems hardly to hear or understand: but goes into a trance, swaying to a sensuous rhythm: and chants, in English,^^";
    if (priest_cnt == 1) {
        print " ~As Hephaestus, master of the metals^  uncovered the gilden sunrise of Helicon^  so, in ";
        routine110240(StrongboxX);
        print " and ";
        routine110240(StrongboxY);
        print "^  when six arches have stood sixty years^  shall even a shade's remains be cast.~";
    }
    if (priest_cnt == 2) {
        print " ~Like the eruptions of Sicilian mounts^  shall come devices to ruin a castle,^  which no bronze armour can withstand^  save, it may be, a veil of the neck.~";
    }
    if (priest_cnt == 3) {
        print " ~Your ancestor, pestle in hand^  made the salve you shall need^  to defy the Druids' earthly band:^  take care, mortal, take heed.~";
    }
    new_line;
    if (priest_cnt == 1) {
        "^Apollo is what you might call an annoying git, were he not also an alarmingly powerful deity.";
    }
    rtrue;
];

! References: flaming_bronze_urn.after

[ routine110880 ;	! 110880 / 0x1b120
    if (action == ##Receive) {
        if (noun == player) {
            R_Process(##Enter,selfobj);
            rtrue;
        }
        remove noun;
        if (Oracle notin location) {
            "Perhaps the gods no longer inhabit such places. Your offering burns to nothing, for nothing.";
        }
        if (noun == fig) {
            move fig to Outside_Taverna;
            fig.initial = "The god Apollo moves in mysterious ways, for another fig has appeared on the tree.";
            give fig ~moved;
        }
        if (noun has edible) {
            give Oracle general;
            "You have pleased the god Apollo - Loxias, god of words and counsel, as he was once called!  Very wise.";
        }
        "The god Apollo is unimpressed with your offering, which feeds the eternal flame.";
    }
    if (action == ##Enter) {
        "You have no desire to be burnt.";
    }
    rfalse;
];

! References: Lighthouse.description

[ routine111128 ;	! 111128 / 0x1b218
    print "You stand atop a pinnacle of stone, on an early Pharos, or lighthouse. Considerately enough, the builders have provided a spiral staircase down. ";
    if (Sea_Shore has visited) {
        print "The cliffs below are familiar, but it's a little later in the day than your arrival on the sea shore. ";
    }
    if (photographers_flash has general) {
        print "Much traffic plies across the bay, and trade seems to be picking up again now that the Kraken has gone.";
    } else {
        print "There seems to be very little traffic at the moment, though a smudge on the horizon might possibly be a quinquireme.";
    }
    print "^^In the centre of the pinnacle is a marvellous device of polished bronze mirrors, its open end pointed out across the bay. ";
    if (photographers_flash has general) {
        "The Mediterranean sparkles in the hot afternoon sun.";
    } else {
        "The sun is rising and the sky is clear blue over the Mediterranean: it's going to be a beautiful day.";
    }
    rfalse;
];

! References: Lighthouse.d_to

[ routine111604 ;	! 111604 / 0x1b3f4
    routine111612();
    return 259[Greek_Frieze1?];
];

[ routine111612 ;	! 111612 / 0x1b3fc
    if (photographers_flash in mirrored_device) {
        print "(Out of the corner of your eye, you notice the flash fall out of the device.)^";
        move photographers_flash to Lighthouse;
    }
    rtrue;
];

[ routine111676 ;	! 111676 / 0x1b43c
    if (verb == ##Go && noun == d_obj) {
        routine111612();
    }
    rfalse;
];

! References: some_landlubbers_direction.after

[ routine111692 ;	! 111692 / 0x1b44c
    "Here aboard ship, such a landlubber's direction seems inappropriate.";
];

! References: Aboard_Ship.each_turn

[ routine111740 ;	! 111740 / 0x1b47c
    if (port_obj in Compass) {
        rfalse;
    }
    move n_obj to flagpole;
    move s_obj to flagpole;
    move e_obj to flagpole;
    move w_obj to flagpole;
    move ne_obj to flagpole;
    move nw_obj to flagpole;
    move se_obj to flagpole;
    move sw_obj to flagpole;
    move port_obj to Compass;
    move starboard_obj to Compass;
    move aft_obj to Compass;
    move fore_obj to Compass;
    move some_landlubbers_direction to Compass;
    StartDaemon(selfobj);
    rfalse;
];

! References: Aboard_Ship.daemon

[ routine111820 ;	! 111820 / 0x1b4cc
    if (location has ship_flag) {
        rfalse;
    }
    StopDaemon(selfobj);
    remove port_obj;
    remove starboard_obj;
    remove aft_obj;
    remove fore_obj;
    remove some_landlubbers_direction;
    move n_obj to Compass;
    move s_obj to Compass;
    move e_obj to Compass;
    move w_obj to Compass;
    move ne_obj to Compass;
    move nw_obj to Compass;
    move se_obj to Compass;
    move sw_obj to Compass;
    rfalse;
];

! References: mast_and_rigging.after

[ routine111872 ;	! 111872 / 0x1b500
    if (action == ##Enter or ##Climb) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];

! References: Up_the_Mast.w_to

[ routine111888 ;	! 111888 / 0x1b510
    print "You wander out onto the flagpole, which bows and bends alarmingly, until suddenly...^^Crack!  And you are falling";
    if (flag_of_the_British_Merchant_Navy hasnt general) {
        deadflag = DIED;
        ", plummeting, head over heels to the hard wooden deck and the inevitable iron fixtures...";
    }
    move flag_of_the_British_Merchant_Navy to Aboard_Ship;
    give flag_of_the_British_Merchant_Navy ~concealed;
    give flag_of_the_British_Merchant_Navy ~general;
    remove flagpole;
    move old_timber_spar to Aboard_Ship;
    move player to Aboard_Ship;
    location = Aboard_Ship;
    Achieved(SCORE_FLAG);
    "... but gracefully, as the flag billows out into a parachute, until it suddenly tears out of your hand and you come down in an ignominious heap.";
];

! References: Up_the_Mast.d_to

[ routine112160 ;	! 112160 / 0x1b620
    if (flag_of_the_British_Merchant_Navy has general) {
        give flag_of_the_British_Merchant_Navy ~general;
        print "You are obliged to leave hold of the flag en route.^^";
    }
    return 266[Aboard_Ship?];
];

! References: Up_the_Mast.after

[ routine112212 ;	! 112212 / 0x1b654
    if (action == ##Jump) {
        print "You jump (madly) from the crow's nest ";
        if (flag_of_the_British_Merchant_Navy has general) {
            print "(tearing the flag as you go) ";
        }
        deadflag = DIED;
        "to a colourful demise on the deck below.";
    }
    if (action == ##Strike or ##Point) {
        "Up here?";
    }
    rfalse;
];

! References: Up_the_Mast.before

[ routine112312 ;	! 112312 / 0x1b6b8
    if (action == ##Drop) {
        move noun to Aboard_Ship;
        if (noun == medicine_bottle && noun has locked) {
            give medicine_bottle ~locked;
            give medicine_bottle open;
            "The medicine bottle drops like a stone to the deck far below, where it cracks like an egg.";
        }
        "Dropped a long way down, onto the deck.";
    }
    rfalse;
];

! References: flagpole.after

[ routine112420 ;	! 112420 / 0x1b724
    if (action == ##Take or ##Turn or ##Push or ##Pull) {
        "The flagpole is very securely fixed to the main mast.";
    }
    rfalse;
];

! References: flag_of_the_British_Merchant_Navy.after

[ routine112468 ;	! 112468 / 0x1b754
    if (selfobj in comfortable_bed && verb == ##Take or ##Remove) {
        "The flag seems perfect for the bed as it is.";
    }
    if (selfobj notin Up_the_Mast) {
        rfalse;
    }
    if (action == ##Take or ##Pull) {
        give flag_of_the_British_Merchant_Navy general;
        "You take hold of the tassels of the flag in one hand (though it won't pull away from the pole).";
    }
    if (action == ##Drop or ##Remove) {
        give flag_of_the_British_Merchant_Navy ~general;
        "You leave hold of the tassels of the flag.";
    }
    rfalse;
];

! References: old_timber_spar.before

[ routine112624 ;	! 112624 / 0x1b7f0
    if (action == ##Take) {
        if (old_timber_spar hasnt general) {
            rfalse;
        }
        give old_timber_spar ~general;
        StartTimer(bean_pole,5);
        rfalse;
    }
    rfalse;
];

! References: Prow_of_the_Lady_Magdalena.cant_go

[ routine112652 ;	! 112652 / 0x1b80c
    print "You can only go aft.^";
    set_flag_array(11);
    rtrue;
];

! References: green_branch.after

[ routine112676 ;	! 112676 / 0x1b824
    if (action == ##Wave) {
        if (Jemima in location) {
            "Jemima, who has hay fever, is extremely annoyed by this. So it wasn't a turn entirely wasted.";
        }
        if (location ~= Hollow || parent(corn_crake) == nothing) {
            "The pollen given off makes you sneeze a little, but fails to give you the bird. (Worth a try, anyway.)";
        }
        remove corn_crake;
        "The bird is so startled by the cloud of pollen from the waved branch that she leaps into the skies, squawking with flighty anxiety.";
    }
    rfalse;
];

! References: Stern.d_to

[ routine112912 ;	! 112912 / 0x1b910
    if (capstan hasnt general) {
        "You shin precariously down the anchor chain, but reach the end while still hanging very far above the... water? quicksand?  Concentrating very carefully, you heave yourself back aboard and pant with relief.";
    }
    move player to Souvenirs_Room;
    location = Souvenirs_Room;
    "You shin down the anchor chain, down, down, under the keel of the Lady Magdalena, down until there is nothing but the glassy mist and the endless chain...^^...And the approaching soft, spongy, pinkish sand-bank, which welcomes you with its warmth: you step ashore, and immediately sink into the clammy, living sand, until you are engulfed altogether... and pass out.^^However, the hard attic floorboards beneath your back soon wake you again.";
];

! References: capstan.after

[ routine113332 ;	! 113332 / 0x1bab4
    if (action == ##Turn or ##Push or ##PushDir) {
        print "You heave away at the capstan, ";
        if (capstan has general) {
            give capstan ~general;
        } else {
            give capstan general;
            print "un";
        }
        "winding the great anchor chain.";
    }
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,d_obj);
        rtrue;
    }
    rfalse;
];

! References: Garden_Stream.after

[ routine113420 ;	! 113420 / 0x1bb0c
    if (action == ##Swim) {
        "Too shallow for comfort.";
    }
    if (action == ##Drink) {
        "Just about drinkable. Not much fun, though.";
    }
    rfalse;
];

! References: coal_bunker.before

[ CoalBunkerBefore ;	! 113480 / 0x1bb48
    if (action == ##Close) {
        give metal_door ~open;
        rfalse;
    }
    if (action == ##Open) {
        give metal_door open;
        rfalse;
    }
    if (action == ##Unlock) {
        give metal_door ~locked;
        rfalse;
    }
    if (action == ##Lock) {
        give metal_door locked;
        rfalse;
    }
    rfalse;
];

! References: stream.after

[ StreamAfter ;	! 113520 / 0x1bb70
    if (action == ##Drink) {
        "It's a warm, not unpleasant taste, silt and algae.";
    }
    if (action == ##Enter) {
        R_Process(##Swim);
        rtrue;
    }
    rfalse;
];

! References: potted_shrub.after

[ ShrubAfter ;	! 113576 / 0x1bba8
    if (action == ##Climb or ##Enter) {
        "It's only three feet high!";
    }
    if (action == ##Turn) {
        "You swivel the plant's tub.";
    }
    if (action == ##Push or ##PushDir or ##Pull) {
        if (selfobj has general) {
            rfalse;
        }
        give selfobj general;
        move timber_hatch to location;
        Beside_the_Wall.d_to = timber_hatch;
        move selfobj to location;
        "Pushing the shrub a little aside reveals an unsightly old timber hatch, about three feet in diameter.";
    }
    rfalse;
];

! References: stone_wall.after

[ StoneWallAfter ;	! 113724 / 0x1bc3c
    if (action == ##Climb or ##Enter) {
        "The old, carved garden wall is one of the treasures of rural England, and you're not nearly desperate enough to crumble it further into ruin.";
    }
    rfalse;
];

! References: stone_wall.life

[ StoneWallLife ;	! 113824 / 0x1bca0
    if (action == ##Order or ##Answer or ##Ask) {
        if (verb ~= ##Lagach) {
            "The old wall is mute.";
        }
        "For a moment, the slightest of zephyrs blows from the wall, but dies away to nothing.";
    }
    rfalse;
];

! References: timber_hatch.before

[ TimberHatchBefore ;	! 113904 / 0x1bcf0
    if (action == ##Open) {
        give Wine_Cellars light;
        print (string) selfobj.initial;
        new_line;
        rtrue;
    }
    if (action == ##Close) {
        give Wine_Cellars ~light;
        rfalse;
    }
    rfalse;
];

! References: Family_Tree.initial

[ FamilyTreeInitial ;	! 113932 / 0x1bd0c
    MazeX = 4;
    MazeY = 6;
    rfalse;
];

! References: Family_Tree.n_to

[ FamilyTreeNorth ;	! 113940 / 0x1bd14
    if (player in garden_roller) {
        return Maze;
    }
    "You can't go that way.^^Now, this takes a little explaining... These days, it isn't easy to keep up a house the size of Meldrew Hall, and your family has had to strike a bargain with the National Trust that the house should be open to the public in the summer months. The maze is so popular with visitors that the grass has worn away, and it's being reseeded at the moment, so you shouldn't go treading all over it.";
];

! References: plane_tree.after

[ PlaneTreeAfter ;	! 114192 / 0x1be10
    if (action == ##Climb) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];

! References: ancient_well.before

[ WellBefore ;	! 114208 / 0x1be20
    if (action == ##Receive) {
        move noun to hanging_cord;
        give CR ~general;
        "It plummets down into the well.";
    }
    rfalse;
];

! References: Up_the_Beanstalk.after

[ BeanStalkAfter ;	! 114248 / 0x1be48
    if (action == ##Jump) {
        deadflag = DIED;
        "You fall and break your neck!";
    }
    rfalse;
];

! References: Up_the_Beanstalk.before

[ BeanStalkBefore ;	! 114280 / 0x1be68
    if (action == ##Drop) {
        move noun to Family_Tree;
        if (noun == medicine_bottle && noun has locked) {
            print "The medicine bottle plummets to the earth below.^";
            give medicine_bottle ~locked;
            give medicine_bottle open;
            rtrue;
        }
        CDefart(inp1);
        " plummets to the earth below.";
    }
    rfalse;
];

! References: garden_roller.after

[ RollerAfter ;	! 114368 / 0x1bec0
    if (action == ##Go) {
        if (selfobj hasnt on) {
            print "(The motor isn't on at the moment.)^";
        } else {
            if (noun == u_obj or d_obj) {
                print "The garden roller is a somewhat horizontal conveyance.^";
                return 2[?];
            }
            if (location == Garden_Stream && noun == s_obj) {
                print "The garden roller will never fit.^";
                return 2[?];
            }
            if (location == Lawn_Ornaments && noun == e_obj) {
                print "Philistine!  How dare you try to drive a garden roller over a Roman mosaic.^";
                return 2[?];
            }
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: garden_roller.each_turn

[ RollerEachTurn ;	! 114560 / 0x1bf80
    if (player notin selfobj || selfobj hasnt on) {
        rfalse;
    }
    if (location == Lawn_Ornaments && plaster_statuette in Lawn_Ornaments) {
        print "^Crunch!  The garden roller ran into something there.^";
        give CR light;
        remove plaster_statuette;
        move ancient_well to Lawn_Ornaments;
        give Lawn_Ornaments general;
    }
    if (medicine_bottle in location && medicine_bottle has locked && location ~= Garage) {
        print "^Oh dear. The medicine bottle, which you negligently left lying in the path of the roller, seems to have been cracked.^";
        give medicine_bottle open;
        give medicine_bottle ~locked;
    }
    rfalse;
];

! References: weed_killer_bottle.after

[ WeedKillerAfter local1 ;	! 114744 / 0x1c038
    if (action == ##Squeeze or ##Push) {
        if (selfobj has general) {
            "Nothing emerges. The bottle must be empty.";
        }
        give selfobj general;
        if (location == Wall_of_Thorns) {
            "A valiant but doomed idea. The weed killer harms barely a single tendril of the wall.";
        }
        if (location == Vegetable_Garden) {
            remove runner_bean_plant;
            Vegetable_Garden.u_to = nothing;
            "Congratulations. You have devastated the runner-bean plant.";
        }
        if (location == Family_Tree) {
            "Happily, the weed killer makes no impression on the beautiful old tree.";
        }
        if (game_section == T_GARDEN) {
            ! no code
        } else {
            if (game_section ~= T_GARDEN_PAST) {
                "A stream of weed-killer emerges, but evaporates almost at once, just as well considering the vile smell.";
            }
            if (location ~= Maze_Foundations) {
                ! no code
            } else {
                local1 = MazeBoundary(MazeX,MazeY);
                if (local1 == 0) {
                    "A stream of weed-killer soaks into the grass, and does nothing obvious.";
                }
                WeedkillerX = MazeX;
                WeedkillerY = MazeY;
                StartDaemon(selfobj);
                "A stream of weed-killer soaks into the seedbed, and does nothing obvious.";
            }
        }
        "A stream of weed-killer soaks into the earth, and does nothing obvious.";
    }
    rfalse;
];

! References: weed_killer_bottle.daemon

[ WeedKillerDaemon ndx ;	! 115216 / 0x1c210
    if (game_section ~= T_GARDEN_PAST) {
        ndx = WeedkillerX + 9 * WeedkillerY;
        garden_array->ndx = 48;
        StopDaemon(selfobj);
    }
    rfalse;
];

! References: spade.short

[ SpadeShort ;	! 115244 / 0x1c22c
    if (selfobj has general) {
        print "spade";
    } else {
        print "bladed agricultural implement";
    }
    rtrue;
];

! References: spade.after

[ SpadeAfter ;	! 115280 / 0x1c250
    if (action == ##Read) {
        if (spade has general) {
            rfalse;
        }
        give spade general;
        spade.&name-->3 = 'spade';
        "On second thoughts, let's just call a spade a spade.";
    }
    rfalse;
];

[ MazeBoundary local1 local2 local3 ;	! 115348 / 0x1c294
    if (local1 < 0 || local1 > 8 || local2 < 0 || local2 > 6) {
        rfalse;
    }
    local3 = garden_array->(9 * local2 + local1);
    if (local3 == 48[furniture?]) {
        rfalse;
    }
    if (local3 == 49[scratched_cupboard?]) {
        rtrue;
    }
    rtrue;
];

[ routine115396 local1 local2 local3 ;	! 115396 / 0x1c2c4
    if (local1 == 0 or 8[nw_obj?] || local2 == 0 or 6[ne_obj?]) {
        local3 = garden_array->(9 * local2 + local1);
        if (local3 == 48[furniture?]) {
            rfalse;
        }
        if (local3 == 49[scratched_cupboard?]) {
            return 2[?];
        }
    }
    return MazeBoundary(local1,local2);
];

[ routine115448 local1 local2 local3 ;	! 115448 / 0x1c2f8
    local3 = routine115396(local1,local2);
    if (local3 == 2[?]) {
        local3 = 0;
    }
    return local3;
];

[ routine115468 local1 local2 local3 ;	! 115468 / 0x1c30c
    local3 = routine115396(local1,local2);
    if (local3 == 1[?]) {
        local3 = 0;
    }
    if (local3 == 2[?]) {
        local3 = 1[?];
    }
    return local3;
];

! References: Up_the_Plane_Tree.after

[ routine115496 ;	! 115496 / 0x1c328
    if (action == ##Jump) {
        deadflag = DIED;
        "You fall and break your neck!";
    }
    rfalse;
];

! References: maze_layout.description

[ routine115528 local1 local2 local3 ;	! 115528 / 0x1c348
    print "The layout is roughly as follows:^^";
    0-->8 = 2 | 0-->8;
    local1 = 0;
  .label115570;
    if (local1 <= 6) {
        print "    ";
        local2 = 0;
      .label115583;
        if (local2 <= 8) {
            local3 = MazeBoundary(local2,local1);
            if (local3 == 0) {
                print "...";
            }
            if (local3 == 1[?]) {
                print "###";
            }
            ++local2;
            jump label115583;
        }
        new_line;
        ++local1;
        jump label115570;
    }
    0-->8 = 65533 & 0-->8;
    rfalse;
];

[ routine115644 local1 local2 local3 local4 local5 ;	! 115644 / 0x1c3bc
    --MazeY;
    local2 = MazeBoundary(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    local4 = MazeBoundary(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    local3 = MazeBoundary(MazeX,MazeY);
    --MazeY;
    --MazeX;
    local5 = MazeBoundary(MazeX,MazeY);
    ++MazeX;
    local1 = local2 + local4 + local3 + local5;
    if (local1 == 4[e_obj?]) {
        "^You are hedged in on all sides.";
    }
    if (local1 == 3[s_obj?]) {
        print "^You are hedged in and can only go back ";
    }
    if (local1 == 2[?]) {
        print "^The corridor runs ";
    }
    if (local1 == 1[?]) {
        print "^At this junction, the maze runs ";
    }
    if (local1 == 0) {
        "^This is a crossroads in the maze.";
    }
  .label115833;
    if (local1 < 4) {
        if (local2 == 0) {
            print "north";
            local2 = 1[?];
        } else if (local4 == 0) {
            print "east";
            local4 = 1[?];
        } else if (local3 == 0) {
            print "south";
            local3 = 1[?];
        } else if (local5 == 0) {
            print "west";
            local5 = 1[?];
        }
        ++local1;
        if (local1 == 4[e_obj?]) {
            ".";
        }
        if (local1 == 3[s_obj?]) {
            print " and ";
        }
        if (local1 == 2[?]) {
            print ", ";
        }
        if (local1 == 1[?]) {
            print ", ";
        }
        jump label115833;
    }
    rtrue;
];

! References: Maze.after

[ routine115944 local1 local2 ;	! 115944 / 0x1c4e8
    if (action == ##Exit) {
        "Remember the poor grass!";
    }
    if (action == ##Go) {
        if (garden_roller hasnt on) {
            "But the garden roller is switched off, and won't drive.";
        }
        if (MazeX == 4 && MazeY == 6 && noun == s_obj) {
            rfalse;
        }
        if (MazeX == 0 && MazeY == 1 && noun == w_obj) {
            rfalse;
        }
        local1 = 100[Tiny_Balcony?];
        local2 = 100[Tiny_Balcony?];
        if (noun == n_obj) {
            local1 = MazeX;
            local2 = MazeY - 1;
        }
        if (noun == e_obj) {
            local1 = MazeX + 1;
            local2 = MazeY;
        }
        if (noun == s_obj) {
            local1 = MazeX;
            local2 = MazeY + 1;
        }
        if (noun == w_obj) {
            local1 = MazeX - 1;
            local2 = MazeY;
        }
        if (local1 == 100[Tiny_Balcony?]) {
            "The maze is constructed with rectangular grid-lines of privet, so you can only proceed north, east, south or west.";
        }
        if (MazeBoundary(local1,local2) == 1[?]) {
            "The privet hedge is in the way.";
        }
        MazeX = local1;
        MazeY = local2;
        if (location == Patio_in_Maze) {
            location = Maze;
            move garden_roller to Maze;
        }
        if (MazeX == 7 && MazeY == 5) {
            location = Patio_in_Maze;
            move garden_roller to Patio_in_Maze;
        }
        set_flag_array(39);
        R_Process(##Look);
        rtrue;
    }
    rfalse;
];

! References: Maze.before

[ routine116264 ;	! 116264 / 0x1c628
    if (action == ##Look) {
        routine115644();
        rtrue;
    }
    rfalse;
];

! References: Patio_in_Maze.after

[ routine116276 ;	! 116276 / 0x1c634
    if (action == ##Go) {
        if (noun == d_obj or u_obj) {
            rfalse;
        }
        if (player notin garden_roller) {
            "Mustn't tread on the grass now!";
        }
        return RunRoutines(Maze,after);
    }
    rfalse;
];

! References: Patio_in_Maze.before

[ routine116332 ;	! 116332 / 0x1c66c
    if (action == ##Look) {
        routine115644();
        rtrue;
    }
    rfalse;
];

! References: marble_rose.after

[ routine116344 ;	! 116344 / 0x1c678
    if (action == ##Insert or ##Give && second == statue_of_Diana) {
        "It would look perfect in Diana's hair, but her head is far too high to reach.";
    }
    rfalse;
];

! References: Viewpoint_Ledge.after

[ routine116412 ;	! 116412 / 0x1c6bc
    if (action == ##Read) {
        if (player in garden_roller && noun == plaque) {
            "The writing's too small from here.";
        }
        rfalse;
    }
    if (action == ##Go) {
        if (noun == e_obj && player notin garden_roller) {
            "For the sake of the grass, you can't go that way.";
        }
        rfalse;
    }
    rfalse;
];

! References: Folly.before

[ routine116504 ;	! 116504 / 0x1c718
    MazeX = 0;
    MazeY = 1;
    rfalse;
];

! References: bean_pole.before

[ routine116512 ;	! 116512 / 0x1c720
    if (action == ##Take) {
        if (selfobj hasnt general) {
            rfalse;
        }
        give selfobj general;
        StartTimer(selfobj,5);
        rfalse;
    }
    rfalse;
];

! References: bean_pole.daemon

[ routine116536 ;	! 116536 / 0x1c738
    if (game_section == T_GARDEN_PAST) {
        print "^There is a great rumbling sound and then a thunderous avalanche of stone cascades down the hillside into the valley. The Folly has collapsed!  Capability Meldrew and his workmen come running to investigate. In the ensuing confusion, they come across you and, of course, blame you for their incompetent masonry. You are hauled up before the county assizes...^";
        deadflag = AUSTRALIA;
    }
    rfalse;
];

! References: Maze_Foundations.after

[ routine116760 local1 local2 ;	! 116760 / 0x1c818
    if (action == ##Go) {
        if (MazeX == 4 && MazeY == 6 && noun == s_obj) {
            rfalse;
        }
        if (MazeX == 0 && MazeY == 1 && noun == w_obj) {
            rfalse;
        }
        local1 = 100[Tiny_Balcony?];
        local2 = 100[Tiny_Balcony?];
        if (inp1 == 2[?]) {
            local1 = MazeX;
            local2 = MazeY - 1;
        }
        if (inp1 == 4[e_obj?]) {
            local1 = MazeX + 1;
            local2 = MazeY;
        }
        if (inp1 == 3[s_obj?]) {
            local1 = MazeX;
            local2 = MazeY + 1;
        }
        if (inp1 == 5[w_obj?]) {
            local1 = MazeX - 1;
            local2 = MazeY;
        }
        if (inp1 == 6[ne_obj?]) {
            local1 = MazeX + 1;
            local2 = MazeY - 1;
        }
        if (inp1 == 8[nw_obj?]) {
            local1 = MazeX - 1;
            local2 = MazeY - 1;
        }
        if (inp1 == 7[se_obj?]) {
            local1 = MazeX + 1;
            local2 = MazeY + 1;
        }
        if (inp1 == 9[sw_obj?]) {
            local1 = MazeX - 1;
            local2 = MazeY + 1;
        }
        if (local1 == 100[Tiny_Balcony?]) {
            "The maze is only two-dimensional.";
        }
        if (routine115468(local1,local2) ~= 0) {
            "The wooden fence is in the way.";
        }
        MazeX = local1;
        MazeY = local2;
        LookSub(true);
        rtrue;
    }
    rfalse;
];

! References: Maze_Foundations.before

[ routine116976 ;	! 116976 / 0x1c8f0
    if (action == ##Look) {
        routine117024();
        rtrue;
    }
    if (action == ##Drop) {
        deadflag = PARADOX;
        "You feel an alarming wrench in your insides.";
    }
    rfalse;
];

[ routine117024 local1 local2 local3 local4 local5 local6 ;	! 117024 / 0x1c920
    local1 = MazeBoundary(MazeX,MazeY);
    if (MazeX == 7 && MazeY == 5) {
        local1 = 2[?];
    }
    new_line;
    if (local1 == 1[?]) {
        print "You are standing on a bed in which seeds have been recently planted. ";
    }
    if (local1 == 0) {
        print "You stand on a rough patch of grass. ";
    }
    if (local1 == 2[?]) {
        print "You stand on a rough patch of grass, marked out with whitewash. ";
    }
    --MazeY;
    local2 = routine115448(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    local4 = routine115448(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    local3 = routine115448(MazeX,MazeY);
    --MazeY;
    --MazeX;
    local5 = routine115448(MazeX,MazeY);
    ++MazeX;
    local1 = local2 + local4 + local3 + local5;
    if (local1 == 4[e_obj?]) {
        print "There are seedbeds on all sides. ";
    } else {
        if (local1 == 3[s_obj?]) {
            print "There are seedbeds to ";
        }
        if (local1 == 2[?]) {
            print "There are seedbeds to the ";
        }
        if (local1 == 1[?]) {
            print "There is a seedbed to the ";
        }
        if (local1 == 0) {
            jump label117428;
        }
      .label117317;
        if (local1 > 0) {
            if (local2 == 1[?]) {
                print "north";
                local2 = 0;
            } else if (local4 == 1[?]) {
                print "east";
                local4 = 0;
            } else if (local3 == 1[?]) {
                print "south";
                local3 = 0;
            } else if (local5 == 1[?]) {
                print "west";
                local5 = 0;
            }
            --local1;
            if (local1 == 0) {
                print ". ";
            } else {
                if (local1 == 1[?]) {
                    print " and ";
                }
                if (local1 == 2[?]) {
                    print ", ";
                }
                if (local1 == 3[s_obj?]) {
                    print ", ";
                }
                jump label117317;
            }
        }
    }
  .label117428;
    --MazeY;
    local2 = routine115468(MazeX,MazeY);
    ++MazeY;
    ++MazeX;
    local4 = routine115468(MazeX,MazeY);
    --MazeX;
    ++MazeY;
    local3 = routine115468(MazeX,MazeY);
    --MazeY;
    --MazeX;
    local5 = routine115468(MazeX,MazeY);
    ++MazeX;
    local1 = local2 + local4 + local3 + local5;
    if (local1 == 0) {
        new_line;
        rfalse;
    }
    if (local1 == 1[?]) {
        print "There is a fence to the ";
    }
    if (local1 == 2[?]) {
        print "There are fences to ";
    }
    if (local1 == 3[s_obj?]) {
        print "There are fences to ";
    }
    if (local1 == 4[e_obj?]) {
        "This is a fenced-in area.";
    }
    if (local1 == 2[?] && local4 == 1[?] && local5 == 1[?]) {
        local6 = 1[?];
    }
  .label117585;
    if (local1 > 0) {
        if (local2 == 1[?]) {
            print "north";
            local2 = 0;
        } else if (local4 == 1[?]) {
            print "east";
            local4 = 0;
        } else if (local3 == 1[?]) {
            print "south";
            local3 = 0;
        } else if (local5 == 1[?]) {
            print "west";
            local5 = 0;
        }
        --local1;
        if (local1 == 0) {
            if (local6 == 1[?]) {
                "; uncouth rustics are at work to the south, but fortunately they haven't yet seen you.";
            }
            ".";
        }
        if (local1 == 1[?]) {
            print " and ";
        }
        if (local1 == 2[?]) {
            print ", ";
        }
        if (local1 == 3[s_obj?]) {
            print ", ";
        }
        jump label117585;
    }
    rtrue;
];

! References: Tree_Planting.before

[ routine117752 ;	! 117752 / 0x1cbf8
    deadflag = AUSTRALIA;
    rfalse;
];

! References: Bricked_Path.initial

[ routine117760 ;	! 117760 / 0x1cc00
    set_flag_array(22);
    rfalse;
];

! References: Hedgery.n_to

[ routine117768 ;	! 117768 / 0x1cc08
    give flock_of_sparrows general;
    print "Your first step towards the sparrows startles them into the air, and they whirl upwards and around with panic, chirping their alarm.^";
    return 315[Summer_House?];
];

! References: Summer_House.s_to

[ routine117856 ;	! 117856 / 0x1cc60
    if (flock_of_sparrows has general) {
        give flock_of_sparrows ~general;
        print "As you step out, the sparrows gradually settle back down again.^";
    }
    return 313[Hedgery?];
];

! References: Summer_House.before

[ routine117916 ;	! 117916 / 0x1cc9c
    if (action == ##Look) {
        if (flock_of_sparrows hasnt general) {
            print "^Sparrows chirp happily away to themselves around the high gutter.^";
        } else {
            print "^Startled sparrows circle high in the sky, showing no signs of calming down.^";
        }
        rfalse;
    }
    rfalse;
];

! References: gold_watch_on_a_chain.after

[ routine118032 ;	! 118032 / 0x1cd10
    if (selfobj hasnt moved) {
        "The watch is just within sight, but quite beyond reach.";
    }
    if (action == ##Swing or ##Wave) {
        "You come dangerously close to hypnotising yourself.";
    }
    rfalse;
];

! References: loose_board.after

[ routine118116 ;	! 118116 / 0x1cd64
    if (action == ##Open or ##Push or ##Pull or ##Turn) {
        if (irate_squirrel_friend in location) {
            "The squirrel rears up and nips you on the wrist. You withdraw, hurt.";
        }
        rfalse;
    }
    rfalse;
];

! References: crack.after

[ routine118180 ;	! 118180 / 0x1cda4
    if (action == ##Search) {
        "Through the crack you can see sunlight on the summer-house floorboards.";
    }
    rfalse;
];

! References: crack.before

[ routine118232 ;	! 118232 / 0x1cdd8
    if (action == ##Receive) {
        if (noun == bunch_of_nuts) {
            give loose_board open;
            move bunch_of_nuts to irate_squirrel_friend;
            move irate_squirrel_friend to Summer_House;
            routine118680();
            Summer_House.n_to = Behind_Summer_House;
            "You throw the nuts through the loose board into the summer house, and the squirrel jumps up after them, battering through the board and opening up a hole in the wall.";
        }
        move noun to Summer_House;
        "Thrown through the loose board into the summer house.";
    }
    rfalse;
];

! References: irate_squirrel_friend.life

[ routine118404 ;	! 118404 / 0x1ce84
    if (action == ##Show) {
        if (noun == bunch_of_nuts) {
            "The squirrel finds them of consuming interest.";
        }
        rfalse;
    }
    if (action == ##Give) {
        if (noun has edible) {
            remove noun;
            if (noun == bunch_of_nuts) {
                routine118680();
                "The squirrel is extremely pleased, and devours the nuts delightedly. You have an uncomfortable feeling of having been suckered.";
            }
            print "Grateful for any food he can get, however unsuitable, the squirrel eagerly consumes ";
            if (noun == Ekmek_Special) {
                print "the ";
            }
            Defart(noun);
            ". He does of course feel no obligation towards you at all as a result, so don't expect any favours.";
        }
        rfalse;
    }
    rfalse;
];

[ routine118680 ;	! 118680 / 0x1cf98
    irate_squirrel_friend.initial = "The squirrel sits here, watchfully pecking away at the nuts.";
    rtrue;
];

[ routine118692 local1 local2 ;	! 118692 / 0x1cfa4
    if (local1 ~= 0) {
        routine110240(local1);
        if (local1 > 0) {
            print " east";
        } else {
            print " west";
        }
        if (local2 ~= 0) {
            print " and ";
        }
    }
    if (local2 ~= 0) {
        routine110240(local2);
        if (local2 > 0) {
            print " north";
        } else {
            print " south";
        }
    }
    rtrue;
];

! References: Croquet_Lawn.description

[ CroquetLawnDesc ;	! 118760 / 0x1cfe8
    print "One of the most beautiful hedge-enclosed, tree-muffled lawns in England, and just out of sight of the house, this has been a jewel in the gardens for centuries. Since the twenties it has also been a croquet lawn, of the regulation twenty-four yards square, laid out with a central coloured peg and six peripheral hoops";
    if (selfobj.nw_to == nothing) {
        ".";
    }
    ". The hedge is broken slightly to the northwest.";
];

! References: Croquet_Lawn.initial

[ CroquetLawnInitial ;	! 118996 / 0x1d0d4
    DigX = 0;
    DigY = 0;
    rfalse;
];

! References: Croquet_Lawn.short

[ CroquetLawnShort ;	! 119004 / 0x1d0dc
    if (DigX == 0 && DigY == 0) {
        rfalse;
    }
    if (before_short_desc == true) {
        rfalse;
    }
    print "Croquet Lawn (";
    routine118692(DigX,DigY);
    print " of the peg)";
    rtrue;
];

! References: golden_astrolabe.after

[ AstrolabeAfter ;	! 119052 / 0x1d10c
    if (action == ##Remove) {
        if (noun == second) {
            "It is in one piece.";
        }
        rfalse;
    }
    if (action == ##Search) {
        if (parent(golden_astrolabe) ~= Palace_Balustrade || golden_astrolabe has moved) {
            "You catch a fascinating, but all too brief, glimpse of something grey, angular and tall... which slips out of view as your unsteady hand shakes.";
        }
        print "Through the golden eyepiece you see, not the moon (for the astrolabe is tilted too low), but a curious, sunlit, grey triangle.^^Fascinated, you strain closer to the vision... closer...^";
        PlayerTo(Out_on_the_Spire);
        rtrue;
    }
    rfalse;
];

! References: amber_hairband.name, gleaming_amber_gem.name, golden_astrolabe.before, metal_wall.name

[ routine119316 ;	! 119316 / 0x1d214
    if (action == ##Take) {
        set_flag_array(43);
        rfalse;
    }
    rfalse;
];

! References: dug_hole.after

[ DugHoleAfter ;	! 119332 / 0x1d224
    if (action == ##Take) {
        "A surreal idea, somewhat reminiscent of the Beatles film ~Yellow Submarine~.";
    }
    rfalse;
];

! References: dug_hole.describe

[ DugHoleDesc ;	! 119392 / 0x1d260
    if (OldDigX == DigX && OldDigY == DigY) {
        "^The hole you dug in the lawn is just here.";
    }
    print "^Some vandal has dug a hole in the lawn, ";
    routine118692(OldDigX - DigX,OldDigY - DigY);
    ".";
];

! References: Murky_Cave.initial

[ MurkyCaveInitial ;	! 119472 / 0x1d2b0
    StartDaemon(selfobj);
    rfalse;
];

! References: Murky_Cave.daemon

[ MurkyCaveDaemon cnt ;	! 119480 / 0x1d2b8
    if (game_section ~= T_ANCIENT_BRITAIN) {
        StopDaemon(selfobj);
    }
    cnt = CouncilCnt;
    if (cnt > 0) {
        ++CouncilCnt;
    }
    if (cnt == 1) {
        "^From up on the hill you hear the blowing of a horn.";
    }
    if (cnt == 2) {
        "^Horses are approaching the villa, coming down the hill.";
    }
    if (cnt == 3) {
        "^The sound of horses draws nearer.";
    }
    if (cnt == 4) {
        if (location == Entrance) {
            print "^Horsemen suddenly gallop into the courtyard and you are soon ringed by guards!^";
            Capture();
        } else {
            "^There is definitely activity outside the villa.";
        }
    }
    if (cnt >= 5) {
        if (location == Entrance) {
            print "^You walk straight into the guards.^";
            Capture();
        }
        if (location == Roman_Villa) {
            print "^You walk straight into the guards at the back door.^";
            Capture();
        }
    }
    if (cnt == 7) {
        print "^There is sudden activity as the guards make a thorough precautionary search of the villa. ";
        if (location == Hypocaust) {
            "Luckily, they don't even think of looking down in here.";
        }
        if (location == Inside_Well) {
            print "Unfortunately, they do think of looking into the kitchen well, and drag you out onto the triclinium floor.^";
        }
        if (location == Murky_Cave or Spur_of_Rock or Hanging_on_Rope) {
            print "With the kind of zeal which really marked early Dark Age guarding, they look even here.^";
        } else if (location ~= Inside_Well) {
            print "The virtue of doing so is demonstrated when they find you without difficulty.^";
        }
        Capture();
    }
    if (cnt <= 7) {
        rfalse;
    }
    if (location == Triclinium) {
        print "^An industrious-looking slave (who cooks for the horsemen) is rather surprised to see you, but with creditable presence of mind he summons the guard at once.^";
        Capture();
    }
    if (location ~= Hypocaust) {
        rfalse;
    }
    if (cnt == 8) {
        "^You hear men walking across the mosaic just above your head.";
    }
    if (cnt == 9) {
        print "^A voice, which can just be heard through the vent, says ";
        if (KnowLanguages == false) {
            "something in Anglo-Saxon or Celtic (hard to say which).";
        }
        "~Welcome, great masters. We are convened in secret conclave to decide the fate of Britain. Lament, for the old ways are passing!  There will be a dark age, a collapse into many monarchies, and any man who can hold a town will call himself King and heir to Vortigern.~";
    }
    if (cnt == 10) {
        print "^A younger, more impatient voice, says ";
        if (KnowLanguages == false) {
            "something else.";
        }
        "~This is an opportunity!  We must be the power behind the thrones, we will in secret unite and be the true force of the land...~";
    }
    if (cnt == 11) {
        print "^There is cynical laughter for a moment, and a third voice interjects ";
        if (KnowLanguages == false) {
            "something.";
        }
        "~And who will lead this, this unity?  We take all sides and none, you know that. There are potent druids in the tents of each general down there in the rabble. They'd kill each other in a second come the battle.~";
    }
    if (cnt == 12) {
        print "^The first voice speaks once more. ";
        if (KnowLanguages == false) {
            new_line;
            rtrue;
        }
        "~Far worse is to come. The jumped-up kings and their new men will no longer believe in the ancient powers. Already I can feel the druidic magic weakening away, and we are perilously close to the nexus now. In the valleys below, armies wait to fight the decisive battle. Whichever side wins, they will no longer need us. In a matter of hours, the power will be broken forever.~";
    }
    if (cnt == 13) {
        print "^After a sombre silence, a much older voice says ";
        if (KnowLanguages == false) {
            "something wise. It really is a pity you can't understand them.";
        }
        "~You did right to call us together. There is a path prepared for us, but the sacrifice will be terrible. We must concentrate all the remaining druidical energy into this sacred hill, that it may last through all time, and we must ensure that druids live on this site forever and keep the faith.~";
    }
    if (cnt == 14) {
        print "^The younger voice speaks again. ";
        if (KnowLanguages == false) {
            new_line;
            rtrue;
        }
        "~For now, yes, for a century or two, yes, but what then?  They will forget the old ways, they will no longer truly be druids.~";
    }
    if (cnt == 15) {
        print "^The older voice replies triumphantly. ";
        if (KnowLanguages == false) {
            new_line;
            rtrue;
        }
        "~This is what must be done. They will forget, so we must give them a substitute. We shall accurse them to always seek after this magical stone, which it will be all but impossible for them to find. It will take the form of whatever they most desire. In six hundred years, by my prophecy, religious wars in the East will capture men's hearts, and then they will think it is the Holy Grail, the cup which held the blood of Christ. A thousand years later they will think it is -~  But at this moment the voices move away.";
    }
    rfalse;
];

! References: hanging_rope.after

[ RopeAfter ;	! 121808 / 0x1dbd0
    if (action == ##Climb) {
        R_Process(##Go,d_obj);
        rtrue;
    }
    rfalse;
];

! References: Hanging_on_Rope.d_to

[ RopeDown ;	! 121824 / 0x1dbe0
    print "You clamber down the rope, straight into a patrol of guards who capture you!^";
    Capture();
    rtrue;
];

! References: Hanging_on_Rope.after

[ HangingOnRopeAfter ;	! 121880 / 0x1dc18
    if (action == ##Swing) {
        if (noun ~= hemp_rope) {
            rfalse;
        }
        give hemp_rope general;
        "You set the rope swinging back and forth. Very exhilarating!";
    }
    rfalse;
];

! References: Hanging_on_Rope.before

[ HangingOnRopeBefore ;	! 121936 / 0x1dc50
    if (action == ##Drop) {
        remove noun;
        CDefart(noun);
        " tumbles end over end into the valley below.";
    }
    rfalse;
];

! References: yellow_daisy.before, bear_tapestry.name

[ DaisyBefore ;	! 121980 / 0x1dc7c
    if (action == ##Wear) {
        "You tuck the daisy behind your ear, almost out of sight.";
    }
    if (action == ##Take) {
        if (selfobj hasnt general) {
            give selfobj general;
            "Aided by the swinging of the rope, you pick the daisy.";
        }
        rfalse;
    }
    rfalse;
];

! References: yellow_daisy.after

[ DaisyAfter ;	! 122068 / 0x1dcd4
    if (action == ##Take) {
        if (selfobj has moved || hemp_rope has general) {
            rfalse;
        }
        "You stretch out your hand, but cannot quite reach the daisy, such is the size of the overhang.";
    }
    rfalse;
];

! References: yellow_daisy.u_to

[ DaisyUp local1 ;	! 122144 / 0x1dd20
    if (selfobj has worn && rod_identity == 2) {
        local1 = child(player);
      .label122159;
        if (local1 ~= 0) {
            if (local1 has hidden_rod) {
                print " (twitching behind your ear)";
                rtrue;
            }
            local1 = sibling(local1);
            jump label122159;
        }
        print " (tucked behind your ear)";
        rtrue;
    }
    rfalse;
];

! References: Stream.after

[ EndStreamAfter ;	! 122220 / 0x1dd6c
    if (action == ##Swim) {
        "Too shallow for comfort.";
    }
    if (action == ##Drink) {
        "Deliciously clear and unpolluted.";
    }
    rfalse;
];

! References: rough_ladder.after

[ LadderAfter ;	! 122272 / 0x1dda0
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];

! References: summoning_horn.after

[ HornAfter ;	! 122288 / 0x1ddb0
    if (action == ##Blow) {
        print "You blow the horn, and it lets a great clarion call out to the hills. ";
        if (CouncilCnt >= 7) {
            print "The guardsmen, all over the villa, find you very quickly.^";
            Capture();
        } else {
            print "A call which is rapidly answered as...^";
            CouncilCnt = 7;
        }
        rtrue;
    }
    rfalse;
];

! References: bone_die.before

[ DieBefore ;	! 122416 / 0x1de30
    if (action == ##Drop) {
        print "Alea iacta est. It comes up ";
        EnglishNumber(random(6));
        ".";
    }
    rfalse;
];

! References: Triclinium.d_to

[ TricliniumDown ;	! 122456 / 0x1de58
    if (kitchen_well hasnt open) {
        "The well is covered.";
    }
    if (kitchen_well has general) {
        print "Aware of the dangers, you very carefully lower yourself...^";
        Achieved(SCORE_WELL);
        return kitchen_well;
    }
    deadflag = DIED;
    "Having no reason to suppose the well is very deep, you cheerfully lower yourself in. This turns out to be something of a misjudgement and you soon lose your grip and fall, endlessly banging against the walls until finally...";
];

! References: kitchen_well.daemon

[ WellDaemon ;	! 122672 / 0x1df30
    if (player notin Triclinium) {
        rfalse;
    }
    give kitchen_well general;
    set_flag_array(9);
    "^You hear a splash from far down in the depths of the well.";
];

! References: kitchen_well.before

[ WellBefore ;	! 122728 / 0x1df68
    if (action == ##Receive) {
        remove noun;
        if (noun has light) {
            give kitchen_well general;
            "It plummets out of sight, until even the light vanishes in the distance. This must be an extremely deep well.";
        }
        if (noun ~= historical_pamphlet) {
            StartTimer(selfobj,2);
        }
        CDefart(noun);
        " drops into the well-shaft.";
    }
    rfalse;
];

! References: Inside_Well.after

[ InsideWellAfter ;	! 122852 / 0x1dfe4
    if (verb == ##Look or ##Go or ##Read) {
        rfalse;
    }
    "In this confined space there is little room for action.";
];

! References: vents.after

[ VentsAfter ;	! 122896 / 0x1e010
    if (action == ##Read or ##Search) {
        if (CouncilCnt > 7) {
            "Four men in druidic furs are standing on the corners of the mosaic, in some kind of sinister conference. This old villa must be some kind of rendezvous point. Between the men a bluish stone rests on the mosaic floor.";
        }
        "You see across the mosaic floor of the moonlit atrium.";
    }
    rfalse;
];

! References: Entrance.after

[ EntranceAfter ;	! 123076 / 0x1e0c4
    if (action == ##Go) {
        if (noun ~= s_obj or sw_obj or se_obj) {
            rfalse;
        }
        print "You walk out into the courtyard and are immediately set upon by guards, who drag you away.^";
        Capture();
        rtrue;
    }
    rfalse;
];

! References: Entrance.before

[ EntranceBefore ;	! 123156 / 0x1e114
    if (CouncilCnt == 0) {
        CouncilCnt = 1;
    }
    rfalse;
];

! References: bell_ropes.name

[ Capture o s ;	! 123168 / 0x1e120
    if (CouncilCnt < 8) {
        deadflag = DIED;
        "^The guardsmen grab your head by the chin and examine you, but take you for a plain thief and immediately put you to the sword. A pity they did not realise your importance, but then they are only guards, and besides they would probably only have done you in more unpleasantly.";
    }
    print "^Suddenly you are thrust before a druidical figure. He seems to recognise you, and is troubled. Perhaps because of this, your life is saved and you are taken away into custody, down in the valley among the army encampments.^";
    StartTimer(tent_pole,4);
    o = child(player);
  .label123494;
    if (o ~= nothing) {
        s = sibling(o);
        if (o hasnt worn) {
            remove o;
        }
        o = s;
        jump label123494;
    }
    CouncilCnt = 0;
    PlayerTo(Rough_Tent);
    rtrue;
];

! References: Bohemia.name, tent_pole.daemon

[ TentPoleDaemon ;	! 123528 / 0x1e288
    print "^Without warning a Saxon spy (or, as the guards would no doubt put it, another Saxon spy) is thrown bodily into the tent, careering into the central pole and slumping unconscious on the ground as a result. For a moment the whole tent rocks with the force - the pole was nearly broken.^";
    give tent_pole ~static;
    move unconscious_Saxon_spy to Rough_Tent;
    StartTimer(unconscious_Saxon_spy,5);
    rfalse;
];

! References: tent_pole.after

[ TentPoleAfter ;	! 123720 / 0x1e348
    if (action == ##Attack) {
        "It won't break.";
    }
    if (action == ##Push or ##Pull or ##Turn) {
        "Its base is in the earth.";
    }
    rfalse;
];

! References: tent_pole.before

[ TentPoleBefore ;	! 123768 / 0x1e378
    if (action == ##Take) {
        if (selfobj has general) {
            rfalse;
        }
        give selfobj general;
        print "As you uproot the tent-pole, the whole tent collapses ignominiously, the animal hides falling about your head. The hides are heavy and weigh you down, but you just manage to crawl out...^";
        StartTimer(Encampment,10);
        PlayerTo(Encampment);
        rtrue;
    }
    rfalse;
];

! References: unconscious_Saxon_spy.daemon

[ SpyDaemon ;	! 123920 / 0x1e410
    if (location ~= Rough_Tent) {
        rfalse;
    }
    if (unconscious_Saxon_spy in Rough_Tent) {
        print "^Men arrive to drag the Saxon spy away to some unguessable grisly fate. They grimace at you as if to say, ~You're next.~^";
        remove unconscious_Saxon_spy;
        StartTimer(unconscious_Saxon_spy,5);
        rtrue;
    }
    deadflag = DIED;
    print "^The men arrive once more and this time they securely grab you by the arms. If you were an anthropologist, you'd be fascinated by the ritual in which you are bound up, then garotted with a cord and laid into a peat swamp. Instead, your last thought is of the celebrated body they found when they drained the marshes in 1974 to build a motorway service station.";
    rfalse;
];

! References: unconscious_Saxon_spy.after, Beside_the_Drive.name

[ SpyAfter ;	! 124248 / 0x1e558
    if (action == ##Search) {
        "Not only are the guards better at searching suspects than you, they also did so first.";
    }
    if (action == ##WakeOther) {
        rfalse;
    }
    rfalse;
];

! References: unconscious_Saxon_spy.life

[ SpyLife ;	! 124316 / 0x1e59c
    if (action == ##WakeOther) {
        "The spy is too deeply unconscious.";
    }
    if (action == ##Attack or ##Kiss or ##ThrowAt) {
        "Not an act worthy of a Meldrew.";
    }
    if (action == ##Order or ##Answer or ##Ask or ##Give) {
        "He's asleep.";
    }
    rfalse;
];

! References: Encampment.daemon

[ EncampmentDaemon ;	! 124400 / 0x1e5f0
    if (game_section ~= T_ANCIENT_BRITAIN) {
        rfalse;
    }
    deadflag = DIED;
    "^It had to happen sooner or later. One of the druids looks round, sees you and raises an instant alarm. It is absolutely hopeless and you are dragged away screaming to your fate.";
];

! References: Encampment.e_to

[ EncampmentEast ;	! 124520 / 0x1e668
    if (leather_sandals has worn) {
        print "You cross the hot coals nimbly in your sandals.^";
        return dolmen;
    }
    "Walk across those hot coals!  You must be joking.";
];

! References: ghost_of_yourself.after

[ YourGhostAfter ;	! 124596 / 0x1e6b4
    if (verb == ##Sleep) {
        "In the dream you are not drowsy.";
    }
    if (verb == ##Wake) {
        if (game_section == (T_DREAMING|T_UNREAL)) {
            "It doesn't seem to be that easy.";
        } else {
            "You are unable to shake off the dream.";
        }
    }
    if (game_section == (T_DREAMING|T_UNREAL) && verb == ##Attack && noun == selfobj) {
        print "Ouch!  You wake up, smarting.^";
        ChangePlayer(yourself);
        R_Process(##Look);
        rtrue;
    }
    if (game_section == (T_DREAMING|T_UNREAL) && verb == ##Turn or ##Attack or ##Read) {
        rfalse;
    }
    if (verb == ##Go or ##Take or ##Drop) {
        rfalse;
    }
    if (verb == ##Look or ##Inv or ##Wait) {
        rfalse;
    }
    "You seem unable to concentrate sufficiently.";
];

! References: Premonition.cant_go, The_Generals_Tent.cant_go, Beside_Table.cant_go, Camp_Fire.cant_go, Near_Dolmen.cant_go, Melancholy_Dream.cant_go, Solid_Sand.cant_go, Octagonal_Tomb.cant_go

[ DreamCantGo ;	! 124792 / 0x1e778
    set_flag_array(29);
    "You drift in that direction, but without gaining any ground.";
];

[ routine124836 ;	! 124836 / 0x1e7a4
    ChangePlayer(ghost_of_yourself);
    PlayerTo(Premonition);
    rtrue;
];

! References: Premonition.e_to

[ PremonitionEast ;	! 124852 / 0x1e7b4
    print "You pass uncomfortably straight through the hide wall.^";
    return The_Generals_Tent;
];

! References: The_Generals_Tent.w_to

[ GeneralsTentWest ;	! 124892 / 0x1e7dc
    print "You pass uncomfortably back through the hide wall.^";
    return Premonition;
];

! References: bear_tapestry.life

[ BearTapestryLife ;	! 124928 / 0x1e800
    if (action == ##Order or ##Ask or ##Answer) {
        "Your mouth is too furred up to speak.";
    }
    rfalse;
];

! References: heavy_iron_mascot.before

[ MascotBefore ;	! 124964 / 0x1e824
    if (action == ##Take) {
        if (Beside_Table hasnt general) {
            give Beside_Table general;
            remove Druid;
            "The Druid catches sight of your ghostly hand taking the mascot, and immediately begins her occultations, cursing you and your ill-gotten gains. But she is unable to make contact with you, and turns furiously to the tapestry, hissing ~lagach~ to the Bear. At once a sudden swirl of wind seems to pull her into the rough cloth, dissolving her to nothing.";
        }
        rfalse;
    }
    rfalse;
];

! References: heavy_iron_mascot.after

[ MascotAfter ;	! 125196 / 0x1e90c
    if (action == ##Give) {
        "Now that really would not be very kind.";
    }
    rfalse;
];

! References: heavy_iron_mascot.daemon

[ MascotDaemon local1 ;	! 125232 / 0x1e930
    if (heavy_iron_mascot notin player) {
        rfalse;
    }
    local1 = selfobj.number - 1;
    selfobj.number = local1;
    if (local1 == 0) {
        deadflag = DIED;
        print "^In an astonishing freak accident, ";
        local1 = random(5);
        if (local1 == 1[?]) {
            "a meteorite hurtles through the Earth's atmosphere and then straight through your head. Anyone would think you had a curse on you (anyone, that is, still able to think).";
        }
        if (local1 == 2[?]) {
            "an earthquake demolishes everything in the neighbourhood, swallowing you up into a chasm in the ground. Anyone would think you had a curse on you.";
        }
        if (local1 == 3[s_obj?]) {
            "a long-dormant volcano erupts instantaneously below your feet. Anyone would think you had a curse on you (anyone, that is, still standing).";
        }
        if (local1 == 4[e_obj?]) {
            "lightning abruptly strikes into your body, making your hair stand on end. (Oh, and vapourising you utterly, of course.)";
        }
        "four hundred Spartan soldiers are transported by some quantum-mechanical fluke from the Battle of Thermopylae into your immediate vicinity. They are quite keen for someone to explain things to them, but unfortunately most of the spears they were throwing came with them; one of which struck straight through the mascot into your body.";
    }
    if (local1 == 10[u_obj?]) {
        "^You feel very nervous indeed, for some reason.";
    }
    if (local1 == 7[se_obj?]) {
        if (player notin servants_bed) {
            "^You stub your toe painfully, and trip over.";
        } else {
            "^You feel bed-sores coming on.";
        }
    }
    if (local1 == 5[w_obj?]) {
        "^You scratch yourself, unable to get rid of an itching sensation.";
    }
    if (local1 == 2[?]) {
        "^Something feels very wrong indeed. Your hand begins to burn.^";
    }
    rfalse;
];

! References: Druid.life

[ DruidLife ;	! 126064 / 0x1ec70
    if (action == ##Order or ##Ask or ##Answer) {
        "This is one of those dreams where you find you cannot speak.";
    }
    rfalse;
];

! References: Near_Dolmen.before

[ DolmenBefore ;	! 126112 / 0x1eca0
    if (action == ##Look) {
        ChangePlayer(yourself);
        if (heavy_iron_mascot in ghost_of_yourself) {
            move heavy_iron_mascot to player;
            StartDaemon(heavy_iron_mascot);
            heavy_iron_mascot.number = 15;
            Achieved(SCORE_MASCOT);
            score = score - 50;
        }
        "^You awaken, shivering with dread.";
    }
    rfalse;
];

[ routine126184 ;	! 126184 / 0x1ece8
    ChangePlayer(ghost_of_yourself);
    PlayerTo(Melancholy_Dream);
    rtrue;
];

! References: Melancholy_Dream.each_turn

[ DreamEachTurn ;	! 126200 / 0x1ecf8
    ++DreamCnt;
    if (DreamCnt ~= 2) {
        rfalse;
    }
    move green_luminescence to Melancholy_Dream;
    Melancholy_Dream.e_to = Solid_Sand;
    Melancholy_Dream.d_to = Solid_Sand;
    "^A ghostly apparition of a venerable man hazes into view. He raises his mahogany staff and strikes it (silently) on the ground, then points it at the walls, and suddenly a flurry of green luminescence chases around you!^^He fades away again, mumbling something incoherent.";
];

! References: metal_barrier.after

[ BarrierAfter ;	! 126404 / 0x1edc4
    "The metal barrier is indistinct, on the edge of your consciousness, and you can't get close. However familiar it seems.";
];

! References: green_luminescence.after, old_village_clock.name

[ LumnescenceAfter ;	! 126480 / 0x1ee10
    if (action == ##Take or ##Remove or ##Touch) {
        "You bat at the flurries with your hand, but they're just green light (with the tiniest mosquito-sting).";
    }
    rfalse;
];

! References: hieroglyphic_symbols.description, Stone_Cross.name, Goat_and_Compasses.name

[ HieroglyphsDescription ;	! 126552 / 0x1ee58
    print "Your dream eye is caught by...^^";
    0-->8 = 2 | 0-->8;
    print "       (|/        ^   #   -o-  >>>   ^       /|)        ^";
    0-->8 = 65533 & 0-->8;
    "^Confused and hazy, you feel you can understand hieroglyphics, - or hasn't that happened yet?";
];

! References: ships_wheel.after

[ ShipWheelAfter ;	! 126724 / 0x1ef04
    if (action == ##Turn) {
        if (selfobj has general) {
            "Your hands seem unable to touch it again.";
        }
        give selfobj general;
        give sandstone_recess open;
        "You try turning the wheel, but it moves only infinitesimally slowly. The door begins to raise the tiniest fraction, and a few grains of sand cascade in slow motion, rattling horribly against each other...^^It will take forever, and the air is running out...";
    }
    rfalse;
];

! References: Crypt.initial

[ CryptInitial ;	! 126924 / 0x1efcc
    MazeX = 7;
    MazeY = 5;
    rfalse;
];

! References: Jagged_Passage.after, Charnel_Passage.after, Sarcophagus.after, The_Catacombs.after

[ CryptRoomAfter i ;	! 126932 / 0x1efd4
    if (action == ##Smell) {
        if (location ~= The_Catacombs) {
            "Ugh.";
        }
        i = The_Catacombs.time_left + 1;
        The_Catacombs.time_left = i;
        if (i == 1) {
            "Something like... perhaps, air after a thunderstorm... but no, you still can't be sure what it is.";
        }
        if (i == 2) {
            move aluminium_staircase to The_Catacombs;
            The_Catacombs.d_to = Universe_Maintenance_Room;
            OzoneSmelled = true;
            Achieved(SCORE_SMELL);
            "Ozone!  That's what it's called. Funny sort of odour for a cave - especially since, on investigating further, you find that it's drifting up from a concealed aluminium staircase.";
        }
        "Definitely ozone.";
    }
    rfalse;
];

! References: aluminium_staircase.after

[ AluminumStairAfter ;	! 127192 / 0x1f0d8
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,d_obj);
        rtrue;
    }
    rfalse;
];

[ AdjustSlide i j u v ;	! 127208 / 0x1f0e8
    u = henri_post_array->i;
    v = henri_post_array->j;
    henri_post_array->j = u;
    henri_post_array->i = v;
    rtrue;
];

! References: Battlements.name

[ DisplaySlidePos ndx chr ;	! 127236 / 0x1f104
    chr = henri_post_array->(ndx - 1);
    if (chr == '@{0}') {
        print ". ";
        rfalse;
    }
    chr = chr + 65 - 1;
    print (char) chr, " ";
    rtrue;
];

! References: Crescent_Moon.name

[ DisplayWholeGrid ;	! 127272 / 0x1f128
    0-->8 = 2 | 0-->8;
    print "     ";
    DisplaySlidePos(1);
    DisplaySlidePos(2);
    DisplaySlidePos(3);
    print "^      + +^", "     ";
    DisplaySlidePos(4);
    DisplaySlidePos(5);
    DisplaySlidePos(6);
    print "^      + +^", "     ";
    DisplaySlidePos(7);
    DisplaySlidePos(8);
    DisplaySlidePos(9);
    print "^      + +^", "     ";
    DisplaySlidePos(10);
    DisplaySlidePos(11);
    DisplaySlidePos(12);
    print "^      + +^", "     ";
    DisplaySlidePos(13);
    DisplaySlidePos(14);
    DisplaySlidePos(15);
    new_line;
    0-->8 = 65533 & 0-->8;
    rtrue;
];

! References: CR.short

[ CRShort ;	! 127464 / 0x1f1e8
    if (selfobj.time_left == 3) {
        print "Contraption Reflection";
    } else {
        print "Contraption Room";
    }
    rtrue;
];

! References: CR.e_to

[ CREast ;	! 127508 / 0x1f214
    if (selfobj.time_left == 3) {
        "You bump into an invisible barrier - perhaps the edge of the reflection.";
    }
    return The_Catacombs;
];

! References: CR.before

[ CRBefore ;	! 127564 / 0x1f24c
    if (action == ##Go or ##Enter) {
        if (noun == n_obj or s_obj or metal_wall) {
            print "^Walking through the mirror is a wrench, but leaves you somewhere... almost exactly the same...^";
            displaying_quote = true;
            Achieved(SCORE_REFLECTING);
            if (noun == n_obj) {
                selfobj.s_to = metal_wall;
                selfobj.n_to = nothing;
                metal_wall.w_to = ne_obj;
                selfobj.time_left = 3;
            } else {
                selfobj.n_to = metal_wall;
                selfobj.s_to = nothing;
                metal_wall.w_to = w_obj;
                selfobj.time_left = 2;
            }
            AdjustSlide(0,2);
            AdjustSlide(3,5);
            AdjustSlide(6,8);
            AdjustSlide(9,11);
            AdjustSlide(12,14);
        }
        rfalse;
    }
    if (action == ##Look) {
        if (selfobj has general) {
            print "^The lower basket contains a cannonball, and the upper is empty.^";
            rfalse;
        }
        if (child(hanging_cord) ~= nothing) {
            print "^The lower basket contains ";
            WriteListFrom(child(hanging_cord),8 + 64);
            ".";
        }
    }
    rfalse;
];

! References: metal_wall.initial

[ MetalWallInitial ;	! 127832 / 0x1f358
    print "The whole ";
    if (CR.time_left == 2) {
        print "north";
    } else {
        print "south";
    }
    " wall is occupied by a bronze mirror, reflecting the room.";
];

! References: metal_wall.after

[ MetalWallAfter ;	! 127904 / 0x1f3a0
    if (action == ##Clean) {
        "You polish the metal a little, but there's far too much to do by hand.";
    }
    rfalse;
];

! References: daisy_chain.name, iron_grid.initial

[ IronGridInitial ;	! 127956 / 0x1f3d4
    print "Amid the glass wall is an iron panel divided into a three-by-five grid.^^Behind the glass is a kind of see-saw of two leather baskets at opposite ends of an oak pivot. ", "In one corner of the roof, above the far end of the see-saw, is a ";
    if (ancient_well notin nothing) {
        print "hole through which dim natural light emanates.^^";
    } else {
        print "dark hole.^^";
    }
    print "Projecting out of the back of the panel mechanism at the near end is a metal hand, which ";
    if (CR has general) {
        "grasps empty air.";
    }
    "grasps a cannonball in mid-air.";
];

! References: iron_grid.description

[ GridDesc ;	! 128252 / 0x1f4fc
    print "There are fourteen pieces in the grid, and one gap. The pieces have letters upon them ";
    if (CR.time_left == 3) {
        print "(in reflected script) ";
    }
    print "and are arranged as follows:^^";
    DisplayWholeGrid();
    "^[Try ~slide b~, for instance, to move a piece into the gap.]";
];

! References: glowing_golden_orb.after, cannonball.after

[ CannonballAfter ;	! 128404 / 0x1f594
    if (verb ~= ##Read) {
        "It is out of reach, beyond the glass.";
    }
    rfalse;
];

[ SlideSub i j col ;	! 128436 / 0x1f5b4
    if (location ~= CR) {
        "~Slide~ is inappropriate here.";
    }
    if (noun == nothing) {
        "What piece was that?";
    }
    i = 0;
  .label128490;
    if (i <= 14) {
        if (henri_post_array->i == noun) {
            if (i >= 3) {
                j = i - 3;
                if (henri_post_array->j == 0) {
                    jump label128652;
                }
            }
            if (i < 12) {
                j = i + 3;
                if (henri_post_array->j == 0) {
                    jump label128652;
                }
            }
            col = i % 3;
            if (col ~= 0) {
                j = i - 1;
                if (henri_post_array->j == 0) {
                    jump label128652;
                }
            }
            if (col ~= 2) {
                j = i + 1;
                if (henri_post_array->j == 0) {
                    jump label128652;
                }
            }
        }
        ++i;
        jump label128490;
    }
    print "Unfortunately, '", (char) noun + 65 - 1, "' is not adjacent to the gap.";
    new_line;
    rtrue;
  .label128652;
    ++slide_moves;
    if (slide_moves == 8) {
        set_flag_array(36);
    }
    if (slide_moves == 5) {
        set_flag_array(42);
    }
    col = henri_post_array->i;
    henri_post_array->j = col;
    henri_post_array->i = 0;
    print "You slide '", (char) noun + 65 - 1, "' into the gap, leaving the grid looking like:^^";
    DisplayWholeGrid();
    i = 0;
  .label128749;
    if (i <= 14) {
        if (henri_post_array->i ~= array_25306->i) {
            rfalse;
        }
        ++i;
        jump label128749;
    }
    Achieved(SCORE_HENRIPOST);
    print "^There is a click from the mechanism. Pulleys pull. Cogs spin. Little bits of string run.^";
    if (CR hasnt general) {
        give CR general;
        print "^The cannonball drops out of the metal hand, and falls into the higher basket, which plunges down, hurling the other basket upwards, ";
        j = child(hanging_cord);
        if (j == 0) {
            "but it must have been empty.";
        }
        j = sibling(j);
        print "and projecting ";
        if (j == 0) {
            print "something";
        } else {
            print "some things";
        }
        print " up the hole in the corner.^";
        if (CR has light) {
            j = child(hanging_cord);
          .label129019;
            if (j ~= 0) {
                i = sibling(j);
                move j to Lawn_Ornaments;
                j = i;
                jump label129019;
            }
            move ancient_well to Lawn_Ornaments;
        } else {
            print "^A moment later, however, there is a distant but loud thump. A moment after that, something plummets back down out of the hole (in a shower of thin white plaster) and into the higher basket, which (owing to fantastic machinery) wrenches down again, hurling the cannonball in the other end up into the air.^^The metal hand catches the cannonball beautifully.^";
            give CR ~general;
        }
        if (parent(golden_orb) == hanging_cord) {
            move glowing_golden_orb to CR;
        } else {
            remove glowing_golden_orb;
        }
    }
    rtrue;
];

! References: big_electricians_switch.before

[ SwitchBefore ;	! 129292 / 0x1f90c
    if (action == ##SwitchOn) {
        "Click-clunk!  The world looks precisely the same.";
    }
    if (action == ##SwitchOff) {
        "Clunk-click!  Probably nothing very much has changed.";
    }
    rfalse;
];

! References: large_dial.after

[ DialAfter ;	! 129376 / 0x1f960
    if (action == ##Turn) {
        if (global164 == 0) {
            global164 = 1[?];
            set_flag_array(12);
            "Is it really wise to go meddling with things here?  Well, only one way to find out. Don't expect a second warning!";
        }
        deadflag = DESTROYED_UNIVERSE;
        score = 65437;
        "Mmm. On the whole, it's probably best not to alter one of the fundamental constants of the physical universe while still inside it. On the bright side, for once you are unlikely to get the blame.";
    }
    rfalse;
];

! References: golden_orb.after

[ GlowingOrbAfter ;	! 129592 / 0x1fa38
    if (action == ##Clean) {
        if (selfobj has general) {
            "It shines already!";
        }
        print "Bewilderingly, the condensation dissolves your hand away, and the water rushes up over your body as if it were blotting paper. You feel nothing except disorientation, but your confusion soon resolves to...^";
        move golden_orb to location;
        ContainerSave = parent(player);
        LocationSave = location;
        PlayerTo(Inside_the_Orb);
        rtrue;
    }
    rfalse;
];

! References: Inside_the_Orb.before

[ InOrbBefore ;	! 129760 / 0x1fae0
    if (action == ##Strike) {
        "The sphere rings with a hollow noise, but the rod charges up.";
    }
    rfalse;
];

! References: Inside_the_Orb.each_turn

[ InOrbEachTurn i j ;	! 129804 / 0x1fb0c
    i = Inside_the_Orb.number + 1;
    Inside_the_Orb.number = i;
    if (i == 1) {
        rtrue;
    }
    if (i == 2) {
        print "^The sphere rotates, giving you a fresh view of the images: stylised Kings and Queens?^";
    }
    if (i == 4) {
        print "^The sphere rotates, giving you another look: humble tokens of warriors.^";
    }
    if (i == 6) {
        print "^The sphere rotates, giving you another look: carved horse-heads and Bishops' mitres.^";
    }
    if (i == 8) {
        print "^(The sphere rotates.)  It's a chess game!  Now you understand. But you still can't puzzle out the actual solution.^";
    }
    if (i == 10) {
        print "^(The sphere rotates.)  You have some impression that White is trying to make an attack, having plenty of spare pieces.^";
        set_flag_array(26);
    }
    if (i == 12) {
        print "^(The sphere rotates.)  Seeing the board from Black's point of view, the defence looks solid.^";
    }
    if (i == 14) {
        print "^(The sphere rotates.)  Back to White's side. You definitely need to smash through somehow, all that cautious exchanging of pieces hasn't worked. If you want White to win, that is.^";
    }
    j = i % 4;
    if (j == 0) {
        give Inside_the_Orb ~general;
        if (i > 12) {
            "^(The sphere rotates.)  Black still looks safe.";
        }
    }
    if (j == 2) {
        give Inside_the_Orb general;
        if (i > 14) {
            "^(The sphere rotates.)  White must break out somehow.";
        }
    }
    rfalse;
];

! References: Causeway.after, Island_of_Pharos.after, Jetty.after, Warehouses_and_Port.after

[ CausewayAfter ;	! 130472 / 0x1fda8
    if (action == ##Drink) {
        "Drink warm salty water?  No.";
    }
    if (action == ##Swim) {
        "The waters are deceptively treacherous. Best not.";
    }
    rfalse;
];

! References: Causeway.initial

[ CausewayInitial ;	! 130540 / 0x1fdec
    StartDaemon(selfobj);
    if (Austin in selfobj) {
        StartDaemon(Outside_the_Royal_Museum);
    }
    rfalse;
];

! References: Causeway.daemon

[ CausewayDaemon local1 ;	! 130560 / 0x1fe00
    if (game_section ~= T_ALEXANDRIA) {
        rfalse;
    }
    selfobj.number = (selfobj.number + 1) % 12;
    if (location ~= Crossroads or Outside_the_Royal_Museum or Stadium) {
        rfalse;
    }
    local1 = Causeway.number;
    if (location == Outside_the_Royal_Museum) {
        --local1;
    }
    if (location == Stadium) {
        local1 = local1 - 2;
    }
    if (local1 < 4) {
        "^A lively, very noisy procession pushes through here, and some spectacular floats are approaching fast.";
    }
    if (local1 == 4[e_obj?]) {
        "^The Morning Star leads an enormous procession for the festival of Dionysus, which throngs with officials dressed as satyrs, actors and townswomen.";
    }
    if (local1 == 5[w_obj?]) {
        "^Behind the front are huge statues on mechanical floats, flanked by giant overflowing pitchers of wine. And the animals are coming!";
    }
    if (local1 == 6[ne_obj?]) {
        "^Yes, 2000 oxen dressed in gold, as many dogs, and the giraffes, the antelopes, the gnus, parrots, elephants, wildebeest... ostriches pulling carts, a white bear...";
    }
    if (local1 == 7[se_obj?]) {
        "^Next the dancers, in a great masque of the life of Alexander the Great, his travels, conquests, founding of the City, and so on. The delicate matter of how exactly his general Ptolemy took over is omitted, since Ptolemy's son Ptolemy II is now very much in charge.";
    }
    if (local1 == 8[nw_obj?]) {
        "^The centrepiece of the procession: an enormous gold ribboned phallus, two hundred feet long and with a giant star on the end. Inexplicably, you are the only person present who feels this to be in doubtful taste.";
    }
    if (local1 == 9[sw_obj?]) {
        "^A procession of women follows next, each in the national dress of an allied city state, from all over the Hellenistic world, North Africa to Sicily to Asia.";
    }
    if (local1 == 10[u_obj?]) {
        "^The procession ends as it began, with a great Evening Star, before falling into a shambolic crowd of revellers, drunken and maudlin.";
    }
    if (local1 > 10) {
        "^The procession looks like running on forever.";
    }
    rfalse;
];

! References: Island_of_Pharos.each_turn

[ PharosEachTurn ;	! 131540 / 0x201d4
    if (random(5) ~= 1) {
        "^Down below, a wave splashes against the sea front, briefly washing up under the grating.";
    }
    rfalse;
];

! References: Island_of_Pharos.daemon

[ PharosDaemon ;	! 131608 / 0x20218
    if (random(5) ~= 1) {
        rfalse;
    }
    if (smooth_round_stone has general) {
        Achieved(SCORE_WASH);
        move smooth_round_stone to Warehouses_and_Port;
        move rusty_iron_key to Warehouses_and_Port;
        give smooth_round_stone ~general;
        give smooth_round_stone ~moved;
        give smooth_round_stone ~concealed;
        give rusty_iron_key general;
        rusty_iron_key.initial = "That iron key seems to have washed up here...";
        smooth_round_stone.initial = "...and there's the strange stone again.";
        if (location == Island_of_Pharos) {
            "^A wave splashes up under the grating, throwing up the strange stone, which bounces back off the grating and washes away down the passage out of sight.^^Well, you didn't think it was going to be that easy, did you?^";
        }
    } else {
        StopDaemon(selfobj);
    }
    rfalse;
];

! References: rusty_iron_grating.after

[ IronGratingAfter ;	! 131812 / 0x202e4
    if (action == ##Receive) {
        if (noun == player) {
            "The bars are far too close together.";
        }
        if (noun == smooth_round_stone) {
            move noun to Island_of_Pharos;
            give smooth_round_stone general;
            give smooth_round_stone concealed;
            StartDaemon(Island_of_Pharos);
            rusty_iron_key.initial = "The iron key, out of reach below, is glued somehow to the strange stone.";
            "The strange stone drops through the grating, and falls on the top step. The iron key mysteriously glues itself to the metal in the stone. It's still out of reach, though.";
        }
        if (noun == robot_mouse) {
            "The robot mouse is just the wrong shape.";
        }
        move noun to Jetty;
        CDefart(noun);
        " drops through the grating and bounces down in the darkness.";
    }
    rfalse;
];

! References: rusty_iron_key.after

[ RustyKeyAfter ;	! 132056 / 0x203d8
    if (action == ##Take && rusty_iron_key hasnt general) {
        "Reach down the grating as you may, it remains just beyond reach.";
    }
    rfalse;
];

! References: Jetty.each_turn

[ JettyEachTurn ;	! 132112 / 0x20410
    if (random(4) ~= 1) {
        rfalse;
    }
    if (player in skiff) {
        "^A wave suddenly rocks the skiff.";
    }
    "^A wave suddenly splashes against your feet, up to the knees, and washes up the steps toward the grating.";
];

! References: Harbour_Mouth.after, Drifting.after

[ HarbourMouthAfter ;	! 132216 / 0x20478
    if (action == ##Exit or ##Swim) {
        "The sepulchral calm of the ocean overwhelms you, and you can only watch and sail.";
    }
    rfalse;
];

! References: fig.name, Harbour_Mouth.each_turn

[ HarbourMouthEachTurn ;	! 132276 / 0x204b4
    if (Harbour_Mouth has general) {
        print "^The sails billow, then slacken...^";
        move skiff to Drifting;
        location = Drifting;
        R_Process(##Look);
        rtrue;
    } else {
        give Harbour_Mouth general;
    }
    rfalse;
];

! References: Drifting.each_turn

[ DriftingEachTurn ;	! 132340 / 0x204f4
    print "^Light brightens into day. The skiff drifts, drifts upon...^";
    move skiff to Garden_Stream;
    location = Garden_Stream;
    R_Process(##Look);
    rtrue;
];

! References: Crossroads.after

[ CrossroadsAfter ;	! 132404 / 0x20534
    if (action == ##Go) {
        if (noun == ne_obj && cloak_of_many_colours has worn) {
            print "The procession happily accommodates another crazily-dressed loon.^";
            rfalse;
        }
        if (noun == nw_obj or sw_obj or se_obj) {
            rfalse;
        }
        "The enormous procession, which throngs the great streets of Alexandria, is impossible to push your way through. Better just enjoy the spectacle.";
    }
    rfalse;
];

! References: unexciting_tombstone.after

[ TombstoneAfter ;	! 132568 / 0x205d8
    if (action == ##Receive) {
        if (noun ~= gleaming_amber_gem) {
            "Doesn't seem to fit.";
        }
        if (unexciting_tombstone has open) {
            "What?";
        }
        unexciting_tombstone.description = "An amber gem gleams in the mouth of its face.";
        give unexciting_tombstone open;
        set_flag_array(25);
        move gleaming_amber_gem to unexciting_tombstone;
        "The amber fits perfectly into the mouth of the stone face, and there is a heaving from beneath your feet... you topple over backward, flailing wildly. When you get up you can see a short flight of steps leading down. You have opened the tomb!";
    }
    rfalse;
];

! References: cloak_of_many_colours.after, grey_cloak.after

[ CloakAfter ;	! 132776 / 0x206a8
    if (action == ##Turn or ##SwitchOn) {
        if (noun has worn) {
            "Not while you're wearing it.";
        }
        if (noun notin player) {
            "You need to be holding it.";
        }
        if (noun == cloak_of_many_colours) {
            move grey_cloak to player;
            remove cloak_of_many_colours;
            itobj = grey_cloak;
        } else {
            move cloak_of_many_colours to player;
            remove grey_cloak;
            itobj = cloak_of_many_colours;
        }
        "You turn the cloak inside out.";
    }
    rfalse;
];

! References: photographers_flash.name, XIIth_Dynasty_Pyramid.after

[ PyramidAfter ;	! 132888 / 0x20718
    if (action == ##Smell) {
        "Why do you only ever smell hard in unpleasant places?  The odour is repulsive in a termites-and-honey kind of way.";
    }
    rfalse;
];

! References: The_Height_of_Fashion.after

[ HeightFashionAfter ;	! 132972 / 0x2076c
    if (action == ##Sleep) {
        if (player in wooden_couch) {
            print "The heavy weave mattings feel so restful that you slide into...^";
            The_Spirit_World.number = 1;
            PlayerTo(The_Spirit_World);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: The_Height_of_Fashion.w_to

[ HeightFashionWest ;	! 133044 / 0x207b4
    if (player notin location) {
        "First get up.";
    }
    print "Slightly to your surprise, the sphinxes make no effort to stop you.^";
    return 421[This_Is_The_Death?];
];

! References: stone_nose_of_a_sphinx.after

[ NoseAfter ;	! 133108 / 0x207f4
    if (action == ##Push or ##Pull) {
        "It is made of stone, you know.";
    }
    if (action == ##Turn) {
        if (player notin location) {
            "You can't reach from the couch.";
        }
        if (marble_wall has open) {
            give marble_wall ~open;
        } else {
            give marble_wall open;
        }
        Achieved(SCORE_SPHINX);
        "You twist the nose, and before it springs back there is a rumbling of stone from below.";
    }
    rfalse;
];

! References: The_Spirit_World.w_to

[ SpiritWorldWest ;	! 133240 / 0x20878
    print "The spirits of the sphinxes prowl across the doorway, paws raised, and then lunge towards you. Their claws rake across your skin, tearing off a layer, unwrapping you in a curiously painless way... and you wake...^";
    if (The_Spirit_World.number == 1) {
        move player to wooden_couch;
        location = The_Height_of_Fashion;
    } else {
        The_Spirit_World.number = The_Spirit_World.number - 1;
        move player to wooden_couch;
        remove Napoleonic_officers;
    }
    R_Process(##Look);
    rtrue;
];

! References: fore_obj.name, The_Spirit_World.after

[ SpiritWorldAfter ;	! 133428 / 0x20934
    if (action == ##Go) {
        if (noun == w_obj) {
            rfalse;
        }
        if (The_Spirit_World.number == 4) {
            "You somehow cannot leave the tomb. Your spirit is anchored still to your body, sleeping two thousand years before.";
        }
        "The tomb is sealed, apparently forever.";
    }
    if (action == ##Take or ##Drop or ##Inv or ##Empty or ##Remove or ##Insert) {
        "You are beyond worldly possessions.";
    }
    if (action == ##Sleep) {
        if (player in wooden_couch) {
            if (The_Spirit_World.number == 4) {
                "The spell of the tomb is broken now, and you cannot sleep.";
            }
            print "The heavy weave mattings draw you deeper into...^";
            The_Spirit_World.number = The_Spirit_World.number + 1;
            PlayerTo(The_Spirit_World);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: The_Spirit_World.before

[ SpiritWorldBefore local1 ;	! 133704 / 0x20a48
    if (action == ##Look) {
        local1 = The_Spirit_World.number;
        if (local1 == 1[?]) {
            "^The tomb seems older now, weighed under with centuries.";
        }
        if (local1 == 2[?]) {
            "^The tomb swelters now, a thousand years old.";
        }
        if (local1 == 3[s_obj?]) {
            "^The tomb is beautifully well-preserved, but it seems quite ancient.";
        }
        if (local1 == 4[e_obj?]) {
            print "^By now the tomb might be two thousand years old.^";
            if (Napoleonic_officers in The_Spirit_World) {
                "^And at last it has been opened.";
            }
        }
        rfalse;
    }
    rfalse;
];

! References: The_Spirit_World.each_turn

[ SpiritWorldEachTurn ;	! 133912 / 0x20b18
    if (The_Spirit_World.number < 4) {
        rfalse;
    }
    ++global165;
    if (global165 == 2[?]) {
        print "^The entrance to the tomb rumbles.^";
    }
    if (global165 == 3[s_obj?]) {
        print "^The noise grows, and dust falls from cracks in the masonry.^";
    }
    if (global165 == 4[e_obj?]) {
        print "^The entrance bursts open in a shower of plaster!  Light streams in, searing your eyes. There is a great commotion. Two Napoleonic French officers stride down the stairs, lanterns in hand, looking admiringly around the court. They do not seem to see you.^";
        move Napoleonic_officers to The_Spirit_World;
    }
    if (global165 == 5[w_obj?]) {
        print "^The officers are fascinated by the way the tomb seems almost untouched, and yet the couch looks slept in.^";
    }
    if (global165 == 6[ne_obj?]) {
        print "^The officers look down the passage, finding it to be sealed.^";
    }
    if (global165 == 7[se_obj?]) {
        print "^The officers sit next to the sphinxes, stroking their moustaches in comic perplexity. As they do so, one bangs his head on a stone nose.^";
    }
    if (global165 == 8[nw_obj?]) {
        print "^The other officer is greatly amused by this slapstick. (You really are beginning to see just how boring the living can be.)^";
    }
    if (global165 == 9[sw_obj?]) {
        print "^The first officer tweaks the nose of the sphinx in affection. Suddenly there is a great rumbling of stone from the passage below, and they rush down to investigate!^";
        remove Napoleonic_officers;
        give sphinxes general;
        move stone_nose_of_a_sphinx to The_Height_of_Fashion;
    }
    rfalse;
];

! References: Napoleonic_officers.life

[ OfficerLife ;	! 134572 / 0x20dac
    if (action == ##Kiss or ##Attack) {
        "Your body passes through them.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "They hear nothing.";
    }
    rfalse;
];

! References: model_of_ugly_animal.short

[ UglyAnimalShort ;	! 134624 / 0x20de0
    if (selfobj hasnt general) {
        rfalse;
    }
    print "model of a mischievous-looking monkey, which wriggles as it comes alive";
    rtrue;
];

! References: Quite_an_Undertaking.after

[ UndertakingAfter ;	! 134680 / 0x20e18
    if (player in mummy_case) {
        if (verb == ##Exit) {
            print "(That's a relief.)^";
            rfalse;
        }
        if (verb ~= ##Close) {
            print "(You are so distracted that common sense takes over and you clamber out of the mummy case.)^";
            move player to parent(mummy_case);
            location = parent(player);
        }
    }
    if (action == ##Go) {
        if (noun == n_obj or ne_obj) {
            if (second_socket hasnt general) {
                move quarterstaff to Quite_an_Undertaking;
                give second_socket general;
                "The passage seems endless, and you are obliged to retreat before the air runs out. You trip over something as you do, cursing under your breath.";
            }
            "The passage seems endless and you retreat.";
        }
        rfalse;
    }
    rfalse;
];

! References: mummy_case.after

[ MummyCaseAfter ;	! 134932 / 0x20f14
    if (action == ##Open) {
        if (selfobj hasnt open) {
            "The lid must weigh a ton. You can't shift it.";
        }
        "The coffin's already open.";
    }
    if (action == ##Close) {
        if (noun == mummy_case && noun has open && player in mummy_case) {
            if (global166 == 0) {
                global166 = 1[?];
                "That seems an awfully... final decision. Here's a chance to reconsider.";
            }
            print "The lid slams down on you with a very terminal sound indeed.^^^   *** You have ...^^^But - something more is happening. The coffin's delicate balance has been altered, and it is sliding, slipping away down the square passage, endlessly, endlessly...^^And even that is not the end, for you suddenly crash into buffers at one end. What a lucky escape, you think... for a moment...^";
            PlayerTo(Buried_Alive);
            rtrue;
        }
        if (selfobj has open) {
            "No, don't. Once shut it would never open again.";
        }
        "The coffin is, to put it mildly, already closed.";
    }
    if (action == ##Enter) {
        if (mummy_case hasnt open) {
            "It's closed.";
        }
        print "(You can't help feeling that someone has planned all this... and it isn't you.)^^";
        rfalse;
    }
    rfalse;
];

! References: first_socket.description, second_socket.description, third_socket.description

[ SocketDesc ;	! 135484 / 0x2113c
    print "Above ";
    Defart(selfobj);
    print " is the single word ~";
    EtruscanInt(selfobj.number);
    "~.";
];

! References: first_socket.after, second_socket.after, third_socket.after

[ SocketAfter ;	! 135524 / 0x21164
    if (action == ##Receive) {
        if (noun == model_golden_sceptre) {
            model_golden_sceptre.number = selfobj;
            if (selfobj == first_socket) {
                model_golden_sceptre.initial = "The sceptre projects from the first socket like a handle.";
            }
            if (selfobj == second_socket) {
                model_golden_sceptre.initial = "The sceptre projects from the second socket like a handle.";
            }
            if (inp2 == 429[third_socket?]) {
                model_golden_sceptre.initial = "The sceptre projects from the third socket like a handle.";
            }
            move model_golden_sceptre to Quite_an_Undertaking;
            give model_golden_sceptre ~moved;
            "It fits perfectly (wouldn't you know it).";
        } else {
            "Doesn't seem to fit, quite.";
        }
        rfalse;
    }
    rfalse;
];

! References: model_golden_sceptre.before

[ SceptreBefore ;	! 135656 / 0x211e8
    if (action == ##Take or ##Remove) {
        if (location == Quite_an_Undertaking) {
            selfobj.number = 0;
        }
        rfalse;
    }
    rfalse;
];

! References: model_golden_sceptre.after

[ SceptreAfter i ;	! 135680 / 0x21200
    if (action == ##Wave) {
        "Apparently, it's not susceptible to that.";
    }
    if (action == ##Turn) {
        if (selfobj notin Quite_an_Undertaking || selfobj has moved) {
            rfalse;
        }
        if (selfobj.number ~= 0 && mummy_case has open) {
            give mummy_case ~open;
            print "With a crash, the coffin slams shut.^^";
        }
        print "You crank the sceptre round, lose control for a moment, and some primitive mechanism spins. The word comes to rest as ~";
        i = random(6);
        EtruscanInt(i);
        print "~.^";
        selfobj.number.number = i;
        if (debug_deterministic_transportation == 1) {
            first_socket.number = 3;
            second_socket.number = 6;
            third_socket.number = 1;
        }
        if (first_socket.number == 3 && second_socket.number == 6 && third_socket.number == 1 || (first_socket.number == 1 && second_socket.number == 6 && third_socket.number == 3)) {
            give mummy_case open;
            mummy_case.initial = "The great lid of the coffin is open.";
            "^With an awful groaning noise, the coffin lid heaves open. And it is...^^Empty!";
        }
        rtrue;
    }
    rfalse;
];

! References: Buried_Alive.after

[ BuriedAfter ;	! 136036 / 0x21364
    if (verb == ##Look or ##Wait or ##Inv) {
        rfalse;
    }
    if (verb == ##Sleep) {
        rfalse;
    }
    if (verb ~= ##Go) {
        "There's very little room, and the air is running out.";
    }
    if (mummy_case hasnt general || inp1 ~= 10[u_obj?]) {
        "There's nowhere to go.";
    }
    if (selfobj has general) {
        "^Your spirit, having cheated death once already, is weighed down with its double life and will not diffuse out again.";
    }
    give selfobj general;
    Achieved(SCORE_AFTERLIFE);
    move adamantine_skull to player;
    print "^Your spirit rises, prepared as it was for the afterlife, and diffuses through the solid gold of the coffin by sheer effort of will, finally beginning to recoalesce. You stagger, confused, through dark caves until you finally come to light, clutching something solid...^";
    rfalse;
];

! References: Buried_Alive.each_turn

[ BuriedEachTurn local1 ;	! 136372 / 0x214b4
    local1 = Buried_Alive.number - 1;
    Buried_Alive.number = local1;
    if (local1 == 0) {
        deadflag = DIED;
        "^The air runs out, and you expire. Few corpses as so considerate as to bury themselves in advance - hopefully this thought is some consolation.";
    }
    if (local1 == 3[s_obj?]) {
        "^You are beginning to choke and pant.";
    }
    if (local1 == 1[?]) {
        "^The air is desperately thin now, and you struggle hopelessly.";
    }
    rfalse;
];

! References: Outside_the_Royal_Museum.se_to

[ OutsideRoyalMuseumSE ;	! 136564 / 0x21574
    if (purple_sash has worn) {
        print "Seeing that you're wearing the sash of a Librarian, the guards part to allow you entrance.^";
        return The_Birdcage_of_the_Muses;
    }
    if (Austin in location) {
        print "The Museum guards are so busy abasing themselves before the sacred Cat (incredibly, that's Austin) that you are able to slip inside.^^Austin, having at long last found owners even more gullible and undemanding than yourself, ambles away to a life of extreme cossetting and luxury.^";
        remove Austin;
        StopDaemon(Austin);
        StopDaemon(selfobj);
        return The_Birdcage_of_the_Muses;
    }
    "Museum guards tactfully nudge drunken louts away from the Museum.";
];

! References: Outside_the_Royal_Museum.daemon

[ OutsideRoyalMuseumDaemon ;	! 136876 / 0x216ac
    if (game_section ~= T_ALEXANDRIA || location has cat_nofollow || Austin in location) {
        rfalse;
    }
    move Austin to location;
    "^Austin strolls regally along with you.";
];

! References: defaced_door.after

[ DefacedDoorAfter ;	! 136924 / 0x216dc
    if (action == ##Open) {
        if (grey_cloak has worn) {
            rfalse;
        }
        "It won't open, for no reason you can see.";
    }
    if (action == ##Knock) {
        "The door shakes, and its old wood whispers ~Sosostris, the Priest of Sosostris~ in a falling echo.";
    }
    rfalse;
];

! References: table.after

[ TableAfter ;	! 137036 / 0x2174c
    if (action == ##Receive) {
        if (noun == quarterstaff) {
            remove quarterstaff;
            give defaced_door ~open;
            give defaced_door lockable;
            give defaced_door locked;
            print "Madame Sosostris looks up, startled. ~Yes,~ she says, ~yes... this has potential.~^^She mutters incantations over the green wood and it begins to straighten out in a quite Freudian way. ~It will be ready in two thousand years. Come back then.~^^And she slips something into your palm as she bustles you out.^";
            PlayerTo(A_Tower);
            move silver_keepsake to player;
            Achieved(SCORE_QUARTERSTAFF);
            rtrue;
        }
        print "Madame Sosostris brushes ";
        Defart(noun);
        move noun to location;
        " aside impatiently.";
    }
    rfalse;
];

! References: Madame_Sosostris.life

[ SosostrisLife ;	! 137336 / 0x21878
    if (action == ##Give or ##Kiss) {
        "She is staring fixedly at the table, meditating.";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "Madame Sosostris is meditating.";
    }
    if (action == ##Attack) {
        "Your hand feels impotent to do so.";
    }
    rfalse;
];

! References: quarterstaff.after

[ QuarterstaffAfter ;	! 137436 / 0x218dc
    if (action == ##Wave) {
        "It rumbles in your hands, but nothing else happens.";
    }
    rfalse;
];

! References: gambling_sailor.after

[ SailorAfter ;	! 137476 / 0x21904
    if (action == ##Gamble) {
        R_Process(##Drop,inscribed_die);
        rtrue;
    }
    rfalse;
];

! References: gambling_sailor.life

[ SailorLife ;	! 137492 / 0x21914
    if (action == ##Order or ##Ask or ##Answer) {
        "You can't understand his guttural speech, but the die seems his only fascination.";
    }
    if (action == ##Kiss) {
        "Yes, your sort can be found down by the docks of most ports.";
    }
    if (action == ##Answer) {
        "He is burlier than you.";
    }
    rfalse;
];

! References: gambling_sailor.each_turn

[ GamblingSailorEachTurn n ;	! 137616 / 0x21990
    if (gambling_sailor has general) {
        n = random(5);
        if (n < 3) {
            print "^The sailor grabs the die and throws a ~";
            n = random(6);
            if (gambling_sailor has lucky || inscribed_die has lucky) {
                n = 6;
            }
            EtruscanInt(n);
            print "~, ";
            if (n > inscribed_die.number) {
                print "and grins.^";
            }
            if (n < inscribed_die.number) {
                print "and sighs.^";
            }
            if (n == inscribed_die.number) {
                print "and shrugs.^";
            }
            inscribed_die.number = n;
            give gambling_sailor ~general;
        } else {
            "^The sailor stares at the die thoughtfully.";
        }
    } else {
        "^The sailor hums a sea shanty.";
    }
    rfalse;
];

! References: inscribed_die.after

[ InscribedDieAfter local1 ;	! 137820 / 0x21a5c
    if (action == ##Take) {
        "The sailor covers it with his hand. But he looks the type who's never averse to a game.";
    }
    if (action == ##Read) {
        print "Each side has a word inscribed on it. The word on top is ~";
        EtruscanInt(selfobj.number);
        "~.";
    }
    if (action == ##Drop or ##ThrowAt or ##Gamble) {
        local1 = random(6);
        if (inscribed_die has lucky) {
            local1 = 6[ne_obj?];
        }
        give gambling_sailor general;
        inscribed_die.number = local1;
        print "You throw a ~";
        EtruscanInt(local1);
        "~, whatever that means.";
    }
    rfalse;
];

[ EtruscanInt i ;	! 138004 / 0x21b14
    if (i == 1) {
        print "thu";
    }
    if (i == 2) {
        print "zal";
    }
    if (i == 3) {
        print "si";
    }
    if (i == 4) {
        print "ca";
    }
    if (i == 5) {
        print "mach";
    }
    if (i == 6) {
        print "huth";
    }
    rtrue;
];

! References: The_Birdcage_of_the_Muses.each_turn

[ BirdcageEachTurn i ;	! 138060 / 0x21b4c
    i = The_Birdcage_of_the_Muses.number;
    if (i == 3) {
        print "^A messenger-boy in a plain white tunic slips into the library and places a couple of tubes in the pigeonhole. So resentful is he of missing the party outside that he fails to notice you, and runs back out again at once.^";
        move tube_with_an_alpha_on to pigeonhole;
        move tube_with_a_kappa_on to pigeonhole;
    }
    if (i < 4) {
        The_Birdcage_of_the_Muses.number = i + 1;
    }
    rfalse;
];

! References: tube_with_an_alpha_on.parse_name, tube_with_a_kappa_on.parse_name

[ TubeParse local1 local2 ;	! 138240 / 0x21c00
    if (parser_action == ##TheSame) {
        return 65535[?];
    }
  .label138251;
    if (1[?] == 1[?]) {
        local2 = NextWord();
        if (Refers(selfobj,local2) == 1[?]) {
            ++local1;
        } else if (local2 == 40719['tubes'?]) {
            parser_action = ##PluralFound;
            ++local1;
        } else {
            return local1;
        }
        jump label138251;
    }
    rfalse;
];

! References: scroll_bearing_a_short_poem.parse_name, scroll_bearing_an_epic_poem.parse_name

[ ScrollParse local1 local2 ;	! 138300 / 0x21c3c
    if (parser_action == ##TheSame) {
        return 65535[?];
    }
  .label138311;
    if (1[?] == 1[?]) {
        local2 = NextWord();
        if (Refers(selfobj,local2) == 1[?]) {
            ++local1;
        } else if (local2 == 37344['poems'?] or 38703['scrolls'?]) {
            parser_action = ##PluralFound;
            ++local1;
        } else {
            return local1;
        }
        jump label138311;
    }
    rfalse;
];

! References: Oil_Room.after

[ OilRoomAfter ;	! 138364 / 0x21c7c
    if (action == ##Anoint) {
        if (noun ~= player || mummy_case has general) {
            "That hardly seems worthwhile.";
        }
        give mummy_case general;
        "You smear some oil on your head, making a mental note to wash your hair in the morning. It is the least sacred sacred ritual you have ever taken part in.";
    }
    rfalse;
];

! References: oil_filled_troughs.after

[ OilTroughsAfter ;	! 138500 / 0x21d04
    if (action == ##Drink or ##Enter) {
        "What a revolting idea!";
    }
    rfalse;
];

! References: spindle_from_the_globe.after

[ SpindleAfter ;	! 138528 / 0x21d20
    if (action == ##Pull) {
        R_Process(##Take,selfobj);
        rtrue;
    }
    rfalse;
];

! References: spindle_from_the_globe.before

[ SpindleBefore ;	! 138544 / 0x21d30
    if (action == ##Take) {
        if (spindle_from_the_globe hasnt general) {
            give spindle_from_the_globe general;
            spindle_from_the_globe.description = "Once the polar axis of a globe.";
            "As you pull out its polar axis, the spindle, the Earth collapses altogether in a possibly symbolic, certainly dusty shambles.";
        }
        rfalse;
    }
    rfalse;
];

! References: Callimachus.life, Apollonius.life

[ CallimachusLife local1 ;	! 138656 / 0x21da0
    if (action == ##Give) {
        if (selfobj == Callimachus && noun == tube_with_an_alpha_on || (selfobj == Apollonius && inp1 == 451[tube_with_a_kappa_on?])) {
            "He takes the tube, sees the letter on it, looks exasperated, clouts you over the head with the tube and pushes it back into your arms.";
        }
        if (noun == tube_with_an_alpha_on or tube_with_a_kappa_on) {
            CDefart(selfobj);
            print " takes the tube and looks inside";
            local1 = child(noun);
            if (local1 == 0) {
                move noun to location;
                " to find it is empty. He looks at you very darkly indeed but returns to his work, throwing the tube down impatiently.";
            }
            if (local1 == 452[scroll_bearing_a_short_poem?] or 453[scroll_bearing_an_epic_poem?]) {
                print " to see a scroll, which he pulls out eagerly.^^";
                if (selfobj == Callimachus && local1 == 453[scroll_bearing_an_epic_poem?] || (selfobj == Apollonius && local1 == 452[scroll_bearing_a_short_poem?])) {
                    remove local1;
                    if (parent(Callimachus) == parent(Apollonius)) {
                        move purple_sash to location;
                        move mystic_scroll to location;
                        move Apollonius to location;
                        Apollonius.initial = "Apollonius and Callimachus are now engaged in a furious, ugly brawl, from which it seems unlikely they will emerge for some considerable time.";
                        Achieved(SCORE_LIBRARY);
                        "One look is enough. He throws a vicious punch, and the librarians begin a savage bare-knuckled fist fight.^^This, shall we say, rather petty practical joke of yours does seem to have had one interesting consequence, though.";
                    }
                    remove noun;
                    print "~Arrghhhieee!~ he says (untranslatably), boiling over with rage. He then curses repeatedly, but the only word you can make out is ~";
                    if (selfobj == Callimachus) {
                        print "Apollonius";
                        move selfobj to parent(Apollonius);
                    } else {
                        print "Callimachus";
                        move selfobj to parent(Callimachus);
                    }
                    give Callimachus concealed;
                    Apollonius.initial = "Apollonius and Callimachus are having a furious, heated, endless argument about something. They seem well practised at this occupation.";
                    "~. He pushes you out of his way and stomps off.";
                }
                print "~Ahhhh...~ he says (untranslatably) as he reads. ";
                if (noun == Callimachus) {
                    print "Eventually, after a very long wait, ";
                } else {
                    print "But soon ";
                }
                move noun to location;
                "he finishes, puts the scroll back into the tube with the habit of a trained librarian, and drops it absentmindedly on the floor.";
            }
            print " to find ";
            Indefart(local1);
            print ", which, to say the least, comes as a surprise. Such a fuss is kicked up that you are quickly thrown out into the street.^";
            PlayerTo(Outside_the_Royal_Museum,1);
            rfalse;
        }
        "How could you bribe such disinterested men of learning as the librarians?";
    }
    if (action == ##Order or ##Ask or ##Answer) {
        "As a barbarian scholar, unversed in Greek, you can hardly expect to converse with such as he.";
    }
    rfalse;
];

! References: Outside_the_Royal_Palace_of_Alexander.n_to

[ PlaceNorth ;	! 139676 / 0x2219c
    if (cloak_of_many_colours has worn) {
        deadflag = DIED;
        "Or you could just saunter up to them wearing a cloak of many colours. Have it your own way.";
    }
    print "^You tiptoe into the palace, and immediately dart away from view of the many clerks and civil servants manning the machinery of government even at this late hour. Within seconds, you realise you are...^";
    return Lost_inside_the_Palace;
];

! References: silver_keepsake.name, Lost_inside_the_Palace.after

[ InsidePalaceAfter ;	! 139872 / 0x22260
    if (action == ##Go) {
        if (purple_sash hasnt worn) {
            move player to Outside_the_Royal_Palace_of_Alexander;
            location = Outside_the_Royal_Palace_of_Alexander;
            "The slave looks you over and sees that you do not bear the mark of an accredited visitor to the Palace. You are discreetly escorted out.";
        }
        rfalse;
    }
    if (action == ##Drop or ##Empty) {
        "The slave politely holds your arm fast until you desist.";
    }
    if (action == ##Anoppe) {
        if (Lost_inside_the_Palace has general) {
            routine140220();
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

! References: Lost_inside_the_Palace.before

[ InsidePalaceBefore ;	! 140040 / 0x22308
    if (action == ##Go) {
      .label140046;
        if (child(Lost_inside_the_Palace) ~= nothing) {
            remove child(Lost_inside_the_Palace);
            jump label140046;
        }
        move slave to Lost_inside_the_Palace;
        move player to Lost_inside_the_Palace;
        global170 = global169;
        global169 = global168;
        global168 = noun;
        give Lost_inside_the_Palace ~general;
        if (global170 == 6 && global169 == 4 && global168 == 3) {
            give Lost_inside_the_Palace general;
        }
        if (global168 == 3 && global169 == 3) {
            location = Outside_the_Royal_Palace_of_Alexander;
            move player to location;
        }
        ++global167;
        if (global167 == 2[?]) {
            set_flag_array(46);
        }
        rfalse;
    }
    rfalse;
];

! References: slave.life

[ SlaveLife ;	! 140144 / 0x22370
    if (action == ##Order) {
        if (verb == ##Anoppe && location has general) {
            R_Process(##Anoppe);
            rtrue;
        }
        "The slave doesn't seem to notice.";
    }
    if (action == ##Ask) {
        if (second == invalidObj29928 or invalidObj32817 && location has general) {
            R_Process(##Anoppe);
            rtrue;
        }
        rfalse;
    }
    rfalse;
];

[ routine140220 ;	! 140220 / 0x223bc
    print "The slave here, a senior adviser merely disguised as a deaf mute, reacts at once, taking you by the arm and leading you on a convoluted path through the Palace to the...^";
    PlayerTo(Palace_Balustrade);
    rtrue;
];

! References: Palace_Balustrade.after

[ BalustradeAfter ;	! 140336 / 0x22430
    if (action == ##Swim or ##Jump) {
        move player to Warehouses_and_Port;
        location = Warehouses_and_Port;
        "You dive off the balcony in a beautifully graceful motion, plunging perfectly into the icy and (fortunately) deep waters below. You then struggle to the surface in a panicky, floundering motion, and finally wash up out of the water in a clumsy, ridiculous one.";
    }
    rfalse;
];

! References: astronomical_mounting.after

[ MountingAfter ;	! 140508 / 0x224dc
    if (action == ##Receive) {
        if (noun == golden_astrolabe) {
            remove astronomical_mounting;
            move golden_astrolabe to Palace_Balustrade;
            give golden_astrolabe static;
            give golden_astrolabe ~moved;
            golden_astrolabe.initial = "Instead, there is an astrolabe.";
            move astronomical_mounting to Palace_Balustrade;
            "It fits beautifully, as if designed to go there.";
        }
        "Doesn't fit.";
    }
    rfalse;
];

! References: Beside_the_Drive.after

[ DriveAfter ;	! 140600 / 0x22538
    if (action == ##Go) {
        if (noun == w_obj or u_obj && selfobj.u_to == Dead_End) {
            print "With your heart in your mouth, you scale the old fire escape once again, breathing a sigh of relief as you haul yourself in through the open hatchway at the top.^";
        }
        rfalse;
    }
    rfalse;
];

! References: fire_escape.after

[ FireEscapeAfter ;	! 140724 / 0x225b4
    if (action == ##Climb or ##Enter) {
        R_Process(##Go,u_obj);
        rtrue;
    }
    rfalse;
];

! References: fire_escape.initial

[ FireEscpeInitial ;	! 140740 / 0x225c4
    if (Beside_the_Drive.u_to ~= Dead_End) {
        "Wistaria climbs a desperately rickety fire escape up the side of the Hall.";
    }
    "Wistaria climbs a desperately rickety fire escape up the east side of the Hall, and so might you: at the top the fire escape door into the attic is open.";
];

! References: bunch_of_nuts.after

[ NutsAfter ;	! 140884 / 0x22654
    set_flag_array(41);
    if (corn_crake in Hollow) {
        "The corn crake won't let you near her nest.";
    }
    rfalse;
];

! References: corn_crake.life

[ CornCrakeLife ;	! 140928 / 0x22680
    if (action == ##Order or ##Ask or ##Answer) {
        "The bird seems not to have heard.";
    }
    rfalse;
];

! References: Old_Evans.life

[ OldEvansLife ;	! 140960 / 0x226a0
    if (action == ##Order or ##Ask) {
        if (selfobj hasnt general) {
            "~Just a minute, I'm doing my form.~";
        }
        print "He looks at you in a hypnotic daze,";
        if (verb == ##Give && noun == Crescent_Moon && second == player) {
            move Crescent_Moon to player;
            Achieved(SCORE_HYPNOSIS);
            selfobj.description = "Old Evans' hat is empty. You feel terribly guilty.";
            " and before you can say ~How heartless I am~ he obediently hands you the Moon.";
        }
        " unable to follow your perfectly clear instruction.";
    }
    if (action == ##Answer) {
        "Evans is lost. Whatever do you mean?";
    }
    if (action == ##Give) {
        if (noun == Crescent_Moon) {
            "Evans looks sadly at the mascot. But it is tarnished now, you have spoilt it. Your guilt increases further.";
        }
        rfalse;
    }
    rfalse;
];

! References: parish_church.after

[ ChurchAfter ;	! 141256 / 0x227c8
    if (action == ##Enter) {
        if (selfobj hasnt open) {
            "The Church door is barred from the far side.";
        }
        rfalse;
    }
    rfalse;
];

! References: Goat_and_Compasses.after

[ GoatsCompassesAfter ;	! 141296 / 0x227f0
    if (action == ##Enter) {
        "The pub is closed, licensing laws being what they are.";
    }
    rfalse;
];

! References: pet_monkey.after

[ PetMonkeyAfter ;	! 141340 / 0x2281c
    if (action == ##Touch) {
        "You stroke the monkey's pelt. It jumps about, cheeping.";
    }
    if (action == ##Kiss) {
        "Evans rather resents this importunate advance.";
    }
    rfalse;
];

! References: red_lamp.name, Inside_the_Orb.name, Crescent_Moon.after

[ CrescentMoonAfter ;	! 141420 / 0x2286c
    if (action == ##Take or ##Remove) {
        if (selfobj in Old_Evans) {
            "Evans isn't giving up his mascot that easily.";
        }
        rfalse;
    }
    rfalse;
];

! References: Racing_Times.after

[ RacingTimesAfter ;	! 141468 / 0x2289c
    if (action == ##Take or ##Remove) {
        "Evans isn't giving up his paper.";
    }
    rfalse;
];

! References: hat_band.after

[ HatBandAfter ;	! 141500 / 0x228bc
    if (action == ##Take or ##Remove) {
        "Evans isn't giving up his hat-band.";
    }
    rfalse;
];

! References: Parish_Church.s_to

[ ParishChurchSouth ;	! 141536 / 0x228e0
    if (parish_church hasnt open) {
        give parish_church open;
        parish_church.description = "The church door is open.";
        print "You unbar the door, and let yourself out.^";
    }
    return Stone_Cross;
];

! References: Parish_Church.d_to

[ ParishChurchDown ;	! 141588 / 0x22914
    if (Moonstone has open) {
        "To your horror your body partly thins to mist as you climb down through the threshold!  Alarmed, you pull back. The underworld beneath the Moonstone, it seems, is not for mortals.";
    }
    "The Moonstone is huge and solid.";
];

! References: Moonstone.after

[ MoonstoneAfter ;	! 141728 / 0x229a0
    if (action == ##Read) {
        set_flag_array(47);
        rfalse;
    }
    if (action == ##Open or ##Push or ##Pull or ##Take) {
        set_flag_array(19);
        "Legend has it nothing holds down the stone, but if so it's far too heavy to budge.";
    }
    if (action == ##PointAt or ##Knock) {
        if (adamantine_knight in location) {
            "The knight comes a little closer, cupping one ear to pantomime listening. He does seem to have partial hearing.";
        }
        rfalse;
    }
    rfalse;
];

! References: rod_of_life.after, rod_of_death.after, rod_of_love.after

[ LifeDeathLoveAfter ;	! 141892 / 0x22a44
    if (verb == ##Take && noun hasnt moved) {
        if (noun hasnt general) {
            if (old_gardeners__gloves has worn) {
                "It is searing hot!  Even with the gloves on you cannot touch the adamantine.";
            }
            "It is searing hot, and you cannot touch the surface!";
        }
        if (global171 == 0) {
            global171 = 1;
            "Warning (once only!): the three High Rods seem to balanced extremely delicately on the edge of the pit.";
        }
        Achieved(SCORE_HIGHROD);
    }
    rfalse;
];

! References: rod_of_life.before, rod_of_death.before, rod_of_love.before

[ LifeDeathLoveBefore ;	! 142064 / 0x22af0
    if (verb == ##Take && global172 == 0) {
        remove rod_of_life;
        give rod_of_life moved;
        give rod_of_life ~concealed;
        give rod_of_life scored;
        remove rod_of_death;
        give rod_of_death moved;
        give rod_of_death ~concealed;
        give rod_of_death scored;
        remove rod_of_love;
        give rod_of_love moved;
        give rod_of_love ~concealed;
        give rod_of_love scored;
        move noun to player;
        give noun ~scored;
        global172 = 1[?];
        "(Interesting choice.)^^As you take it, you upset the balance and the other two High Rods rattle away down the crystal passageway into the underworld.";
    }
    rfalse;
];

! References: Madame_Sosostris.name, Madame_Sosostris.name, West_Side_Chapel.after

[ WestSideChapelAfter ;	! 142212 / 0x22b84
    if (action == ##Repair or ##Insert or ##PutOn) {
        if (second ~= adamantine_statue) {
            rfalse;
        }
        if (noun ~= adamantine_hand or adamantine_skull or adamantine_heart) {
            "That seems incongruous.";
        }
        if (noun == adamantine_hand) {
            move adamantine_hand to West_Side_Chapel;
            give adamantine_hand concealed;
            global173 = 2[?];
            "The hand fits rather loosely onto the left ~wrist~ of the adamantine knight.";
        }
        if (noun == adamantine_skull) {
            move adamantine_skull to West_Side_Chapel;
            give adamantine_skull concealed;
            global174 = 2[?];
            "The skull fits very loosely onto the ~neck~ of the adamantine knight.";
        }
        if (noun == adamantine_heart) {
            remove adamantine_heart;
            give adamantine_heart general;
            "The heart sits well in the so-empty ribcage of the adamantine knight.";
        }
        rfalse;
    }
    if (action == ##Turn) {
        if (noun == adamantine_skull or adamantine_hand && noun has concealed) {
            if (noun == adamantine_hand) {
                remove adamantine_hand;
                global173 = 0;
                give adamantine_hand general;
                give adamantine_hand ~concealed;
                "The hand screws tightly onto the adamantine knight.";
            }
            if (noun == adamantine_skull) {
                remove adamantine_skull;
                global174 = 0;
                give adamantine_skull general;
                give adamantine_skull ~concealed;
                "The skull screws tightly onto the adamantine knight.";
            }
        }
        rfalse;
    }
    rfalse;
];

! References: West_Side_Chapel.before

[ WestSideChapelBefore ;	! 142572 / 0x22cec
    if (action == ##Look) {
        if (adamantine_statue in West_Side_Chapel) {
            routine143264();
        }
        rfalse;
    }
    rfalse;
];

! References: West_Side_Chapel.each_turn

[ WestSideChapelEachTurn ;	! 142592 / 0x22d00
    if (global174 > 0) {
        --global174;
        if (global174 == 0) {
            give adamantine_skull ~concealed;
            "^The skull wobbles and falls off the knight again.";
        }
    }
    if (global173 > 0) {
        --global173;
        if (global173 == 0) {
            give adamantine_hand ~concealed;
            "^The hand wavers and falls off the knight again.";
        }
    }
    rfalse;
];

! References: adamantine_knight.description

[ AdamantineKnightDesc ;	! 142688 / 0x22d60
    print "The knight is bursting and eager with life, as though nothing could fade his boundless energy for existence. ";
    if (marble_rose in selfobj) {
        print "He is holding the marble flower. ";
    }
    if (statue_of_Diana in location && marble_rose notin statue_of_Diana) {
        "He gazes sadly at Diana, wanting only to be of chivalrous service.";
    }
    new_line;
    rtrue;
];

! References: adamantine_knight.life

[ AdamantineKnightLife ;	! 142844 / 0x22dfc
    if (action == ##Order) {
        routine143448();
        rtrue;
    }
    if (action == ##Ask or ##Answer) {
        "A shame there were no adamantine ears, really.";
    }
    if (action == ##Show or ##Give) {
        if (noun == marble_rose) {
            move marble_rose to adamantine_knight;
            "The knight is exceedingly pleased, and takes the flower.";
        }
        if (noun == silver_keepsake) {
            if (marble_rose notin adamantine_knight) {
                "The knight looks sadly at the picture.";
            }
            if (location ~= East_Side_Chapel) {
                "The knight looks at the picture sadly, unable to see its immediate relevance.";
            }
            move marble_rose to statue_of_Diana;
            give adamantine_knight general;
            statue_of_Diana.initial = "Diana's tall marble statue bathes in the moonlight: and a flower is placed gaily in her hair.";
            Achieved(SCORE_KNIGHT_ENCOURAGE);
            remove silver_keepsake;
            "The knight takes the keepsake, and studies it. Catching on, he places the marble flower in Diana's hair, high up beyond your reach. Afterward, he bows to you gravely. But there is a little sadness in his eye as he turns away from her.";
        }
        "The knight has forsworn earthly things in the service of Diana.";
    }
    if (action == ##Attack) {
        "He is adamant.";
    }
    rfalse;
];

[ routine143264 ;	! 143264 / 0x22fa0
    if (adamantine_skull hasnt general && adamantine_skull hasnt concealed) {
        print "^A headless ";
    } else {
        print "^An ";
    }
    print "adamantine statue lies prone here, a knight on a tomb";
    if (adamantine_hand hasnt general && adamantine_heart hasnt general) {
        ".";
    }
    if (adamantine_hand has general || adamantine_hand has concealed) {
        print " with hand outstretched";
    }
    if (adamantine_heart has general) {
        ", a heart in his ribcage. And yet there is no spark of life in him.";
    }
    ", heartless and implacable.";
];

[ routine143448 local1 ;	! 143448 / 0x23058
    if (verb == ##Jump or ##Dance or ##Sing) {
        "The knight dances a jig with sheer exuberance.";
    }
    if (verb == ##Open or ##Pull or ##Take && noun == Moonstone && Moonstone hasnt open) {
        if (adamantine_knight hasnt general) {
            "The knight understands what is to be done. But he is world-weary and sad, and not yet in your service.";
        }
        give Moonstone open;
        "The knight bows, and pulls the enormously heavy Moonstone open. He plainly expected it to be effortless, but by the time he's finished you can almost see ghostly perspiration bead on the ghostly sinews around his adamantine body.";
    }
    if (verb == ##Go) {
        "The knight just about understands that he is to go somewhere, but cannot quite comprehend the direction. You'll have to indicate it somehow. (Shame there were no adamantine ears, really.)";
    }
    if (verb == ##PointVague) {
        if (location == Parish_Church && noun == d_obj) {
            if (Moonstone hasnt open) {
                "The knight is unable to walk straight through the Moonstone.";
            }
            remove adamantine_knight;
            move rod_of_life to Parish_Church;
            move rod_of_death to Parish_Church;
            move rod_of_love to Parish_Church;
            move Moonstone to Parish_Church;
            "The knight strides down into the underworld beneath the Moonstone, to be lost to your sight... forever?^^For even he has not life force enough to hold together in the mists: his skeleton begins to clatter away to nothing, falling in all directions, his heart, hand and skull returning Somehow to your feet. And they are altering, altering even as you look down into the void...";
        }
        local1 = 0;
        if (location == Parish_Church) {
            if (noun == s_obj) {
                local1 = 477[Stone_Cross?];
            }
            if (noun == e_obj) {
                local1 = 491[East_Side_Chapel?];
            }
            if (noun == w_obj) {
                local1 = 488[West_Side_Chapel?];
            }
            if (noun == u_obj) {
                "Somewhat comically, the knight is too bulky to squeeze into the staircase. After a moment or two of watching an immovable object fighting it out with an irresistable force, you point back, and the knight returns, chastened.";
            }
        }
        if (location == East_Side_Chapel && noun == w_obj) {
            local1 = 486[Parish_Church?];
        }
        if (location == West_Side_Chapel && noun == e_obj) {
            local1 = 486[Parish_Church?];
        }
        if (local1 == 0) {
            "The knight shakes his head, solemnly.";
        }
        if (local1 == 477[Stone_Cross?]) {
            "The knight won't leave sacred ground.";
        }
        move adamantine_knight to local1;
        if (local1 == 491[East_Side_Chapel?]) {
            adamantine_knight.initial = "The knight stands here, bowing toward Diana.";
            move statue_of_Diana to local1;
        } else if (marble_rose in adamantine_knight) {
            adamantine_knight.initial = "The knight stands clasping the flower.";
        } else {
            adamantine_knight.initial = "The knight stands staunchly here.";
        }
        print "The knight strides boldly away to the ";
        if (noun == n_obj) {
            "north.";
        }
        if (noun == s_obj) {
            "south.";
        }
        if (noun == e_obj) {
            "east.";
        }
        "west.";
    }
    if (verb == ##Give or ##Insert && second == statue_of_Diana && noun == marble_rose) {
        "The knight likes the idea but is confused.";
    }
    "The knight is confused. Perhaps you were a little rough with the skull.";
];

! References: statue_of_Diana.after

[ DianaAfter ;	! 144620 / 0x234ec
    if (action == ##PointAt) {
        if (adamantine_knight in location) {
            if (marble_rose in selfobj) {
                "The knight has done all he can for Diana, and is now in your service.";
            }
            "The knight is unable to think how he can serve Diana.";
        }
        rfalse;
    }
    rfalse;
];

! References: bell_ropes.after

[ BellRopesAfter ;	! 144716 / 0x2354c
    if (action == ##Pull or ##Push or ##Blow) {
        "You ring an amateurish, jangling peal.";
    }
    rfalse;
];

! References: Out_on_the_Spire.d_to

[ OutOfSpireDown ;	! 144752 / 0x23570
    print "You slither down a bell rope, noisily...^";
    return 493[Bell_Tower?];
];

[ routine144788 local1 local2 local3 local4 local5 local6 ;	! 144788 / 0x23594
    local3 = 0;
  .label144792;
    if (1[?] == 1[?]) {
        local5 = 1[?];
        local6 = 0;
        if (local1-->local3 == 65535[?]) {
            rfalse;
        }
        if (local1-->local3 < 20 && local1-->local3 >= 0) {
            local5 = local1-->local3;
            ++local3;
        }
        local4 = 0;
      .label144842;
        if (local4 < local5) {
            if (local2 == local1-->local3) {
                local6 = 1[?];
            }
            ++local4;
            ++local3;
            jump label144842;
        }
        if (local6 == 1[?]) {
            return local1-->local3;
        }
        ++local3;
        jump label144792;
    }
    rtrue;
];

[ routine144884 local1 local2 ;	! 144884 / 0x235f4
    local2 = routine144788(25321[?],local1);
    if (local2 ~= 0) {
        print (string) local2;
        new_line;
        rtrue;
    }
    if (routine144788(25577[?],local1) ~= 0) {
        "~That's a question you'd better put to my colleague in the Other Place,~ says the demon smoothly. ~Try something else.~";
    }
    print "~That's not something I am empowered to answer,~ says the demon with a nervous glance behind him. ~Try something else.~^";
    rfalse;
];

[ routine145076 local1 local2 ;	! 145076 / 0x236b4
    local2 = routine144788(25577[?],local1);
    if (local2 ~= 0) {
        print (string) local2;
        new_line;
        rtrue;
    }
    if (routine144788(25321[?],local1) ~= 0) {
        "~That's a question you'd better put to my colleague in the Other Place,~ says the angel smoothly. ~Try something else.~^";
    }
    print "~That's not something I am empowered to answer,~ says the angel with a beatific smile upward. ~Try something else.~^";
    rfalse;
];

! References: Hellish_Place.cant_go

[ HellishPlaceCantGo ;	! 145268 / 0x23774
    set_flag_array(37);
    "That direction is not for the living.";
];

! References: Hellish_Place.before

[ HellishPlaceBefore cnt ;	! 145296 / 0x23790
    if (action == ##Look) {
        new_line;
        if (demon has general) {
            "~Thought what you wanted to ask yet?~ says the demon.";
        }
        cnt = demon.number;
        if (cnt > 0) {
            --cnt;
            demon.number = cnt;
            if (cnt > 0) {
                give demon general;
            }
        }
        if (cnt == 0) {
            "~Begone, pipsqueak!  I'll be seeing you... much later...~ says the demon with a memorable smile.";
        }
        if (cnt == 1) {
            "~All right, toad, you have one, just one, chance left,~ says the demon with a memorable smile.";
        }
        if (cnt == 2) {
            "~Now then, two chances remaining,~ says the demon with a memorable smile.";
        }
        "~Good afternoon,~ says the demon with a memorable smile. ~As a reward for your naked greed, may I welcome you to our little information service. We try to be as helpful as possible to explorers who are lost, or can't think how to solve their problems, you know the kind of thing. So just tell me what you want to know, or show me something to look at. You get the usual three hints.~";
    }
    rfalse;
];

! References: Hellish_Place.each_turn

[ HellishPlaceEachTurn i ;	! 145796 / 0x23984
    i = random(10);
    if (i == 1) {
        "^There is a horrid grinding noise from far away.";
    }
    if (i == 2) {
        "^A flash of light sears your eyes, as the sulphurous flames grumble.";
    }
    if (i == 3) {
        "^You can almost, but not quite, make out the noise of shouting.";
    }
    if (i == 4) {
        "^Thunder and lightning can be heard from the fiery depths.";
    }
    rfalse;
];

[ HellishAsk ;	! 145968 / 0x23a30
    if (demon hasnt general) {
        if (demon.number == 0) {
            "~No hints left, sucker.~";
        }
        "~Under Regulation 3, paragraph 15 (i) clause (f), only one hint per visit to the infernal domain. You'll have to go away again and come back if you want another. So sorry.~";
    }
    rfalse;
];

! References: demon.life

[ DaemonLife local1 ;	! 146120 / 0x23ac8
    if (action == ##Answer or ##Ask) {
        if (HellishAsk() ~= 0) {
            rtrue;
        }
        if (routine144884(special_word) ~= 0) {
            give demon ~general;
        }
        rtrue;
    }
    if (action == ##Order) {
        "One does not give orders to such a character.";
    }
    if (action == ##Give or ##Show) {
        if (HellishAsk() ~= 0) {
            rtrue;
        }
        print "The demon glances lazily at ";
        Defart(noun);
        print " and rouses himself to say: ~";
        give demon ~general;
        if (noun has edible) {
            remove noun;
            print "Mmm... delicious!~  Sloth and gluttony... two deadly sins in one minute. His boss will be pleased. ~";
        }
        local1 = noun.devil_hint;
        if (local1 == 65535[?]) {
            if (noun.angel_hint ~= "") {
                "I know about that, but my counterpart doesn't.~";
            }
            "I know just what that's for.~";
        }
        (string) local1, "~";
    }
    rfalse;
];

! References: old_smudged_battery.name, old_striped_scarf.name, old_gardeners__gloves.name, dog_eared_old_letter.name, Cups_and_Glasses.name, old_timber_spar.name, timber_hatch.name, Old_Evans.name, Moonstone.name, old_village_clock.name, Heavenly_Place.cant_go

[ HeavenCantGo ;	! 146424 / 0x23bf8
    set_flag_array(27);
    "That direction is not for the living.";
];

! References: Heavenly_Place.after

[ HeavenAfter ;	! 146452 / 0x23c14
    if (action == ##Strike) {
        "The clouds are too fluffy.";
    }
    rfalse;
];

! References: Heavenly_Place.before

[ HeavenBefore local1 ;	! 146476 / 0x23c2c
    if (action == ##Look) {
        new_line;
        if (angel has general) {
            "~Take all the time you need,~ says the angel kindly.";
        }
        local1 = angel.number;
        if (local1 > 0) {
            --local1;
            angel.number = local1;
            if (local1 > 0) {
                give angel general;
            }
        }
        if (local1 == 0) {
            "~I'm afraid I can be of no further use to you!  See you in another life,~ says the angel with a memorable smile.";
        }
        if (local1 == 1[?]) {
            "~You have one remaining question,~ says the angel with a memorable smile.";
        }
        if (local1 == 2[?]) {
            "~A whole two questions left,~ says the angel with a memorable smile.";
        }
        "~Good day,~ says the angel with a memorable smile. ~As a reward for your act of faith, may I welcome you to our little information service. We try to be as helpful as possible to explorers who are lost, or can't think how to solve their problems. Is there anything, pray, which you would like a hint about, or which you'd like to show me?  You are permitted three hints in all, in accordance with standard practice.~";
    }
    rfalse;
];

! References: Heavenly_Place.each_turn

[ HeavenEachTurn local1 ;	! 146984 / 0x23e28
    local1 = random(10);
    if (local1 == 1[?]) {
        "^Angels with harps float by, gossiping about you in a kindly way.";
    }
    if (local1 == 2[?]) {
        "^Babies float by, just counting their toes.";
    }
    if (local1 == 3[s_obj?]) {
        "^Burnished-gold sunlight strokes the tops of the clouds here.";
    }
    if (local1 == 4[e_obj?]) {
        "^The choir invisible almost, for a moment, becomes audible.";
    }
    rfalse;
];

[ AngelLife ;	! 147164 / 0x23edc
    if (angel hasnt general) {
        if (angel.number == 0) {
            "~No hints left, alas.~";
        }
        "~Under Regulation 3, paragraph 15 (i) clause (f), only one hint per visit to the sacred domain. You'll have to go away again and come back if you want another. So sorry.~";
    }
    rfalse;
];

! References: angel.life

[ routine147316 local1 ;	! 147316 / 0x23f74
    if (action == ##Answer or ##Ask) {
        if (AngelLife() ~= 0) {
            rtrue;
        }
        if (routine145076(special_word) ~= 0) {
            give demon ~general;
        }
        rtrue;
    }
    if (action == ##Order) {
        "One does not give orders to such a character.";
    }
    if (action == ##Give or ##Show) {
        if (AngelLife() ~= 0) {
            rtrue;
        }
        print "The angel looks keenly at ";
        Defart(noun);
        print " and rouses himself to say: ~";
        give angel ~general;
        local1 = noun.angel_hint;
        if (local1 == 65535[?]) {
            if (noun.devil_hint ~= "") {
                "I suppose you could ask, um, that tailed gentleman.~";
            }
            "I'm afraid I can't help you there.~";
        }
        (string) local1, "~";
    }
    rfalse;
];

! References: carbolic_soap.after

[ SoapAfter ;	! 147544 / 0x24058
    if (action == ##Eat) {
        R_Process(##Wash,selfobj);
        rtrue;
    }
    rfalse;
];

[ HelpSub ;	! 147560 / 0x24068
    if (pretty_mode == false) {
        "Newcomers to the game may like to try the following:^^  ~help instructions~   which gives some basic information,^  ~help commands~       details some common commands,^  ~help credits~        runs the game credits,^  ~help legal~          makes some legal disclaimers; or^  ~help inform~         which advertises the compiler Inform,^  ~help archive~        and the interactive fiction archive.";
    }
    DoMenu("Information is available on the following subjects:^^     Instructions    giving some basic information^     Commands        detailing some common commands^     Credits         game credits^     Release         release notes^     Legal           legal disclaimers^     Inform          advertising the compiler Inform^     Archive         and the interactive fiction archive",routine147836,routine148036);
    displaying_quote = true;
    rtrue;
];

[ routine147836 ;	! 147836 / 0x2417c
    if (menu_item == 0) {
        submenu_number = 3;
        submenu_header = "Curses";
        return 7[se_obj?];
    }
    if (menu_item == 1) {
        submenu_number = 6;
        submenu_header = "Instructions";
    }
    if (menu_item == 2) {
        submenu_number = 4;
        submenu_header = "Commands";
    }
    if (menu_item == 3) {
        submenu_number = 8;
        submenu_header = "Cast of Thousands";
    }
    if (menu_item == 4) {
        submenu_number = 6;
        submenu_header = "Release Notes";
    }
    if (menu_item == 5) {
        submenu_number = 5;
        submenu_header = "Legal Notes";
    }
    if (menu_item == 6) {
        submenu_number = 3;
        submenu_header = "Inform";
    }
    if (menu_item == 7) {
        submenu_number = 5;
        submenu_header = "ftp.gmd.de";
    }
    rtrue;
];

[ HelpSpecialSub ;	! 147944 / 0x241e8
    menu_item = 0;
    if (special_word == 34770) {
        menu_item = 1;
    }
    if (special_word == 31611) {
        menu_item = 2;
    }
    if (special_word == 31800) {
        menu_item = 3;
    }
    if (special_word == 37983) {
        menu_item = 4;
    }
    if (special_word == 35274) {
        menu_item = 5;
    }
    if (special_word == 34716) {
        menu_item = 6;
    }
    if (special_word == 30054) {
        menu_item = 7;
    }
    if (menu_item == 0) {
        HelpSub();
    } else {
        routine148036(menu_item);
    }
    rtrue;
];

[ routine148036 ;	! 148036 / 0x24244
    if (menu_item == 1) {
        "^Welcome to the world of CURSES, an Advanced interactive Adventure game...^^", "The scene is set initially in the present day, at Meldrew Hall, an old family seat in the shires of England. You play the part of the current heir to the house. (This doesn't make your family rich aristocrats - just people who suffer very badly from inheritance tax.)^^Remember, your only aim is to find that map of Paris so you can go on holiday - try not to get diverted by any enormous quests. Still, it would be interesting to find out:^", "^  Just how realistic are the Tarot cards?^  What do sixth century politics have to do with you?^  Surely Greek myths can't come into this?^  What on earth is wrong with your entire family?^  Do the National Trust have sinister motives?^  Why is it so hard to go to church these days?^  What are daisies for?  Or goats, for that matter?^  Can modernist poetry really be bad for you?^  Should you rescue someone who doesn't want you to?^^", "To finally understand the secret, you will need to reach the Master Game, a concluding game-within-a-game buried deep in the past. Good luck!";
    }
    if (menu_item == 2) {
        print "Basic commands consist either of a verb on its own, or a verb with one or more nouns. For instance, to see where you are type ~look~. Some verbs can also have more elaborate forms; for instance you could also look at, inside or under something. ~Curses~ understands about 1200 English words, so most reasonable synonyms are allowed.^^To pick something up, ~take thing~ and to drop it again, ~drop thing~. To see what you have, type ~take inventory~ or just ~inventory~. You can move about with commands such as ~go west~, or just ~west~ for short. (It is assumed that you are blessed with an excellent sense of direction.)^^", "Some commands can act on more than one thing. You can ~drop all~, which will drop everything (except things you're wearing), for instance. Or if you found a packing case with a number of things in, you could type such things as:^^    remove everything but the blue key^    get all the coins except ten, twenty and fifty^^(Containers may also be emptied or emptied into each other.)  If you are not explicit enough, sometimes the game can infer what you mean, but at other times it will ask for further details. It might have replied to the first line above by saying^^    (from the yellow packing case)^^", "so that you know what has been assumed on your behalf. If there had been two blue keys you might reasonably have meant, it would reply with something like^^    Which do you mean, the blue doorkey or the Blue Moon Agency key?^^You may either tell it which, or else give up and do something else instead. If you don't mind which key, you can always say something such as:^^    drop a key into the slot^^and the game will make a sensible choice and tell you what it was.^^", "~Curses~ sometimes assumes commands which you implicitly make, but always tells you what they are in brackets. For instance:^^    >look up bach in book^    (first taking the Encyclopaedia of Composers)^    (putting the tuning fork in the rucksack to make room)^    ~J. S. Bach (1685-1750) had a pet aardvark called Nigel...^^", "~it~ refers to the last thing manipulated, ~him~ and ~her~ to anyone obvious in the room; ~pronouns~ will tell you what they currently mean, if in doubt. ~again~ repeats the last command.^^You can ~save~, ~restore~ or ~restart~ the game at any time, or indeed ~quit~ or ask for your ~score~, which also tells the time. ~fullscore~ or ~full~ gives a breakdown of the score. As an aide-memoire the command ~objects~ tells you where you left things you once had, and ~places~ says where you have been. ", "If you want to check that your copy of the game file is intact (and not, for instance, corrupted by some file-transfer process you used to get it), you can ~verify~ it. These commands do not take up any game time, and nor does anything the game didn't understand.^^", "Some jaundiced players tire of long descriptions of places, and they can type ~short~ (or ~superbrief~) to make the game only give short ones. Amnesiac players, on the other hand, may like to use ~long~ (or ~verbose~) to give only long ones. Either kind can go back to the usual state of affairs with ~normal~ (or ~brief~). There are also two kinds of inventory: ~inventory wide~ and ~inventory tall~.^^", "This Advanced story file employs special effects such as ";
        style bold;
        print "bold face";
        style roman;
        " names of rooms and a more elaborate status line than usual. Also, less than altogether relevant quotations pop up from time to time. If these effects do not seem to work properly on your machine, or are just downright annoying, they can be turned off with ~plain~ and on again with ~pretty~.^^", "From time to time you will be told that your score has changed: this can be turned off with ~notify off~, turned on again with ~notify on~ or made even more common by ~notify full~ (which even tells you about scores accruing from visits to places, unusual items discovered and the like).^^", "Simple typing mistakes can sometimes be corrected just by typing ~oops~ followed by the word you had intended to type, so for instance:^^    drop fish in buket^    oops bucket^^The game knows several useful abbreviations: i for inventory, ne for northeast (and so on), l for look, g for again, o for oops, x for examine, z for wait (short for ~zzz~ - sorry about that).^^", "You can sometimes enter larger objects you find. You might well be able to get in a tractor, for instance, though driving it around might be harder.^^", "From time to time, you will wish to speak to other people. If you only have a single word to say, you could use commands like^^    answer yes^    say boo to goose^^(Text in quotation marks is not allowed.)  The game will usually guess who you want to talk to if you miss off the name. A better way to talk, which allows more complicated remarks, is to use commands such as^", "^    goose, boo^    wine waiter, give me the bill^    ask professor about turtles^^though the waiter may have better things to do, and the professor might be quite mad. Some documents may be consulted in this game. For this, try commands such as^^    look up chlorine^    consult periodic table about argon^^", "You can give several commands in a row by use of ~then~ (or full stops, commas or ~and~ in some contexts): so, for instance,^^    e, s, get fish then inventory^    e.e.open door.s^^", "There are, of course, many other commands for more specialised circumstances. A final word of warning: cursing is strictly forbidden in this game.";
    }
    if (menu_item == 3) {
        style bold;
        print "CURSES^";
        style roman;
        "An Interactive Diversion by Graham Nelson^^Play-testing by Michael Kinyon, Gareth Rees and Richard Tucker^^Together with informers: ", "Torbjorn Andersson, Julian Arnold, Jonathan Badger, Greg Bakker, Richard Barnett, Joachim Baumann, Richard Beigel, Don Blaheta, Martin Braun, Allen Braunsdorf, Otto Christenson, Tomas Clark, Andrew Clover, Alan Cox, Richard Develyn, Robert Dickau, Paul David Doherty, Roger Dominick, Koen van der Drift, Ivan Drucker, Jon Drukman, Martin N. Dunstan, Paul Fletcher, Richard Forster, Ron Galicia, Allen Garvin, Chris Goedde, Peter Grundy, Mark ~Guido~ Guidarelli, David Horowitz, Will Hurwood, Hakan Huss, Randy Hutson, Darin Johnson, Stefan Jokisch, Brad Jones, Jose Kahan, Darius Katz, Dennis S. Keeler, Andrew Kemp, John W. Kennedy, Peter Killworth, Marnix Klooster, Mark Knibbs, Teo Kwang Liak, Matthew J. MacKenzie, Chris Mann, Chris Markwyn, David McGrath, M. Sean Molley, Byron Montgomerie, David Moore, Carl Muckenhoupt, Christine Nelson, Toby Nelson, Carrie O'Grady, Michael A. Patton, Morten Holm Pederson, Mark Phillips, Neil Querengesser, Mason Reed, Robert Rendell, Loren Rittle, Luke Roberts, John Rodriguez, Kathleen Rudden, Bryan Scattergood, Bernd Schmitt, Rene Schneer, Alison Scott, Mike Scott, Matthew Selby, Dilip Sequeira, David Sinclair, Suzanne Skinner, David Stephenson, Robert Stone, Nyko Tyni, David VanBronkhorst, Andrew Vesperman, Hao-yang Wang, Robin Watts, John West, Christopher A. Wichura, Graham Willmott, Andrew Wren, Brendon Wyber, Jeff Zahn and Zhang Genglue.^^", "Apologies and acknowledgements to: the late Mr T. S. Eliot, the Oxford History of England, Philip Vellacott's translations of the Greek plays and the guidebooks of the British Museum; ", "Edouard Poor, for porting interpreters to the Acorn Archimedes; ", "and Volker Blasius, for keeping the if-archive.^^", "Coffee mugs fired by: Helena Verrill.^^", "Genealogy and photography associate: Peter Nelson.^^", "Ancient Greek cultural attache and daisy chain consultant: Dr L. J. Coventry.^^", "Archaeology: the InfoTaskForce, Paul David Doherty and Mark Howell, without whose excavations Inform could not have been written. If I have hacked deeper than them, it is because I stand in their trenches.";
    }
    if (menu_item == 4) {
        Banner();
        "^Release 16 is the eighth public release of ~Curses~. Its major previous releases were as follows:^^", "   Release 7 / 930428   (the original and still the worst)^   Release 8 / 930603   (much enhanced, slightly larger)^   Release 9 / 931111   (extended by about 20%)^   Release 10 / 940120  (tidied up a little)^   Release 12 / 940601  (a major extension)^   Release 14 / 950522  (first edition of the rewrite)^^", "For Release 14 the entire source code was ~digitally remastered~, so to speak: rewritten and tidied up into Inform 5 code which properly uses the Library. Since then, the author has only been maintaining and correcting.";
    }
    if (menu_item == 5) {
        Banner();
        "^This story file is copyright (c) Graham Nelson 1993, 1994, 1995, but may be freely distributed and used provided no profit is involved and provided it is not modified in any way. ", "It contains no fragments of code written by anyone other than the author. The author was extremely tempted to hide an important clue here, but thought better of it. No trade marks are (knowingly) used. All characters and locations are imaginary, and any resemblance to real persons (living after 1900) or places (except in antiquity) is accidental.";
    }
    if (menu_item == 6) {
        "~Inform~ is an Adventure game compiler written by the author, and was once ~Curses~' Siamese twin but has now taken on an independent life of its own. It takes a C-like source (this game takes up about 18600 lines, or 750K) to produce story files which can be played on almost any modern computer. (~Curses~ has been played on Acorns, PCs, Macs, Amigas, Ataris, Suns, NeXTs, Psions, VAX and IBM mainframes and many other machines.)^^", "Documentation, source code (in ANSI C) and examples for Inform are available to the public: see ~help archive~.";
    }
    if (menu_item == 7) {
        "There is an archive of ~interactive fiction~ like this at the anonymous FTP site ~ftp.gmd.de~, in its ~if-archive~, currently maintained by Volker Blasius. The archive contains the work of many people, including source for interpreters capable of playing games like this on almost any computer.^^~Curses~ itself, and the ANSI C source for its compiler ~Inform~, together with manuals in a choice of formats and code for several example games, are archived there.";
    }
    rtrue;
];

! References: sepia_photograph.name

[ set_flag_array i ;	! 155280 / 0x25e90
    if (extra_global_bool_array->i == 0) {
        extra_global_bool_array->i = 1;
        bool_array_recently_set = i;
    }
    rtrue;
];

[ display_quote n ;	! 155304 / 0x25ea8
    displaying_quote = true;
    if (n == 0) {
        quote_line-->0 = "Four be the things I'd been better without:";
        quote_line-->1 = "Love, curiosity, freckles and doubt.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dorothy Parker, ~Inventory~";
        generic_globvar = quote_display(4,43,quote_line);
    }
    if (n == 1) {
        quote_line-->0 = "It seemed that the next minute they would discover";
        quote_line-->1 = "a solution. Yet it was clear to both of them that";
        quote_line-->2 = "the end was still far, far off, and that the";
        quote_line-->3 = "hardest part was just beginning.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Anton Chekhov, ~The Lady with the Dog~";
        generic_globvar = quote_display(6,50,quote_line);
    }
    if (n == 2) {
        quote_line-->0 = "                           The mouse";
        quote_line-->1 = "Behind the mouldering wainscot shrieked.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alfred, Lord Tennyson, ~Mariana~";
        generic_globvar = quote_display(4,40,quote_line);
    }
    if (n == 3) {
        quote_line-->0 = "Parturient montes, nascetur ridiculus mus.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Horace, ~Ars Poetica~";
        generic_globvar = quote_display(3,42,quote_line);
    }
    if (n == 4) {
        quote_line-->0 = "Zeus, whose will has marked for man";
        quote_line-->1 = "A single way where wisdom lies";
        quote_line-->2 = "Ordained one eternal plan:";
        quote_line-->3 = "Man must suffer to be wise.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Aeschylus, ~Agamemnon~";
        generic_globvar = quote_display(6,35,quote_line);
    }
    if (n == 5) {
        quote_line-->0 = "I might repeat to myself, slowly and soothingly,";
        quote_line-->1 = "a list of quotations beautiful from minds profound;";
        quote_line-->2 = "if I can remember any of the damn things.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Dorothy Parker";
        generic_globvar = quote_display(5,51,quote_line);
    }
    if (n == 6) {
        quote_line-->0 = "More ways of killing a cat";
        quote_line-->1 = "than choking her with cream.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Charles Kingsley";
        generic_globvar = quote_display(4,28,quote_line);
    }
    if (n == 7) {
        quote_line-->0 = "I would like to be there,";
        quote_line-->1 = "were it but to see how the cat jumps.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Sir Walter Scott";
        generic_globvar = quote_display(4,37,quote_line);
    }
    if (n == 8) {
        quote_line-->0 = "Do not go gentle into that good night.";
        quote_line-->1 = "Rage, rage against the dying of the light.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dylan Thomas";
        generic_globvar = quote_display(4,42,quote_line);
    }
    if (n == 9) {
        quote_line-->0 = "No, 'tis not so deep as a well, nor so wide as";
        quote_line-->1 = "a church door; but 'tis enough, 'twill serve.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shakespeare, ~Romeo and Juliet~";
        generic_globvar = quote_display(4,46,quote_line);
    }
    if (n == 10) {
        quote_line-->0 = "...I have just signed legislation that will outlaw";
        quote_line-->1 = "Russia for ever. We begin bombing in five minutes.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- President Reagan, mistakenly believing the TV";
        quote_line-->4 = "   cameras were switched off";
        generic_globvar = quote_display(5,51,quote_line);
    }
    if (n == 11) {
        quote_line-->0 = "What is a ship but a prison?";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Robert Burton (1577-1640)";
        generic_globvar = quote_display(3,28,quote_line);
    }
    if (n == 12) {
        quote_line-->0 = "The remarkable fact is that the values of these";
        quote_line-->1 = "numbers seem to have been very finely adjusted";
        quote_line-->2 = "to make possible the development of life.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Stephen Hawking, ~A Brief History of Time~";
        generic_globvar = quote_display(5,47,quote_line);
    }
    if (n == 13) {
        quote_line-->0 = "Remember that you are an Englishman, and have";
        quote_line-->1 = "consequently won first prize in the lottery of life.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Cecil Rhodes (1853-1902)";
        generic_globvar = quote_display(4,52,quote_line);
    }
    if (n == 14) {
        quote_line-->0 = "Les plus desesperes sont les chants les plus beaux";
        quote_line-->1 = "Et j'en sais d'immortels quit sont de purs songlots.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alfred de Musset, ~La Nuit de mai~";
        generic_globvar = quote_display(4,52,quote_line);
    }
    if (n == 15) {
        quote_line-->0 = "There is no return game between a man and his stars.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Samuel Beckett, ~Murphy~";
        generic_globvar = quote_display(3,52,quote_line);
    }
    if (n == 16) {
        quote_line-->0 = "Throw away thy rod,";
        quote_line-->1 = "Throw away thy wrath:";
        quote_line-->2 = "O my God.";
        quote_line-->3 = "Take the gentle path.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- George Herbert, ~Discipline~";
        generic_globvar = quote_display(6,31,quote_line);
    }
    if (n == 17) {
        quote_line-->0 = "Speak gently, she can hear";
        quote_line-->1 = "The daisies grow.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Oscar Wilde, ~Requiescat~";
        generic_globvar = quote_display(4,28,quote_line);
    }
    if (n == 18) {
        quote_line-->0 = "Too poor for a bribe, and too proud to importune";
        quote_line-->1 = "He had not the method of making a fortune.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Thomas Grey, ~Sketch of His own Character~";
        generic_globvar = quote_display(4,48,quote_line);
    }
    if (n == 19) {
        quote_line-->0 = "Facilis descensus Averno:";
        quote_line-->1 = "Noctes atque dies patet atri ianua Ditis;";
        quote_line-->2 = "Sed revocare gradum superasque evadere ad auras,";
        quote_line-->3 = "Hoc opus, hic labor est.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Virgil, ~The Aeneid~ Book VI:126";
        generic_globvar = quote_display(6,48,quote_line);
    }
    if (n == 20) {
        quote_line-->0 = "We are the children of primeval night; we bear";
        quote_line-->1 = "The name of Curses in our home deep under earth.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Aeschylus, ~The Eumenides~";
        generic_globvar = quote_display(4,48,quote_line);
    }
    if (n == 21) {
        quote_line-->0 = "Thou makest his beauty to consume away,";
        quote_line-->1 = "Like as it were a moth fretting a garment:";
        quote_line-->2 = "Every man therefore is but vanity.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Psalms 39:12 (Book of Common Prayer version)";
        generic_globvar = quote_display(5,47,quote_line);
    }
    if (n == 22) {
        quote_line-->0 = "White lilac bowed,";
        quote_line-->1 = "Lost lanes of Queen Anne's lace";
        quote_line-->2 = "And that high-builded cloud";
        quote_line-->3 = "Moving at summer's pace.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Philip Larkin, ~Cut Grass~";
        generic_globvar = quote_display(6,31,quote_line);
    }
    if (n == 23) {
        quote_line-->0 = "At the end of the day victory belongs to the Curses,";
        quote_line-->1 = "Who shout in shrill triumph";
        quote_line-->2 = "Over the utter rout of the defeated house.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Aeschylus, ~Seven Against Thebes~";
        generic_globvar = quote_display(5,52,quote_line);
    }
    if (n == 24) {
        quote_line-->0 = "He shall separate them one from another,";
        quote_line-->1 = "as a shepherd divideth his sheep from the goats.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Matthew 25:32";
        generic_globvar = quote_display(4,48,quote_line);
    }
    if (n == 25) {
        quote_line-->0 = "Quickly now the amber";
        quote_line-->1 = "  Takes the fly with knees deranged";
        quote_line-->2 = "To be buried unseen, unfound";
        quote_line-->3 = "  And irrevocably changed.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Dean Waynflete, ~Substance~";
        generic_globvar = quote_display(6,35,quote_line);
    }
    if (n == 26) {
        quote_line-->0 = "Thus the devil played at chess with me, and yielding";
        quote_line-->1 = "a pawn, thought to gain a queen of me, taking";
        quote_line-->2 = "advantage of my honest endeavours.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Sir Thomas Browne, ~Religio Medici~ pt I";
        generic_globvar = quote_display(5,52,quote_line);
    }
    if (n == 27) {
        quote_line-->0 = "Art thou pale for weariness";
        quote_line-->1 = "Of climbing heaven and gazing on the earth?";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shelley, ~To The Moon~";
        generic_globvar = quote_display(4,43,quote_line);
    }
    if (n == 28) {
        quote_line-->0 = "A nice, - respectable, - middle class, middle-aged maiden";
        quote_line-->1 = "lady, with time on her hands and the money to help her pass";
        quote_line-->2 = "it... Let us call her Aunt Edna... Aunt Edna is universal,";
        quote_line-->3 = "and to those who may feel that all the problems of the";
        quote_line-->4 = "modern theatre might be solved by her liquidation, let me";
        quote_line-->5 = "add that... she is also immortal.";
        quote_line-->6 = 0;
        quote_line-->7 = "-- Terence Rattigan, preface to the ~Collected Plays~";
        generic_globvar = quote_display(8,60,quote_line);
    }
    if (n == 29) {
        quote_line-->0 = "I seemed to move among a world of ghosts,";
        quote_line-->1 = "And feel myself the shadow of a dream.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alfred, Lord Tennyson, ~The Princess~";
        generic_globvar = quote_display(4,41,quote_line);
    }
    if (n == 30) {
        quote_line-->0 = "If the doors of perception were cleansed,";
        quote_line-->1 = "everything would appear to man as it is, infinite.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- William Blake";
        generic_globvar = quote_display(4,50,quote_line);
    }
    if (n == 31) {
        quote_line-->0 = "Follow the instructions,";
        quote_line-->1 = "tell us what you think:";
        quote_line-->2 = "they lose something in translation,";
        quote_line-->3 = "they might as well be written in invisible ink.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Peter Hammill, ~Invisible Ink~";
        generic_globvar = quote_display(6,47,quote_line);
    }
    if (n == 32) {
        quote_line-->0 = "On a round ball";
        quote_line-->1 = "A workman that hath copies by, can lay";
        quote_line-->2 = "An Europe, Afrique and an Asia,";
        quote_line-->3 = "And quickly make that, which was nothing, All.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- John Donne, ~Valediction: Of Weeping~";
        generic_globvar = quote_display(6,46,quote_line);
    }
    if (n == 33) {
        quote_line-->0 = "What you don't know would make a great book.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- The Rev. Sydney Smith";
        generic_globvar = quote_display(3,44,quote_line);
    }
    if (n == 34) {
        quote_line-->0 = "Sir Walter Elliot, of Kellynch-hall, in Somersetshire,";
        quote_line-->1 = "was a man who, for whose own amusement, never took up";
        quote_line-->2 = "any book but the Baronetage; there he found occupation";
        quote_line-->3 = "in an idle hour, and consolation in a distressed one";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Jane Austen, ~Persuasion~";
        generic_globvar = quote_display(6,54,quote_line);
    }
    if (n == 35) {
        quote_line-->0 = "I am the Love that dare not speak its name.";
        quote_line-->1 = 0;
        quote_line-->2 = "-- Lord Alfred Douglas, ~Two Loves~";
        generic_globvar = quote_display(3,43,quote_line);
    }
    if (n == 36) {
        quote_line-->0 = "'I am inclined to think -' said I.";
        quote_line-->1 = "'I should do so,' Sherlock Holmes remarked";
        quote_line-->2 = "impatiently.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Sir Arthur Conan Doyle, ~The Valley of Fear~";
        generic_globvar = quote_display(5,47,quote_line);
    }
    if (n == 37) {
        quote_line-->0 = "Hell is a city much like London -";
        quote_line-->1 = "A populous and a smoky city.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shelley, ~Peter Bell the Third~";
        generic_globvar = quote_display(4,34,quote_line);
    }
    if (n == 38) {
        quote_line-->0 = "I hope I shall never be deterred from detecting";
        quote_line-->1 = "what I think a cheat, by the menaces of a ruffian.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dr Johnson (a letter from 1775)";
        generic_globvar = quote_display(4,50,quote_line);
    }
    if (n == 39) {
        quote_line-->0 = "Expatiate free o'er all this scene of man;";
        quote_line-->1 = "A mighty maze! but not without a plan.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Alexander Pope, ~An Essay on Man~";
        generic_globvar = quote_display(4,42,quote_line);
    }
    if (n == 40) {
        quote_line-->0 = "It's hard to be religious when certain people";
        quote_line-->1 = "are never incinerated by bolts of lightning.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Bill Watterson, ~Calvin & Hobbes~";
        generic_globvar = quote_display(4,45,quote_line);
    }
    if (n == 41) {
        quote_line-->0 = "Follow me, follow";
        quote_line-->1 = "Down to the hollow";
        quote_line-->2 = "And there let us wallow";
        quote_line-->3 = "In glorious mud.";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Flanders and Swann";
        generic_globvar = quote_display(6,23,quote_line);
    }
    if (n == 42) {
        quote_line-->0 = "Zoe, logic merely enables one";
        quote_line-->1 = "to be wrong with authority";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Dr Who, aboard ~The Wheel In Space~";
        generic_globvar = quote_display(4,38,quote_line);
    }
    if (n == 43) {
        quote_line-->0 = "Then for as moche as a philosofre saith,";
        quote_line-->1 = "~he wrappith him in his frend, that condescendith";
        quote_line-->2 = "to the rightfulle praiers of his frend,~";
        quote_line-->3 = "therefore have I yeven the a suffisant Astrolabie";
        quote_line-->4 = "as for oure orizonte, compowned after the";
        quote_line-->5 = "latitude of Oxenforde;";
        quote_line-->6 = 0;
        quote_line-->7 = "-- Geoffrey Chaucer, ~A Treatise on the Astrolabe~";
        generic_globvar = quote_display(8,50,quote_line);
    }
    if (n == 44) {
        quote_line-->0 = "Upon a nyght in sleep as he hym leyde,";
        quote_line-->1 = "Hym thoughte how that the wynged god Mercurie";
        quote_line-->2 = "Biforn hym stood and bad hym to be murie.";
        quote_line-->3 = "His slepy yerde in hond he bar uprighte;";
        quote_line-->4 = "An hat he werede upon his heris brighte.";
        quote_line-->5 = 0;
        quote_line-->6 = "-- Geoffrey Chaucer, ~The Knight's Tale~";
        generic_globvar = quote_display(7,45,quote_line);
    }
    if (n == 45) {
        quote_line-->0 = "Benedick:";
        quote_line-->1 = "  To bind me or undo me, one of those.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Shakespeare, ~Much Ado About Nothing~";
        generic_globvar = quote_display(4,40,quote_line);
    }
    if (n == 46) {
        quote_line-->0 = "In the central display case, there is a curious";
        quote_line-->1 = "pottery model, either representing the Labyrinth";
        quote_line-->2 = "of Minos or a water-cooling system.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- W. J. Murnane's ~Guide to Ancient Egypt~";
        generic_globvar = quote_display(5,48,quote_line);
    }
    if (n == 47) {
        quote_line-->0 = "I don't know who was there before me:";
        quote_line-->1 = "One person, several, none;";
        quote_line-->2 = "It doesn't matter.";
        quote_line-->3 = "There are marks on the slabs of rock,";
        quote_line-->4 = "Some beautiful, all mysterious;";
        quote_line-->5 = "Some certainly not made by human hands.";
        quote_line-->6 = 0;
        quote_line-->7 = "-- Primo Levi, ~A Valley~";
        generic_globvar = quote_display(8,39,quote_line);
    }
    if (n == 48) {
        quote_line-->0 = "It has always seemed to me that I had to answer";
        quote_line-->1 = "questions which fate had posed to my forefathers,";
        quote_line-->2 = "and which had not yet been answered, or as if I";
        quote_line-->3 = "had to complete, or perhaps continue, things which";
        quote_line-->4 = "previous ages had left unfinished.";
        quote_line-->5 = 0;
        quote_line-->6 = "-- Carl Jung, ~Memories, Dreams, Reflections~";
        generic_globvar = quote_display(7,50,quote_line);
    }
    rtrue;
];

[ EnglishNumber n m f ;	! 157320 / 0x26688
    if (n == 0) {
        print "zero";
        rfalse;
    }
    if (n < 0) {
        print "minus ";
        n = 0 - n;
    }
    if (n >= 1000) {
        EnglishNumber(n / 1000);
        print " thousand";
        n = n % 1000;
        f = true;
    }
    if (n >= 100) {
        if (f == true) {
            print ", ";
        }
        EnglishNumber(n / 100);
        print " hundred";
        n = n % 100;
        f = true;
    }
    if (n == 0) {
        rfalse;
    }
    if (f == true) {
        print " and ";
    }
    if (n < 10) {
        EnglishDigit(n);
        rfalse;
    }
    if (n >= 20) {
        m = n / 10;
        if (m == 2) {
            print "twenty";
        }
        if (m == 3) {
            print "thirty";
        }
        if (m == 4) {
            print "forty";
        }
        if (m == 5) {
            print "fifty";
        }
        if (m == 6) {
            print "sixty";
        }
        if (m == 7) {
            print "seventy";
        }
        if (m == 8) {
            print "eighty";
        }
        if (m == 9) {
            print "ninety";
        }
        if (n % 10 == 0) {
            rfalse;
        }
        print "-";
        EnglishDigit(n % 10);
        rfalse;
    }
    if (n == 10) {
        print "ten";
        rfalse;
    }
    if (n == 11) {
        print "eleven";
        rfalse;
    }
    if (n == 12) {
        print "twelve";
        rfalse;
    }
    if (n == 13) {
        print "thirteen";
        rfalse;
    }
    if (n == 14) {
        print "fourteen";
        rfalse;
    }
    if (n == 15) {
        print "fifteen";
        rfalse;
    }
    if (n == 16) {
        print "sixteen";
        rfalse;
    }
    if (n == 17) {
        print "seventeen";
        rfalse;
    }
    if (n == 18) {
        print "eighteen";
        rfalse;
    }
    print "nineteen";
    rtrue;
];

[ EnglishDigit n ;	! 157672 / 0x267e8
    if (n == 1) {
        print "one";
        rfalse;
    }
    if (n == 2) {
        print "two";
        rfalse;
    }
    if (n == 3) {
        print "three";
        rfalse;
    }
    if (n == 4) {
        print "four";
        rfalse;
    }
    if (n == 5) {
        print "five";
        rfalse;
    }
    if (n == 6) {
        print "six";
        rfalse;
    }
    if (n == 7) {
        print "seven";
        rfalse;
    }
    if (n == 8) {
        print "eight";
        rfalse;
    }
    if (n == 9) {
        print "nine";
        rfalse;
    }
    rtrue;
];

[ NextEntry o odepth ;	! 157768 / 0x26848
    o = sibling(o);
    if (lt_value ~= 0) {
        if (c_style & 512 ~= 0 && odepth == 0) {
          .label157794;
            if (o ~= nothing && (o.nw_to ~= lt_value || o hasnt workflag)) {
                o = sibling(o);
                jump label157794;
            }
            return o;
        }
        if (c_style & 2048 ~= 0) {
          .label157833;
            if (o ~= nothing && (o has concealed || o has scenery || o.nw_to ~= lt_value)) {
                o = sibling(o);
                jump label157833;
            }
            return o;
        }
      .label157866;
        if (o ~= nothing && o.nw_to ~= lt_value) {
            o = sibling(o);
            jump label157866;
        }
        return o;
    }
    if (c_style & 512 ~= 0 && odepth == 0) {
      .label157905;
        if (o ~= nothing && o hasnt workflag) {
            o = sibling(o);
            jump label157905;
        }
        return o;
    }
    if (c_style & 2048 ~= 0) {
      .label157935;
        if (o ~= nothing && (o has concealed || o has scenery)) {
            o = sibling(o);
            jump label157935;
        }
    }
    return o;
];

[ WillRecurse o ;	! 157960 / 0x26908
    if (c_style & 32 ~= 0) {
        rtrue;
    }
    if (c_style & 16 == 0) {
        rfalse;
    }
    if (o has transparent || o has supporter || (o has container && o has open)) {
        rtrue;
    }
    rfalse;
];

[ ListEqual o1 o ;	! 158004 / 0x26934
    if (child(o1) ~= nothing && WillRecurse(o1) ~= 0) {
        rfalse;
    }
    if (child(o) ~= nothing && WillRecurse(o) ~= 0) {
        rfalse;
    }
    if (c_style & (4 + 128) ~= 0) {
        if (o1 hasnt worn && o has worn || (o hasnt worn && o1 has worn)) {
            rfalse;
        }
        if (o1 hasnt light && o has light || (o hasnt light && o1 has light)) {
            rfalse;
        }
    }
    return Identical(o1,o);
];

[ SortTogether obj value ;	! 158112 / 0x269a0
  .label158113;
    if (child(obj) ~= nothing) {
        if (child(obj).nw_to ~= value) {
            move child(obj) to out_obj;
        } else {
            move child(obj) to in_obj;
        }
        jump label158113;
    }
  .label158155;
    if (child(in_obj) ~= nothing) {
        move child(in_obj) to obj;
        jump label158155;
    }
  .label158174;
    if (child(out_obj) ~= nothing) {
        move child(out_obj) to obj;
        jump label158174;
    }
    rtrue;
];

! References: Ekmek_Special.name

[ SortOutList obj i k l ;	! 158196 / 0x269f4
  .label158197;
    i = obj;
  .label158200;
    if (i ~= 0) {
        k = i.nw_to;
        if (k ~= 0) {
            i = sibling(i);
          .label158218;
            if (i ~= 0 && i.nw_to == k) {
                i = sibling(i);
                jump label158218;
            }
            if (i == 0) {
                rfalse;
            }
            l = sibling(i);
          .label158249;
            if (l ~= 0) {
                if (l.nw_to == k) {
                    SortTogether(parent(obj),k);
                    obj = child(parent(obj));
                    jump label158197;
                }
                l = sibling(l);
                jump label158249;
            }
        }
        i = sibling(i);
        jump label158200;
    }
    rtrue;
];

[ WriteListFrom o style depth ;	! 158300 / 0x26a5c
    if (o == child(parent(o))) {
        SortOutList(o);
        o = child(parent(o));
    }
    c_style = style;
    if (style & 512 ~= 0) {
      .label158339;
        if (o ~= nothing && o hasnt workflag) {
            o = sibling(o);
            jump label158339;
        }
    } else if (c_style & 2048 ~= 0) {
      .label158370;
        if (o ~= nothing && (o has concealed || o has scenery)) {
            o = sibling(o);
            jump label158370;
        }
    }
    if (o == nothing) {
        rfalse;
    }
    wlf_indent = 0;
    WriteListR(o,depth);
    rtrue;
];

[ WriteListR o depth stack_pointer classes_p sizes_p i j k k2 l m n q senc mr ;	! 158408 / 0x26ac8
    if (depth > 0 && o == child(parent(o))) {
        SortOutList(o);
        o = child(parent(o));
    }
    classes_p = 24788 + stack_pointer;
    sizes_p = 24660 + stack_pointer;
    i = o;
    j = 0;
  .label158456;
    if (i ~= 0 && j + stack_pointer < 128) {
        classes_p->j = 0;
        if (i.d_to ~= nothing) {
            ++k;
        }
        i = NextEntry(i,depth);
        ++j;
        jump label158456;
    }
    if (c_style & 1024 ~= 0) {
        if (j == 1[?]) {
            print " is";
        } else {
            print " are";
        }
        if (c_style & 1 ~= 0) {
            print ":^";
        } else {
            print ' ';
        }
        c_style = c_style - 1024;
    }
    stack_pointer = stack_pointer + j + 1;
    if (k < 2) {
        ! no code
    } else {
        n = 1[?];
        i = o;
        k = 0;
      .label158576;
        if (k < j) {
            if (classes_p->k == 0) {
                classes_p->k = n;
                sizes_p->n = 1[?];
                l = NextEntry(i,depth);
                m = k + 1;
              .label158611;
                if (l ~= 0 && m < j) {
                    if (classes_p->m == 0 && i.d_to ~= nothing && l.d_to ~= nothing && ListEqual(i,l) == 1[?]) {
                        sizes_p->n = sizes_p->n + 1;
                        classes_p->m = n;
                    }
                    l = NextEntry(l,depth);
                    ++m;
                    jump label158611;
                }
                ++n;
            }
            i = NextEntry(i,depth);
            ++k;
            jump label158576;
        }
        --n;
        i = 1[?];
        j = o;
        k = 0;
      .label158715;
        if (i <= n) {
          .label158720;
            if (classes_p->k ~= i && classes_p->k ~= 0 - i) {
                ++k;
                j = NextEntry(j,depth);
                jump label158720;
            }
            m = sizes_p->i;
            if (j.nw_to ~= nothing or lt_value && ZRegion(j.nw_to) == 2 or 3 && j.nw_to == mr) {
                --senc;
            }
            mr = j.nw_to;
            ++i;
            ++senc;
            jump label158715;
        }
        --senc;
        i = 1[?];
        j = o;
        k = 0;
        mr = 0;
      .label158822;
        if (senc >= 0) {
          .label158827;
            if (classes_p->k ~= i && classes_p->k ~= 0 - i) {
                ++k;
                j = NextEntry(j,depth);
                jump label158827;
            }
            if (j.nw_to ~= nothing or lt_value) {
                if (j.nw_to == mr) {
                    ++senc;
                    jump label159394;
                }
                k2 = NextEntry(j,depth);
                if (k2 == 0 || k2.nw_to ~= j.nw_to) {
                    ! no code
                } else {
                    k2 = ZRegion(j.nw_to);
                    if (k2 == 2[?] or 3[s_obj?]) {
                        q = j;
                        global119 = 1[?];
                        l = k;
                        m = i;
                      .label158943;
                        if (m < n && q.nw_to == j.nw_to) {
                            ++m;
                          .label158963;
                            if (classes_p->l ~= m && classes_p->l ~= 0 - m) {
                                ++l;
                                q = NextEntry(q,depth);
                                jump label158963;
                            }
                            if (q.nw_to == j.nw_to) {
                                ++global119;
                            }
                            jump label158943;
                        }
                        if (global119 == 1[?]) {
                            ! no code
                        } else {
                            if (c_style & 2 ~= 0) {
                                generic_globvar = 2 * (depth + wlf_indent);
                                if (generic_globvar >= 1) {
                                  .label159048;
                                    print ' ';
                                    generic_globvar = generic_globvar - 1;
                                    if (generic_globvar ~= 0) jump label159048;
                                }
                            }
                            if (k2 == 3[s_obj?]) {
                                q = 0;
                                l = 0;
                              .label159071;
                                if (l < global119) {
                                    q = q + sizes_p->(l + i);
                                    ++l;
                                    jump label159071;
                                }
                                EnglishNumber(q);
                                print " ", (string) j.nw_to;
                                if (c_style & 8 ~= 0) {
                                    print " (";
                                }
                                if (c_style & 2 ~= 0) {
                                    print ":^";
                                }
                            }
                            q = c_style;
                            if (k2 ~= 3[s_obj?]) {
                                rod_identity = 1;
                                parser_one = j;
                                parser_two = depth + wlf_indent;
                                if (RunRoutines(j,nw_to) == 1[?]) {
                                    jump label159226;
                                }
                            }
                            lt_value = j.nw_to;
                            listing_together = j;
                            ++wlf_indent;
                            WriteListR(j,depth,stack_pointer);
                            --wlf_indent;
                            lt_value = 0;
                            listing_together = 0;
                            if (k2 == 3[s_obj?]) {
                                if (c_style & 8 ~= 0) {
                                    print ")";
                                }
                            } else {
                                rod_identity = 2;
                                parser_one = j;
                                parser_two = depth + wlf_indent;
                                RunRoutines(j,nw_to);
                            }
                          .label159226;
                            if (q & 1 ~= 0 && c_style & 1 == 0) {
                                new_line;
                            }
                            c_style = q;
                            mr = j.nw_to;
                            jump label159367;
                        }
                    }
                }
            }
            if (WriteBeforeEntry(j,depth) == 1[?]) {
                ! no code
            } else {
                if (sizes_p->i == 1[?]) {
                    if (c_style & 4096 ~= 0) {
                        PrintShortName(j);
                    } else if (c_style & 256 ~= 0) {
                        Defart(j);
                    } else {
                        Indefart(j);
                    }
                } else {
                    if (c_style & 256 ~= 0) {
                        print "the ";
                    }
                    EnglishNumber(sizes_p->i);
                    print " ";
                    PrintOrRun(j,d_to,1);
                }
                WriteAfterEntry(j,depth,stack_pointer);
              .label159367;
                if (c_style & 8 ~= 0) {
                    if (senc == 1[?]) {
                        print " and ";
                    }
                    if (senc > 1) {
                        print ", ";
                    }
                }
            }
          .label159394;
            ++i;
            --senc;
            jump label158822;
        }
        rtrue;
    }
    n = j;
    i = 1[?];
    j = o;
  .label159411;
    if (i <= n) {
        if (j.nw_to ~= nothing or lt_value && ZRegion(j.nw_to) == 2 or 3 && j.nw_to == mr) {
            --senc;
        }
        mr = j.nw_to;
        j = NextEntry(j,depth);
        ++i;
        ++senc;
        jump label159411;
    }
    i = 1[?];
    j = o;
    mr = 0;
  .label159482;
    if (i <= senc) {
        if (j.nw_to ~= nothing or lt_value) {
            if (j.nw_to == mr) {
                --i;
                jump label159889;
            }
            k = NextEntry(j,depth);
            if (k == 0 || k.nw_to ~= j.nw_to) {
                ! no code
            } else {
                k = ZRegion(j.nw_to);
                if (k == 2[?] or 3[s_obj?]) {
                    if (c_style & 2 ~= 0) {
                        generic_globvar = 2 * (depth + wlf_indent);
                        if (generic_globvar >= 1) {
                          .label159582;
                            print ' ';
                            generic_globvar = generic_globvar - 1;
                            if (generic_globvar ~= 0) jump label159582;
                        }
                    }
                    if (k == 3[s_obj?]) {
                        q = j;
                        l = 0;
                      .label159605;
                        q = NextEntry(q,depth);
                        ++l;
                        if (q.nw_to == j.nw_to) jump label159605;
                        EnglishNumber(l);
                        print " ", (string) j.nw_to;
                        if (c_style & 8 ~= 0) {
                            print " (";
                        }
                        if (c_style & 2 ~= 0) {
                            print ":^";
                        }
                    }
                    q = c_style;
                    if (k ~= 3[s_obj?]) {
                        rod_identity = 1;
                        parser_one = j;
                        parser_two = depth + wlf_indent;
                        if (RunRoutines(j,nw_to) == 1[?]) {
                            jump label159760;
                        }
                    }
                    lt_value = j.nw_to;
                    listing_together = j;
                    ++wlf_indent;
                    WriteListR(j,depth,stack_pointer);
                    --wlf_indent;
                    lt_value = 0;
                    listing_together = 0;
                    if (k == 3[s_obj?]) {
                        if (q & 8 ~= 0) {
                            print ")";
                        }
                    } else {
                        rod_identity = 2;
                        parser_one = j;
                        parser_two = depth + wlf_indent;
                        RunRoutines(j,nw_to);
                    }
                  .label159760;
                    if (q & 1 ~= 0 && c_style & 1 == 0) {
                        new_line;
                    }
                    c_style = q;
                    mr = j.nw_to;
                    jump label159854;
                }
            }
        }
        if (WriteBeforeEntry(j,depth) == 1[?]) {
            ! no code
        } else {
            if (c_style & 4096 ~= 0) {
                PrintShortName(j);
            } else if (c_style & 256 ~= 0) {
                Defart(j);
            } else {
                Indefart(j);
            }
            WriteAfterEntry(j,depth,stack_pointer);
          .label159854;
            if (c_style & 8 ~= 0) {
                if (i == senc - 1) {
                    print " and ";
                }
                if (i < senc - 1) {
                    print ", ";
                }
            }
        }
      .label159889;
        j = NextEntry(j,depth);
        ++i;
        jump label159482;
    }
    rtrue;
];

[ WriteBeforeEntry o depth flag ;	! 159904 / 0x270a0
    if (c_style & 2 ~= 0) {
        generic_globvar = 2 * (depth + wlf_indent);
        if (generic_globvar >= 1) {
          .label159930;
            print ' ';
            generic_globvar = generic_globvar - 1;
            if (generic_globvar ~= 0) jump label159930;
        }
    }
    if (c_style & 4 ~= 0 && o.u_to ~= nothing) {
        rod_identity = 1;
        flag = PrintOrRun(o,u_to,1);
        if (flag == 1[?] && c_style & 1 ~= 0) {
            new_line;
        }
    }
    return flag;
];

[ WriteAfterEntry o depth stack_p flag flag2 flag3 p comb ;	! 159988 / 0x270f4
    if (c_style & 128 ~= 0) {
        comb = 0;
        if (o has light && location hasnt light) {
            comb = comb + 1;
        }
        if (o has container && o hasnt open) {
            comb = comb + 2;
        }
        if (o has container && (o has open || o has transparent) && child(o) == nothing) {
            comb = comb + 4;
        }
        if (comb == 1[?]) {
            print " (providing light)";
        }
        if (comb == 2[?]) {
            print " (which is closed)";
        }
        if (comb == 3[s_obj?]) {
            print " (closed and providing light)";
        }
        if (comb == 4[e_obj?]) {
            print " (which is empty)";
        }
        if (comb == 5[w_obj?]) {
            print " (empty and providing light)";
        }
        if (comb == 6[ne_obj?]) {
            print " (which is closed and empty)";
        }
        if (comb == 7[se_obj?]) {
            print " (closed, empty and providing light)";
        }
    }
    if (c_style & 4 ~= 0) {
        if (o.u_to ~= nothing) {
            rod_identity = 2;
            if (RunRoutines(o,u_to) ~= 0) {
                if (c_style & 1 ~= 0) {
                    new_line;
                }
                rtrue;
            }
        }
        if (o has light && o has worn) {
            print " (providing light and being worn";
            flag2 = 1[?];
        } else {
            if (o has light) {
                print " (providing light";
                flag2 = 1[?];
            }
            if (o has worn) {
                print " (being worn";
                flag2 = 1[?];
            }
        }
        if (o has container) {
            if (o has openable) {
                if (flag2 == 1[?]) {
                    print " and ";
                } else {
                    print " (which is ";
                }
                if (o has open) {
                    print "open";
                    if (child(o) == nothing) {
                        print " but empty";
                    }
                } else {
                    print "closed";
                }
                if (o has lockable && o has locked) {
                    print " and locked";
                }
                flag2 = 1[?];
            } else if (child(o) == nothing) {
                if (flag2 == 1[?]) {
                    print " and empty";
                } else {
                    print " (which is empty)";
                }
            }
        }
        if (flag2 == 1[?]) {
            print ")";
        }
    }
    if (c_style & 2048 == 0) {
        if (child(o) ~= nothing) {
            generic_globvar = 0;
            if (child(o) ~= nothing) {
              .label160489;
                ++generic_globvar;
                @get_sibling SP -> SP ?label160489;
            }
            @add SP generic_globvar -> SP;
            @store 6 SP;
        }
    } else {
        p = child(o);
      .label160510;
        if (p ~= 0) {
            if (p hasnt concealed) {
                ++flag3;
            }
            p = sibling(p);
            jump label160510;
        }
    }
    if (c_style & 32 ~= 0 && flag3 > 0) {
        if (c_style & 8 ~= 0) {
            print " containing ";
        }
        flag = 1[?];
    }
    if (c_style & 16 ~= 0 && flag3 > 0) {
        if (o has supporter) {
            if (c_style & 8 ~= 0) {
                if (c_style & 64 ~= 0) {
                    print " (on ";
                } else {
                    print ", on top of ";
                }
                if (o has animate) {
                    print "whom ";
                } else {
                    print "which ";
                }
            }
            flag = 1[?];
        }
        if (o has container && (o has open || o has transparent)) {
            if (c_style & 8 ~= 0) {
                if (c_style & 64 ~= 0) {
                    print " (in ";
                } else {
                    print ", inside ";
                }
                if (o has animate) {
                    print "whom ";
                } else {
                    print "which ";
                }
            }
            flag = 1[?];
        }
    }
    if (flag == 1[?] && c_style & 8 ~= 0) {
        if (flag3 > 1) {
            print "are ";
        } else {
            print "is ";
        }
    }
    if (c_style & 1 ~= 0) {
        new_line;
    }
    if (flag == 1[?]) {
        WriteListR(child(o),depth + 1,stack_p);
    }
    if (flag == 1[?] && c_style & 64 ~= 0) {
        print ")";
    }
    rtrue;
];

[ MoveFloatingObjects i k l m address ;	! 160780 / 0x2740c
    i = 15 + 1;
  .label160785;
    if (i <= top_object) {
        address = i.&found_in;
        if (address ~= 0 && i hasnt absent) {
            if (ZRegion(address-->0) == 2) {
                if ((address-->0)() ~= 0) {
                    move i to location;
                }
            } else {
                generic_globvar = i.&found_in;
                if (generic_globvar) {
                    generic_globvar = get_prop_len(generic_globvar);
                }
                k = generic_globvar;
                l = 0;
              .label160857;
                if (l < k / 2) {
                    m = address-->l;
                    if (m == location || m in location) {
                        move i to location;
                    }
                    ++l;
                    jump label160857;
                }
            }
        }
        ++i;
        jump label160785;
    }
    rtrue;
];

[ PlayerTo newplace flag ;	! 160896 / 0x27480
    move player to newplace;
  .label160900;
    if (parent(newplace) ~= nothing) {
        newplace = parent(newplace);
        jump label160900;
    }
    location = newplace;
    real_location = location;
    AdjustLight(1[?]);
    if (flag == 0) {
        R_Process(##Look);
    }
    if (flag == 1) {
        NoteArrival();
        ScoreArrival();
    }
    if (flag == 2) {
        LookSub(true);
    }
    rtrue;
];

[ MovePlayer direc ;	! 160960 / 0x274c0
    R_Process(##Go,direc);
    R_Process(##Look);
    rtrue;
];

[ YesOrNo i ;	! 160976 / 0x274d0
  .label160977;
    if (1[?] == 1[?]) {
        array_24021->1 = 0;
        StatusLinePrinter();
        @aread array_24021 parse -> generic_globvar;
        i = parse-->1;
        if (i == 'yes' or 'y//') {
            rtrue;
        }
        if (i == 'no' or 'n//') {
            rfalse;
        }
        L__M(##Quit,1);
        print "> ";
        jump label160977;
    }
    rtrue;
];

[ QuitSub ;	! 161040 / 0x27510
    L__M(##Quit,2);
    if (YesOrNo() ~= 0) {
        @quit;
    }
    rtrue;
];

[ RestartSub ;	! 161060 / 0x27524
    L__M(##Restart,1);
    if (YesOrNo() ~= 0) {
        @restart;
        L__M(##Restart,2);
    }
    rtrue;
];

[ VerifySub ;	! 161084 / 0x2753c
    @verify ?label161090;
    jump label161099;
  .label161090;
    return L__M(##Verify,1);
  .label161099;
    L__M(##Verify,2);
    rtrue;
];

[ ScriptOnSub ;	! 161108 / 0x27554
    if (transcript_mode == true) {
        return L__M(##ScriptOn,1);
    }
    transcript_mode = true;
    0-->8 = 0-->8 | 1;
    L__M(##ScriptOn,2);
    VersionSub();
    rtrue;
];

[ ScriptOffSub ;	! 161152 / 0x27580
    if (transcript_mode == false) {
        return L__M(##ScriptOff,1);
    }
    L__M(##ScriptOff,2);
    transcript_mode = false;
    0-->8 = 0-->8 & 65534;
    rtrue;
];

[ NotifyOnSub ;	! 161192 / 0x275a8
    notify_mode = true;
    L__M(##NotifyOn);
    rtrue;
];

[ NotifyOffSub ;	! 161204 / 0x275b4
    notify_mode = false;
    L__M(##NotifyOff);
    rtrue;
];

[ PlacesSub local1 local2 local3 ;	! 161216 / 0x275c0
    L__M(##Places);
    local1 = 15[yourself?];
  .label161225;
    if (local1 <= top_object) {
        if (local1 has visited) {
            ++local2;
        }
        ++local1;
        jump label161225;
    }
    local1 = 15[yourself?];
  .label161245;
    if (local1 <= top_object) {
        if (local1 has visited) {
            PrintShortName(local1);
            ++local3;
            if (local3 == local2) {
                ".";
            }
            if (local3 == local2 - 1) {
                print " and ";
            } else {
                print ", ";
            }
        }
        ++local1;
        jump label161245;
    }
    rtrue;
];

[ ObjectsSub local1 local2 local3 ;	! 161296 / 0x27610
    L__M(##Objects,1);
    local1 = 15[yourself?];
  .label161306;
    if (local1 <= top_object) {
        if (local1 has moved) {
            local3 = 1[?];
            Defart(local1);
            local2 = parent(local1);
            if (local2 == player) {
                if (local1 has worn) {
                    print "   (worn)";
                } else {
                    print "   (held)";
                }
            } else if (local2 has animate) {
                print "   (given away)";
            } else if (local2 has visited) {
                print "   (in ";
                PrintShortName(local2);
                print ")";
            } else if (local2 has enterable) {
                print "   (in ";
                Defart(local2);
                print ")";
            } else if (local2 has container) {
                print "   (inside ";
                PrintShortName(local2);
                print ")";
            } else if (local2 has supporter) {
                print "   (on ";
                PrintShortName(local2);
                print ")";
            } else {
                print "   (lost)";
            }
            new_line;
        }
        ++local1;
        jump label161306;
    }
    if (local3 == 0) {
        L__M(##Objects,2);
    }
    rtrue;
];

[ ScoreSub ;	! 161504 / 0x276e0
    L__M(##Score);
    PrintRank();
    rtrue;
];

[ Achieved num ;	! 161516 / 0x276ec
    if (task_done->num == 0) {
        task_done->num = 1[?];
        score = score + task_scores->num;
    }
    rtrue;
];

[ PANum m n ;	! 161544 / 0x27708
    print "  ";
    n = m;
    if (n < 0) {
        n = 0 - m;
        n = n * 10;
    }
    if (n < 10) {
        print "   ";
    } else if (n < 100) {
        print "  ";
    } else if (n < 1000) {
        print " ";
    }
    print m, " ";
    rtrue;
];

[ InvWideSub ;	! 161604 / 0x27744
    inventory_style = 4 + 8 + 16;
    R_Process(##Inv);
    rtrue;
];

[ InvTallSub ;	! 161620 / 0x27754
    inventory_style = 4 + 2 + 1 + 16;
    R_Process(##Inv);
    rtrue;
];

[ InvSub ;	! 161640 / 0x27768
    if (child(player) == nothing) {
        return L__M(##Inv,1);
    }
    if (inventory_style == 0) {
        R_Process(##InvTall);
        rtrue;
    }
    L__M(##Inv,2);
    if (inventory_style & 1 ~= 0) {
        print ":^";
    } else {
        print " ";
    }
    WriteListFrom(child(player),inventory_style,1[?]);
    if (inventory_style & 8 ~= 0) {
        print ".^";
    }
    AfterRoutines();
    rtrue;
];

[ TakeSub ;	! 161728 / 0x277c0
    if (onotheld_mode == 0 || parent(noun) ~= player) {
        if (location == thedark) {
            if (RTakeSub(real_location) ~= 0) {
                rtrue;
            }
        } else if (RTakeSub(location) ~= 0) {
            rtrue;
        }
    }
    if (AfterRoutines() == true) {
        rtrue;
    }
    notheld_mode = onotheld_mode;
    if (notheld_mode == 1 || keep_silent == true) {
        rtrue;
    }
    L__M(##Take,1);
    rtrue;
];

[ RTakeSub fromobj i j k postonobj ;	! 161808 / 0x27810
    if (noun == player) {
        return L__M(##Take,2);
    }
    if (noun has animate) {
        return L__M(##Take,3,noun);
    }
    if (parent(player) == noun) {
        return L__M(##Take,4,noun);
    }
    i = parent(noun);
    if (i == player) {
        return L__M(##Take,5);
    }
    if (i has container || i has supporter) {
        postonobj = i;
        k = verb;
        verb = ##Release;
        if (RunRoutines(i,after) ~= 0) {
            verb = k;
            rtrue;
        }
        verb = k;
    }
  .label161913;
    if (i ~= fromobj or nothing) {
        if (i hasnt container && i hasnt supporter) {
            if (i has animate) {
                return L__M(##Take,6,i);
            }
            if (i has transparent) {
                return L__M(##Take,7,i);
            }
            return L__M(##Take,8);
        }
        if (i has container && i hasnt open) {
            return L__M(##Take,9,i);
        }
        i = parent(i);
        if (i == player) {
            i = fromobj;
        }
        jump label161913;
    }
    if (noun has scenery) {
        return L__M(##Take,10);
    }
    if (noun has static) {
        return L__M(##Take,11);
    }
    k = 0;
    j = child(player);
  .label162041;
    if (j ~= 0) {
        if (j hasnt worn) {
            ++k;
        }
        j = sibling(j);
        jump label162041;
    }
    if (k >= ValueOrRun(player,27[rod_of_returning2?])) {
        if (79[canvas_rucksack?] ~= 0) {
            if (parent(canvas_rucksack) ~= player) {
                return L__M(##Take,12);
            }
            j = 0;
            k = child(player);
          .label162101;
            if (k ~= 0) {
                if (k ~= 79[canvas_rucksack?] && k hasnt worn && k hasnt light) {
                    j = k;
                }
                k = sibling(k);
                jump label162101;
            }
            if (j ~= 0) {
                L__M(##Take,13,j);
                keep_silent = true;
                R_Process(##Insert,j,canvas_rucksack);
                keep_silent = false;
                if (j notin canvas_rucksack) {
                    rtrue;
                }
            } else {
                return L__M(##Take,12);
            }
        } else {
            return L__M(##Take,12);
        }
    }
    move noun to player;
    if (postonobj ~= 0) {
        k = verb;
        verb = ##Release;
        if (RunRoutines(postonobj,before) ~= 0) {
            verb = k;
            rtrue;
        }
        verb = k;
    }
    rfalse;
];

[ DropSub local1 ;	! 162224 / 0x279b0
    local1 = parent(noun);
    if (local1 == location) {
        return L__M(##Drop,1);
    }
    if (local1 ~= player) {
        return L__M(##Drop,2);
    }
    if (noun has worn) {
        L__M(##Drop,3,noun);
        R_Process(##Disrobe,noun);
        if (noun has worn) {
            rtrue;
        }
    }
    move noun to parent(player);
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    return L__M(##Drop,4);
];

[ RemoveSub local1 ;	! 162312 / 0x27a08
    local1 = parent(noun);
    if (local1 has container && local1 hasnt open) {
        return L__M(##Remove,1);
    }
    if (local1 ~= second) {
        return L__M(##Remove,2);
    }
    if (local1 has animate) {
        return L__M(##Take,6,local1);
    }
    if (RTakeSub(second) ~= 0) {
        rtrue;
    }
    verb = ##Take;
    if (AfterRoutines() == true) {
        rtrue;
    }
    verb = ##Remove;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    return L__M(##Remove,4);
];

[ routine162420 local1 local2 ;	! 162420 / 0x27a74
  .label162421;
    if (local2 ~= 0) {
        if (local1 == local2) {
            rtrue;
        }
        local2 = parent(local2);
        jump label162421;
    }
    rfalse;
];

[ PutOnSub ;	! 162440 / 0x27a88
    global123 = 27[rod_of_returning2?];
    if (second == d_obj) {
        R_Process(##Drop,noun);
        rfalse;
    }
    if (parent(noun) ~= player) {
        return L__M(##PutOn,1,noun);
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,after) ~= 0) {
            verb = ##PutOn;
            rtrue;
        }
        verb = ##PutOn;
    }
    if (routine162420(noun,second) == 1[?]) {
        return L__M(##PutOn,2);
    }
    if (second hasnt supporter) {
        return L__M(##PutOn,3,second);
    }
    if (parent(second) == player) {
        return L__M(##PutOn,4);
    }
    if (noun has worn) {
        L__M(##PutOn,5);
        R_Process(##Disrobe,noun);
        if (noun has worn) {
            rtrue;
        }
    }
    ValueOrRun(second,27[rod_of_returning2?]);	! not popped
    generic_globvar = 0;
    if (child(second) ~= nothing) {
      .label162593;
        ++generic_globvar;
        @get_sibling SP -> SP ?label162593;
    }
    @add SP generic_globvar -> SP;
    @jl SP SP ?label162619;
    return L__M(##PutOn,6,second);
  .label162619;
    move noun to second;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,before) ~= 0) {
            verb = ##PutOn;
            rtrue;
        }
        verb = ##PutOn;
    }
    if (keep_silent == true) {
        rtrue;
    }
    if (multiflag == 1) {
        return L__M(##PutOn,7);
    }
    L__M(##PutOn,8,noun);
    rtrue;
];

[ InsertSub ;	! 162692 / 0x27b84
    global123 = 26[rod_of_language?];
    if (second == d_obj) {
        R_Process(##Drop,noun);
        rtrue;
    }
    if (parent(noun) ~= player) {
        return L__M(##Insert,1);
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,after) ~= 0) {
            verb = ##Insert;
            rtrue;
        }
        verb = ##Insert;
    }
    if (second hasnt container) {
        return L__M(##Insert,2);
    }
    if (second hasnt open) {
        return L__M(##Insert,3);
    }
    if (routine162420(noun,second) == 1[?]) {
        return L__M(##Insert,5);
    }
    if (noun has worn) {
        L__M(##Insert,6);
        R_Process(##Disrobe,noun);
        if (noun has worn) {
            rtrue;
        }
    }
    ValueOrRun(second,27[rod_of_returning2?]);	! not popped
    generic_globvar = 0;
    if (child(second) ~= nothing) {
      .label162840;
        ++generic_globvar;
        @get_sibling SP -> SP ?label162840;
    }
    @add SP generic_globvar -> SP;
    @jl SP SP ?label162866;
    return L__M(##Insert,7,second);
  .label162866;
    move noun to second;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (second > 1) {
        verb = ##Receive;
        if (RunRoutines(second,before) ~= 0) {
            verb = ##Insert;
            rtrue;
        }
        verb = ##Insert;
    }
    if (keep_silent == true) {
        rtrue;
    }
    if (multiflag == 1) {
        return L__M(##Insert,8);
    }
    L__M(##Insert,9,noun);
    rtrue;
];

[ TransferSub local1 local2 local3 local4 local5 ;	! 162936 / 0x27c78
    local2 = 28[rod_of_life?];
    if (second has container) {
        local2 = 26[rod_of_language?];
    } else if (second has supporter) {
        local2 = 27[rod_of_returning2?];
    }
    local1 = parent(noun);
    if (local1 ~= player) {
      .label162967;
        if (local1 ~= 0) {
            if (local1 hasnt open) {
                return L__M(##Transfer,1);
            }
            local1 = parent(local1);
            if (local1 == player) {
                jump label163009;
            }
            jump label162967;
        }
        return L__M(##Transfer,2);
    }
  .label163009;
    if (noun notin player) {
        local5 = parent(noun);
        if (local5 has container || local5 has supporter) {
            local4 = local5;
            local3 = verb;
            verb = ##Release;
            if (RunRoutines(local5,after) ~= 0) {
                verb = local3;
                rtrue;
            }
            verb = local3;
        }
        move noun to player;
        if (local4 ~= 0) {
            local3 = verb;
            verb = ##Release;
            if (RunRoutines(local4,before) ~= 0) {
                verb = local3;
                rtrue;
            }
            verb = local3;
        }
    }
    if (local2 == 28[rod_of_life?]) {
        R_Process(##Drop,noun);
        rtrue;
    }
    if (local2 == 26[rod_of_language?]) {
        R_Process(##Insert,noun,second);
        rtrue;
    }
    if (local2 == 27[rod_of_returning2?]) {
        R_Process(##PutOn,noun,second);
        rtrue;
    }
    rtrue;
];

[ EmptySub ;	! 163132 / 0x27d3c
    second = d_obj;
    EmptyTSub();
    rtrue;
];

[ EmptyTSub local1 local2 ;	! 163140 / 0x27d44
    if (noun hasnt container) {
        return L__M(##EmptyT,1,noun);
    }
    if (noun hasnt open) {
        return L__M(##EmptyT,2,noun);
    }
    if (second ~= d_obj) {
        if (second hasnt container) {
            return L__M(##EmptyT,1,second);
        }
        if (second hasnt open) {
            return L__M(##EmptyT,2,second);
        }
    }
    local1 = child(noun);
    if (local1 == 0) {
        return L__M(##EmptyT,3,noun);
    }
  .label163225;
    if (local1 ~= 0) {
        local2 = sibling(local1);
        PrintShortName(local1);
        print ": ";
        R_Process(##Transfer,local1,second);
        local1 = local2;
        jump label163225;
    }
    rtrue;
];

[ GiveSub ;	! 163256 / 0x27db8
    if (parent(noun) ~= player) {
        return L__M(##Give,1,noun);
    }
    if (second == player) {
        return L__M(##Give,2,noun);
    }
    if (RunLife(second,34[chocolate_biscuit?]) ~= 0) {
        rfalse;
    }
    L__M(##Give,3,second);
    rtrue;
];

[ GiveRSub ;	! 163312 / 0x27df0
    R_Process(##Give,second,noun);
    rtrue;
];

[ ShowSub ;	! 163324 / 0x27dfc
    if (parent(noun) ~= player) {
        return L__M(##Show,1,noun);
    }
    if (second == player) {
        R_Process(##Read,noun);
        rtrue;
    }
    if (RunLife(second,36[hinged_trapdoor?]) ~= 0) {
        rfalse;
    }
    L__M(##Show,2,second);
    rtrue;
];

[ ShowRSub ;	! 163376 / 0x27e30
    R_Process(##Show,second,noun);
    rtrue;
];

[ EnterSub local1 ;	! 163388 / 0x27e3c
    if (noun has door) {
        R_Process(##Go,noun);
        rtrue;
    }
    local1 = parent(player);
    if (local1 ~= location) {
        return L__M(##Enter,1,local1);
    }
    local1 = parent(noun);
    if (local1 == 1[?]) {
        R_Process(##Go,noun);
        rtrue;
    }
    if (noun hasnt enterable) {
        return L__M(##Enter,2);
    }
    if (noun has container && noun hasnt open) {
        return L__M(##Enter,3,noun);
    }
    if (local1 ~= location) {
        return L__M(##Enter,4);
    }
    move player to noun;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Enter,5,noun);
    Locale(noun);
    rtrue;
];

[ TakeOffSub ;	! 163516 / 0x27ebc
    if (parent(player) == noun) {
        R_Process(##Exit);
        rtrue;
    }
    L__M(##TakeOff,1,noun);
    rtrue;
];

[ ExitSub env ;	! 163540 / 0x27ed4
    env = parent(player);
    if (env == location || (location == thedark && env == real_location)) {
        if (location.orders ~= nothing || (location == thedark && real_location.orders ~= nothing)) {
            R_Process(##Go,out_obj);
            rtrue;
        }
        return L__M(##Exit,1);
    }
    if (env has container && env hasnt open) {
        return L__M(##Exit,2,env);
    }
    if (location == thedark) {
        move player to real_location;
    } else {
        move player to location;
    }
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Exit,3,env);
    LookSub(true);
    rtrue;
];

[ VagueGoSub ;	! 163664 / 0x27f50
    L__M(##VagueGo);
    rtrue;
];

[ EnterSub ;	! 163672 / 0x27f58
    R_Process(##Go,in_obj);
    rtrue;
];

[ GoSub local1 local2 local3 local4 local5 local6 ;	! 163680 / 0x27f60
    local5 = 0;
    local1 = parent(player);
    if (location ~= thedark && local1 ~= location || (location == thedark && local1 ~= real_location)) {
        local2 = location;
        if (location == thedark) {
            location = real_location;
        }
        local3 = RunRoutines(local1,after);
        if (local3 ~= 3[s_obj?]) {
            location = local2;
        }
        if (local3 == 1[?]) {
            local5 = local1;
            local1 = parent(local1);
        } else {
            if (local3 == 0) {
                L__M(##Go,1,local1);
            }
            rtrue;
        }
    }
    local6 = noun.w_to;
    if (ZRegion(local6) == 2) {
        local6 = RunRoutines(noun,w_to);
    }
    local2 = local1.local6;
    local3 = ZRegion(local2);
    if (local3 == 3[s_obj?]) {
        print (string) local2;
        new_line;
        rfalse;
    }
    if (local3 == 2[?]) {
        local2 = RunRoutines(local1,local6);
        if (local2 == 1[?]) {
            rtrue;
        }
    }
    if (local3 == 0 || local2 == 0) {
        if (local1.cant_go ~= nothing) {
            PrintOrRun(local1,cant_go);
        }
        rfalse;
    }
    if (local2 has door) {
        if (local2 has concealed) {
            return L__M(##Go,2);
        }
        if (local2 hasnt open) {
            if (noun == u_obj) {
                return L__M(##Go,3,local2);
            }
            if (noun == d_obj) {
                return L__M(##Go,4,local2);
            }
            return L__M(##Go,5,local2);
        }
        if (ZRegion(local2.n_to) == 2) {
            local2 = RunRoutines(local2,n_to);
        } else {
            local2 = local2.n_to;
        }
        if (local2 == 0) {
            return L__M(##Go,6,local2);
        }
        if (local2 == 1[?]) {
            rtrue;
        }
    }
    if (local5 == 0) {
        move player to local2;
    } else {
        move local5 to local2;
    }
    local4 = OffersLight(local2);
    if (local4 ~= 0) {
        location = local2;
        lightflag = true;
    } else {
        if (location == thedark) {
            DarkToDark();
        }
        real_location = local2;
        location = thedark;
        lightflag = false;
    }
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    LookSub(true);
    rtrue;
];

[ SayWhatsOn descon j f ;	! 164032 / 0x280c0
    if (descon == parent(player)) {
        rfalse;
    }
    j = child(descon);
  .label164046;
    if (j ~= nothing) {
        if (j hasnt concealed && j hasnt scenery) {
            f = 1;
        }
        j = sibling(j);
        jump label164046;
    }
    if (f == 0) {
        rfalse;
    }
    L__M(##Look,4,descon);
    rtrue;
];

[ Locale descin text1 text2 o p k j flag f2 ;	! 164088 / 0x280f8
    o = child(descin);
  .label164093;
    if (o ~= nothing) {
        give o ~workflag;
        o = sibling(o);
        jump label164093;
    }
    k = 0;
    o = child(descin);
  .label164115;
    if (o ~= nothing) {
        if (o hasnt concealed && o ~= parent(player)) {
            if (o hasnt scenery) {
                give o workflag;
                ++k;
                p = initial;
                f2 = 0;
                if (o has door && o hasnt open) {
                    p = s_to;
                    f2 = 1;
                }
                if (o has switchable && o hasnt on) {
                    p = s_to;
                    f2 = 1;
                }
                if (o has container && o hasnt open && o.&s_to ~= 0) {
                    p = s_to;
                    f2 = 1;
                }
                if (o hasnt moved || o.describe ~= NULL || f2 == 1) {
                    if (o.describe ~= NULL && RunRoutines(o,describe) ~= 0) {
                        flag = 1;
                        give o ~workflag;
                        --k;
                    } else {
                        j = o.p;
                        if (j ~= 0) {
                            new_line;
                            PrintOrRun(o,p);
                            flag = 1;
                            give o ~workflag;
                            --k;
                            if (o has supporter && child(o) ~= nothing) {
                                SayWhatsOn(o);
                            }
                        }
                    }
                }
            } else if (o has supporter && child(o) ~= nothing) {
                SayWhatsOn(o);
            }
        }
        o = sibling(o);
        jump label164115;
    }
    if (k == 0) {
        return 0;
    }
    if (text1 ~= 0) {
        new_line;
        if (flag == 1) {
            text1 = text2;
        }
        print (string) text1, " ";
        WriteListFrom(child(descin),8 + 512 + 16 + 128 + 64 + 2048);
        return k;
    }
    if (flag == 1) {
        L__M(##Look,5,descin);
    } else {
        L__M(##Look,6,descin);
    }
    rtrue;
];

[ LMode1Sub ;	! 164420 / 0x28244
    lookmode = 1;
    print "CURSES";
    L__M(##Brief);
    rtrue;
];

[ LMode2Sub ;	! 164436 / 0x28254
    lookmode = 2;
    print "CURSES";
    L__M(##Verbose);
    rtrue;
];

[ LMode3Sub ;	! 164452 / 0x28264
    lookmode = 3;
    print "CURSES";
    L__M(##Superbrief);
    rtrue;
];

[ NoteArrival descin ;	! 164468 / 0x28274
    descin = location;
    if (descin ~= lastdesc) {
        if (descin.initial ~= nothing) {
            PrintOrRun(descin,initial);
        }
        SetHimHer();
        MoveFloatingObjects();
        lastdesc = descin;
    }
    rtrue;
];

[ ScoreArrival ;	! 164504 / 0x28298
    if (location hasnt visited) {
        give location visited;
        if (location has scored) {
            score = score + 5;
            places_score = places_score + 5;
        }
    }
    rtrue;
];

[ LookSub allow_abbrev env local3 ;	! 164528 / 0x282b0
    if (parent(player) == nothing) {
        "** Error: player has no location **";
    }
    NoteArrival();
    new_line;
    style bold;
    PrintShortName(location);
    style roman;
    env = parent(player);
    if (location ~= thedark && env ~= location) {
        if (env has supporter) {
            print " (";
            L__M(##Look,1);
            print " ";
        } else {
            print " (";
            L__M(##Look,2);
            print " ";
        }
        Defart(env);
        print ")";
        local3 = env;
    }
    if (print_player_flag == 1[?]) {
        print " (";
        L__M(##Look,3);
        print " ", (name) player, ")";
    }
    new_line;
    if (lookmode < 3 && (allow_abbrev ~= true || lookmode == 2 || location hasnt visited)) {
        if (location.describe ~= NULL) {
            RunRoutines(location,describe);
        } else if (location.description == 0) {
            print "** Room undescribed! **^";
        } else {
            PrintOrRun(location,description);
        }
    }
    if (local3 ~= location) {
        Locale(location);
    }
    Locale(local3);
    Stub9();
    ScoreArrival();
    verb = ##Look;
    if (AfterRoutines() == true) {
        rtrue;
    }
    rtrue;
];

! References: Out_on_the_Spire.name

[ ReadSub local1 ;	! 164784 / 0x283b0
    if (location == thedark) {
        return L__M(##Read,1);
    }
    local1 = noun.description;
    if (local1 == 0) {
        if (noun has container) {
            R_Process(##Search,noun);
            rtrue;
        }
        if (noun has switchable) {
            L__M(##Read,3,noun);
            rfalse;
        }
        return L__M(##Read,2,noun);
    }
    PrintOrRun(noun,description);
    if (noun has switchable) {
        L__M(##Read,3,noun);
    }
    if (AfterRoutines() == true) {
        rtrue;
    }
    rtrue;
];

[ LookUnderSub ;	! 164872 / 0x28408
    if (location == thedark) {
        return L__M(##LookUnder,1);
    }
    L__M(##LookUnder,2);
    rtrue;
];

[ SearchSub local1 local2 ;	! 164896 / 0x28420
    if (location == thedark) {
        return L__M(##Search,1);
    }
    local1 = child(noun);
  .label164915;
    if (local1 ~= 0) {
        if (local1 hasnt concealed) {
            local2 = 1[?];
        }
        local1 = sibling(local1);
        jump label164915;
    }
    if (noun has supporter) {
        if (local2 == 0) {
            return L__M(##Search,2,noun);
        }
        return L__M(##Search,3,noun);
    }
    if (noun hasnt container) {
        return L__M(##Search,4);
    }
    if (noun hasnt transparent && noun hasnt open) {
        return L__M(##Search,5);
    }
    if (AfterRoutines() == true) {
        rtrue;
    }
    generic_globvar = 0;
    if (child(noun) ~= nothing) {
      .label165015;
        ++generic_globvar;
        @get_sibling SP -> SP ?label165015;
    }
    @add SP generic_globvar -> SP;
    @store 1 SP;
    if (local2 == 0) {
        return L__M(##Search,6,noun);
    }
    L__M(##Search,7,noun);
    rtrue;
];

[ UnlockSub ;	! 165052 / 0x284bc
    if (noun hasnt lockable) {
        return L__M(##Unlock,1);
    }
    if (noun hasnt locked) {
        return L__M(##Unlock,2);
    }
    if (noun.e_to ~= second) {
        return L__M(##Unlock,3);
    }
    give noun ~locked;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Unlock,4,noun);
    rtrue;
];

[ LockSub ;	! 165128 / 0x28508
    if (noun hasnt lockable) {
        return L__M(##Lock,1);
    }
    if (noun has locked) {
        return L__M(##Lock,2);
    }
    if (noun has open) {
        return L__M(##Lock,3);
    }
    if (noun.e_to ~= second) {
        return L__M(##Lock,4);
    }
    give noun locked;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Lock,5,noun);
    rtrue;
];

! References: ragged_scroll.name, array_of_oblong_crystals.name, fire_escape.name

[ SwitchOnSub ;	! 165216 / 0x28560
    if (noun hasnt switchable) {
        return L__M(##SwitchOn,1);
    }
    if (noun has on) {
        return L__M(##SwitchOn,2);
    }
    give noun on;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##SwitchOn,3,noun);
    rtrue;
];

[ SwitchOffSub ;	! 165272 / 0x28598
    if (noun hasnt switchable) {
        return L__M(##SwitchOff,1);
    }
    if (noun hasnt on) {
        return L__M(##SwitchOff,2);
    }
    give noun ~on;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##SwitchOff,3,noun);
    rtrue;
];

[ OpenSub ;	! 165328 / 0x285d0
    if (noun hasnt openable) {
        return L__M(##Open,1);
    }
    if (noun has locked) {
        return L__M(##Open,2);
    }
    if (noun has open) {
        return L__M(##Open,3);
    }
    give noun open;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    if (noun has container && noun hasnt transparent && child(noun) ~= nothing) {
        return L__M(##Open,4,noun);
    }
    L__M(##Open,5,noun);
    rtrue;
];

[ CloseSub ;	! 165428 / 0x28634
    if (noun hasnt openable) {
        return L__M(##Close,1);
    }
    if (noun hasnt open) {
        return L__M(##Close,2);
    }
    give noun ~open;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Close,3,noun);
    rtrue;
];

[ DisrobeSub ;	! 165484 / 0x2866c
    if (noun hasnt worn) {
        return L__M(##Disrobe,1);
    }
    give noun ~worn;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Disrobe,2,noun);
    rtrue;
];

[ WearSub ;	! 165528 / 0x28698
    if (noun hasnt clothing) {
        return L__M(##Wear,1);
    }
    if (parent(noun) ~= player) {
        return L__M(##Wear,2);
    }
    if (noun has worn) {
        return L__M(##Wear,3);
    }
    give noun worn;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Wear,4,noun);
    rtrue;
];

[ EatSub ;	! 165604 / 0x286e4
    if (noun hasnt edible) {
        return L__M(##Eat,1);
    }
    remove noun;
    if (AfterRoutines() == true) {
        rtrue;
    }
    if (keep_silent == true) {
        rtrue;
    }
    L__M(##Eat,2,noun);
    rtrue;
];

! References: Wine_Cellars.name

[ YesSub ;	! 165648 / 0x28710
    L__M(##Yes);
    rtrue;
];

[ NoSub ;	! 165656 / 0x28718
    L__M(##No);
    rtrue;
];

[ BurnSub ;	! 165664 / 0x28720
    L__M(##Burn);
    rtrue;
];

[ PraySub ;	! 165672 / 0x28728
    L__M(##Pray);
    rtrue;
];

[ WakeSub ;	! 165680 / 0x28730
    L__M(##Wake);
    rtrue;
];

[ WakeOtherSub ;	! 165688 / 0x28738
    if (RunLife(noun,83[painting_of_Mad_Isaac_Meldrewe?]) ~= 0) {
        rfalse;
    }
    L__M(##WakeOther);
    rtrue;
];

[ ThinkSub ;	! 165708 / 0x2874c
    L__M(##Think);
    rtrue;
];

[ SmellSub ;	! 165716 / 0x28754
    L__M(##Smell);
    rtrue;
];

[ ListenSub ;	! 165724 / 0x2875c
    L__M(##Listen);
    rtrue;
];

[ TasteSub ;	! 165732 / 0x28764
    L__M(##Taste);
    rtrue;
];

[ CutSub ;	! 165740 / 0x2876c
    L__M(##Cut);
    rtrue;
];

[ JumpOverSub ;	! 165748 / 0x28774
    L__M(##JumpOver);
    rtrue;
];

! References: green_wire.name, red_wire.name, blue_wire.name, black_wire.name

[ RepairSub ;	! 165756 / 0x2877c
    L__M(##Repair);
    rtrue;
];

[ DrinkSub ;	! 165764 / 0x28784
    L__M(##Drink);
    rtrue;
];

[ SwimSub ;	! 165772 / 0x2878c
    L__M(##Swim);
    rtrue;
];

[ SwingSub ;	! 165780 / 0x28794
    L__M(##Swing);
    rtrue;
];

[ BlowSub ;	! 165788 / 0x2879c
    L__M(##Blow);
    rtrue;
];

[ CleanSub ;	! 165796 / 0x287a4
    L__M(##Clean);
    rtrue;
];

[ SetSub ;	! 165804 / 0x287ac
    L__M(##Set);
    rtrue;
];

[ SetToSub ;	! 165812 / 0x287b4
    L__M(##SetTo);
    rtrue;
];

[ WaveHandsSub ;	! 165820 / 0x287bc
    L__M(##WaveHands);
    rtrue;
];

! References: Attic.name

[ BuySub ;	! 165828 / 0x287c4
    L__M(##Buy);
    rtrue;
];

[ SingSub ;	! 165836 / 0x287cc
    L__M(##Sing);
    rtrue;
];

[ ClimbSub ;	! 165844 / 0x287d4
    L__M(##Climb);
    rtrue;
];

[ SleepSub ;	! 165852 / 0x287dc
    L__M(##Sleep);
    rtrue;
];

[ ConsultSub ;	! 165860 / 0x287e4
    L__M(##Consult,1,noun);
    rtrue;
];

[ TouchSub ;	! 165872 / 0x287f0
    if (noun == player) {
        return L__M(##Touch,3);
    }
    if (noun has animate) {
        return L__M(##Touch,1);
    }
    L__M(##Touch,2);
    rtrue;
];

[ PullSub ;	! 165908 / 0x28814
    if (noun has static) {
        return L__M(##Pull,1);
    }
    if (noun has scenery) {
        return L__M(##Pull,2);
    }
    if (noun has animate) {
        return L__M(##Pull,4);
    }
    L__M(##Pull,3);
    rtrue;
];

[ PushSub ;	! 165960 / 0x28848
    if (noun has static) {
        return L__M(##Push,1);
    }
    if (noun has scenery) {
        return L__M(##Push,2);
    }
    if (noun has animate) {
        return L__M(##Pull,4);
    }
    L__M(##Push,3);
    rtrue;
];

[ TurnSub ;	! 166012 / 0x2887c
    if (noun has static) {
        return L__M(##Turn,1);
    }
    if (noun has scenery) {
        return L__M(##Turn,2);
    }
    if (noun has animate) {
        return L__M(##Pull,4);
    }
    L__M(##Turn,3);
    rtrue;
];

[ WaitSub ;	! 166064 / 0x288b0
    if (AfterRoutines() == true) {
        rtrue;
    }
    L__M(##Wait);
    rtrue;
];

[ PushDirSub ;	! 166084 / 0x288c4
    L__M(##PushDir,1);
    rtrue;
];

[ routine166092 local1 ;	! 166092 / 0x288cc
    if (parent(second) ~= Compass) {
        return L__M(##PushDir,2);
    }
    if (second == u_obj or d_obj) {
        return L__M(##PushDir,3);
    }
    AfterRoutines();
    local1 = noun;
    move local1 to player;
    R_Process(##Go,second);
    if (location == thedark) {
        move local1 to real_location;
    } else {
        move local1 to location;
    }
    rtrue;
];

[ SqueezeSub ;	! 166156 / 0x2890c
    if (noun has animate) {
        return L__M(##Squeeze,1);
    }
    L__M(##Squeeze,2);
    rtrue;
];

[ ThrowAtSub ;	! 166180 / 0x28924
    if (second > 1) {
        verb = ##ThrownAt;
        if (RunRoutines(second,after) ~= 0) {
            verb = ##ThrowAt;
            rtrue;
        }
        verb = ##ThrowAt;
    }
    if (second hasnt animate) {
        return L__M(##ThrowAt,1);
    }
    if (RunLife(second,32[electric_torch?]) ~= 0) {
        rfalse;
    }
    L__M(##ThrowAt,2);
    rtrue;
];

[ AttackSub ;	! 166244 / 0x28964
    if (noun has animate && RunLife(noun,66[solid_glass_ball?]) ~= 0) {
        rfalse;
    }
    L__M(##Attack);
    rtrue;
];

[ KissSub ;	! 166272 / 0x28980
    if (RunLife(noun,84[big_iron_fireplace?]) ~= 0) {
        rfalse;
    }
    if (noun == player) {
        return L__M(##Touch,3);
    }
    L__M(##Kiss);
    rtrue;
];

[ AnswerSub ;	! 166308 / 0x289a4
    if (RunLife(second,68[water_pipe?]) ~= 0) {
        rfalse;
    }
    L__M(##Answer);
    rtrue;
];

[ TellSub ;	! 166328 / 0x289b8
    if (noun == player) {
        return L__M(##Tell);
    }
    if (RunLife(noun,69[romantic_novel?]) ~= 0) {
        rfalse;
    }
    L__M(##Tell,2);
    rtrue;
];

[ AskSub ;	! 166364 / 0x289dc
    if (RunLife(noun,70[book_of_Twenties_poetry?]) ~= 0) {
        rfalse;
    }
    L__M(##Ask);
    rtrue;
];

[ AskForSub ;	! 166384 / 0x289f0
    if (noun == player) {
        R_Process(##Inv);
        rtrue;
    }
    L__M(##Order,1,noun);
    rtrue;
];

[ L__M act n x1 s ;	! 166408 / 0x28a08
    s = action;
    action = act;
    if (n == 0) {
        n = 1;
    }
    L___M(n,x1);
    action = s;
    rtrue;
];

[ L___M n x1 s ;	! 166436 / 0x28a24
    s = verb;
    lm_n = n;
    lm_o = x1;
    verb = action;
    if (RunRoutines(lm_object,after) ~= 0) {
        verb = s;
        rfalse;
    }
    verb = s;
    if (action == ##Prompt) {
        print "^>";
        rtrue;
    }
    if (action == ##Miscellany) {
        if (n == 1) {
            "(considering the first sixteen objects only)^";
        }
        if (n == 2) {
            "Nothing to do!";
        }
        if (n == 3) {
            print " You have died ";
            rtrue;
        }
        if (n == 4) {
            print " You have won ";
            rtrue;
        }
        if (n == 5) {
            print "^Would you like to RESTART, RESTORE a saved game";
            if (0 == 0) {
                print ", give the FULL score for that game";
            }
            if (deadflag == WON && 0 == 0) {
                print ", see some suggestions for AMUSING things to do";
            }
            " or QUIT?";
        }
        if (n == 6) {
            "[Your interpreter does not provide ~undo~. Sorry!]";
        }
        if (n == 7) {
            "~Undo~ failed. [Not all interpreters provide it.]";
        }
        if (n == 8) {
            "Please give one of the answers above.";
        }
        if (n == 9) {
            "^It is now pitch dark in here!";
        }
        if (n == 10) {
            "I beg your pardon?";
        }
        if (n == 11) {
            "[You can't ~undo~ what hasn't been done!]";
        }
        if (n == 12) {
            "[Can't ~undo~ twice in succession. Sorry!]";
        }
        if (n == 13) {
            "[Previous turn undone.]";
        }
        if (n == 14) {
            "Sorry, that can't be corrected.";
        }
        if (n == 15) {
            "Think nothing of it.";
        }
        if (n == 16) {
            "~Oops~ can only correct a single word.";
        }
        rfalse;
    }
    if (action == ##Order) {
        CDefart(x1);
        " has better things to do.";
    }
    if (action == ##Quit) {
        if (n == 1) {
            print "Please answer yes or no.";
            rtrue;
        }
        print "Are you sure you want to quit? ";
        rtrue;
    }
    if (action == ##Restart) {
        if (n == 1) {
            print "Are you sure you want to restart? ";
            rtrue;
        }
        "Failed.";
    }
    if (action == ##Restore) {
        if (n == 1) {
            "Restore failed.";
        }
        "Ok.";
    }
    if (action == ##Save) {
        if (n == 1) {
            "Save failed.";
        }
        "Ok.";
    }
    if (action == ##Verify) {
        if (n == 1) {
            "The game file has verified as intact.";
        }
        "The game file did not verify properly, and may be corrupted (or you may be running it on a very primitive interpreter which is unable properly to perform the test).";
    }
    if (action == ##ScriptOn) {
        if (n == 1) {
            "Transcripting is already on.";
        }
        "Start of a transcript of";
    }
    if (action == ##ScriptOff) {
        if (n == 1) {
            "Transcripting is already off.";
        }
        "^End of transcript.";
    }
    if (action == ##NotifyOn) {
        "Score notification on.";
    }
    if (action == ##NotifyOff) {
        "Score notification off.";
    }
    if (action == ##Places) {
        print "You have visited: ";
        rtrue;
    }
    if (action == ##Objects) {
        if (n == 1) {
            "Objects you have handled:^";
        }
        "None.";
    }
    if (action == ##Score) {
        if (deadflag == 0) {
            print "You have so far scored ";
        } else {
            print "In that game you scored ";
        }
        print score, " out of a possible ", 550, ", in ", turns, " turn";
        if (turns > 1) {
            print "s";
        }
        rtrue;
    }
    if (action == ##FullScore) {
        if (n == 1) {
            if (deadflag == 0) {
                print "The score is ";
            } else {
                print "The score was ";
            }
            "made up as follows:^";
        }
        if (n == 2) {
            "finding sundry items";
        }
        if (n == 3) {
            "visiting various places";
        }
        "total (out of ", 550, ")";
    }
    if (action == ##Inv) {
        if (n == 1) {
            "You are carrying nothing.";
        }
        print "You are carrying";
        rtrue;
    }
    if (action == ##Take) {
        if (n == 1) {
            "Taken.";
        }
        if (n == 2) {
            "You are always self-possessed.";
        }
        if (n == 3) {
            print "I don't suppose ";
            Defart(x1);
            " would care for that.";
        }
        if (n == 4) {
            print "You'd have to get ";
            if (x1 has supporter) {
                print "off ";
            } else {
                print "out of ";
            }
            Defart(x1);
            " first.";
        }
        if (n == 5) {
            "You already have that.";
        }
        if (n == 6) {
            print "That seems to belong to ";
            Defart(x1);
            ".";
        }
        if (n == 7) {
            print "That seems to be a part of ";
            Defart(x1);
            ".";
        }
        if (n == 8) {
            "That isn't available.";
        }
        if (n == 9) {
            CDefart(x1);
            " is not open.";
        }
        if (n == 10) {
            "That's hardly portable.";
        }
        if (n == 11) {
            "That's fixed in place.";
        }
        if (n == 12) {
            "You're carrying too many things already.";
        }
        print "(putting ";
        Defart(x1);
        print " into ";
        Defart(canvas_rucksack);
        " to make room)";
    }
    if (action == ##Drop) {
        if (n == 1) {
            "Already on the floor.";
        }
        if (n == 2) {
            "You haven't got that.";
        }
        if (n == 3) {
            print "(first taking ";
            Defart(x1);
            " off)";
        }
        "Dropped.";
    }
    if (action == ##Remove) {
        if (n == 1) {
            "It is unfortunately closed.";
        }
        if (n == 2) {
            "But it isn't there now.";
        }
        "Removed.";
    }
    if (action == ##PutOn) {
        if (n == 1) {
            print "You need to be holding ";
            Defart(x1);
            " before you can put it on top of something else.";
        }
        if (n == 2) {
            "You can't put something on top of itself.";
        }
        if (n == 3) {
            print "Putting things on ";
            Defart(x1);
            " would achieve nothing.";
        }
        if (n == 4) {
            "You lack the dexterity.";
        }
        if (n == 5) {
            "(first taking it off)^";
        }
        if (n == 6) {
            print "There is no more room on ";
            Defart(x1);
            ".";
        }
        if (n == 7) {
            "Done.";
        }
        print "You put ";
        Defart(x1);
        print " on ";
        Defart(second);
        ".";
    }
    if (action == ##Insert) {
        if (n == 1) {
            "You need to be holding it before you can put it into something else.";
        }
        if (n == 2) {
            "That can't contain things.";
        }
        if (n == 3) {
            "Alas, it is closed.";
        }
        if (n == 4) {
            "You'll need to take it off first.";
        }
        if (n == 5) {
            "You can't put something inside itself.";
        }
        if (n == 6) {
            "(first taking it off)^";
        }
        if (n == 7) {
            print "There is no more room in ";
            Defart(x1);
            ".";
        }
        if (n == 8) {
            "Done.";
        }
        print "You put ";
        Defart(x1);
        print " into ";
        Defart(second);
        ".";
    }
    if (action == ##Transfer) {
        if (n == 1) {
            "That isn't in your possession.";
        }
        "First pick that up.";
    }
    if (action == ##EmptyT) {
        if (n == 1) {
            CDefart(x1);
            " can't contain things.";
        }
        if (n == 2) {
            CDefart(x1);
            " is closed.";
        }
        CDefart(x1);
        " is empty already.";
    }
    if (action == ##Give) {
        if (n == 1) {
            print "You aren't holding ";
            Defart(x1);
            ".";
        }
        if (n == 2) {
            print "You juggle ";
            Defart(x1);
            " for a while, but don't achieve much.";
        }
        CDefart(x1);
        " doesn't seem interested.";
    }
    if (action == ##Show) {
        if (n == 1) {
            print "You aren't holding ";
            Defart(x1);
            ".";
        }
        CDefart(x1);
        " is unimpressed.";
    }
    if (action == ##Enter) {
        if (n == 1) {
            print "But you're already ";
            if (x1 has supporter) {
                print "on ";
            } else {
                print "in ";
            }
            Defart(x1);
            ".";
        }
        if (n == 2) {
            "That's not something you can enter.";
        }
        if (n == 3) {
            print "You can't get into the closed ";
            PrintShortName(x1);
            ".";
        }
        if (n == 4) {
            "You can only get into something on the floor.";
        }
        print "You get ";
        if (x1 has supporter) {
            print "onto ";
        } else {
            print "into ";
        }
        Defart(x1);
        ".";
    }
    if (action == ##TakeOff) {
        print "But you aren't on ";
        Defart(x1);
        " at the moment.";
    }
    if (action == ##Exit) {
        if (n == 1) {
            "But you aren't in anything at the moment.";
        }
        if (n == 2) {
            print "You can't get out of the closed ";
            PrintShortName(x1);
            ".";
        }
        print "You get ";
        if (x1 has supporter) {
            print "off ";
        } else {
            print "out of ";
        }
        Defart(x1);
        ".";
    }
    if (action == ##VagueGo) {
        "You'll have to say which compass direction to go in.";
    }
    if (action == ##Go) {
        if (n == 1) {
            print "You'll have to get ";
            if (x1 has supporter) {
                print "off ";
            } else {
                print "out of ";
            }
            Defart(x1);
            " first.";
        }
        if (n == 2) {
            "You can't go that way.";
        }
        if (n == 3) {
            print "You are unable to climb ";
            Defart(x1);
            ".";
        }
        if (n == 4) {
            print "You are unable to descend ";
            Defart(x1);
            ".";
        }
        if (n == 5) {
            print "You can't, since ";
            Defart(x1);
            " is in the way.";
        }
        print "You can't, since ";
        Defart(x1);
        " leads nowhere.";
    }
    if (action == ##Brief) {
        " is now in its normal ~brief~ printing mode, which gives long descriptions of places never before visited and short descriptions otherwise.";
    }
    if (action == ##Verbose) {
        " is now in its ~verbose~ mode, which always gives long descriptions of locations (even if you've been there before).";
    }
    if (action == ##Superbrief) {
        " is now in its ~superbrief~ mode, which always gives short descriptions of locations (even if you haven't been there before).";
    }
    if (action == ##Look) {
        if (n == 1) {
            print "on";
            rfalse;
        }
        if (n == 2) {
            print "in";
            rfalse;
        }
        if (n == 3) {
            print "as";
            rfalse;
        }
        if (n == 4) {
            print "^On ";
            Defart(x1);
            WriteListFrom(child(x1),8 + 16 + 128 + 64 + 1024 + 2048);
            ".";
        }
        if (x1 ~= location) {
            if (x1 has supporter) {
                print "^On ";
            } else {
                print "^In ";
            }
            Defart(x1);
            print " you";
        } else {
            print "^You";
        }
        print " can ";
        if (n == 5) {
            print "also ";
        }
        print "see ";
        WriteListFrom(child(x1),8 + 512 + 16 + 128 + 64 + 2048);
        if (x1 ~= location) {
            ".";
        }
        " here.";
    }
    if (action == ##Read) {
        if (n == 1) {
            "Darkness, noun. An absence of light to see by.";
        }
        if (n == 2) {
            print "You see nothing special about ";
            Defart(x1);
            ".";
        }
        CDefart(x1);
        print " is currently switched ";
        if (x1 has on) {
            "on.";
        } else {
            "off.";
        }
        rfalse;
    }
    if (action == ##LookUnder) {
        if (n == 1) {
            "But it's dark.";
        }
        "You find nothing of interest.";
    }
    if (action == ##Search) {
        if (n == 1) {
            "But it's dark.";
        }
        if (n == 2) {
            print "There is nothing on ";
            Defart(x1);
            ".";
        }
        if (n == 3) {
            print "On ";
            Defart(x1);
            WriteListFrom(child(x1),64 + 8 + 1024 + 2048);
            ".";
        }
        if (n == 4) {
            "You find nothing of interest.";
        }
        if (n == 5) {
            "You can't see inside, since it is closed.";
        }
        if (n == 6) {
            CDefart(x1);
            " is empty.";
        }
        print "In ";
        Defart(x1);
        WriteListFrom(child(x1),64 + 8 + 1024 + 2048);
        ".";
    }
    if (action == ##Unlock) {
        if (n == 1) {
            "That doesn't seem to be something you can unlock.";
        }
        if (n == 2) {
            "It's unlocked at the moment.";
        }
        if (n == 3) {
            "That doesn't seem to fit the lock.";
        }
        print "You unlock ";
        Defart(x1);
        ".";
    }
    if (action == ##Lock) {
        if (n == 1) {
            "That doesn't seem to be something you can lock.";
        }
        if (n == 2) {
            "It's locked at the moment.";
        }
        if (n == 3) {
            "First you'll have to close it.";
        }
        if (n == 4) {
            "That doesn't seem to fit the lock.";
        }
        print "You lock ";
        Defart(x1);
        ".";
    }
    if (action == ##SwitchOn) {
        if (n == 1) {
            "That's not something you can switch.";
        }
        if (n == 2) {
            "That's already on.";
        }
        print "You switch ";
        Defart(x1);
        " on.";
    }
    if (action == ##SwitchOff) {
        if (n == 1) {
            "That's not something you can switch.";
        }
        if (n == 2) {
            "That's already off.";
        }
        print "You switch ";
        Defart(x1);
        " off.";
    }
    if (action == ##Open) {
        if (n == 1) {
            "That's not something you can open.";
        }
        if (n == 2) {
            "It seems to be locked.";
        }
        if (n == 3) {
            "It's already open.";
        }
        if (n == 4) {
            print "You open ";
            Defart(x1);
            print ", revealing ";
            if (WriteListFrom(child(x1),8 + 64 + 2048) == 0) {
                "nothing.";
            }
            ".";
        }
        print "You open ";
        Defart(x1);
        ".";
    }
    if (action == ##Close) {
        if (n == 1) {
            "That's not something you can close.";
        }
        if (n == 2) {
            "It's already closed.";
        }
        print "You close ";
        Defart(x1);
        ".";
    }
    if (action == ##Disrobe) {
        if (n == 1) {
            "You're not wearing that.";
        }
        print "You take off ";
        Defart(x1);
        ".";
    }
    if (action == ##Wear) {
        if (n == 1) {
            "You can't wear that!";
        }
        if (n == 2) {
            "You're not holding that!";
        }
        if (n == 3) {
            "You're already wearing that!";
        }
        print "You put on ";
        Defart(x1);
        ".";
    }
    if (action == ##Eat) {
        if (n == 1) {
            "That's plainly inedible.";
        }
        print "You eat ";
        Defart(x1);
        ". Not bad.";
    }
    if (action == ##Yes or ##No) {
        "That was a rhetorical question.";
    }
    if (action == ##Burn) {
        "This dangerous act would achieve little.";
    }
    if (action == ##Pray) {
        "Nothing practical results from your prayer.";
    }
    if (action == ##Wake) {
        "The dreadful truth is, this is not a dream.";
    }
    if (action == ##WakeOther) {
        "That seems unnecessary.";
    }
    if (action == ##Kiss) {
        "Keep your mind on the game.";
    }
    if (action == ##Think) {
        "What a good idea.";
    }
    if (action == ##Smell) {
        "You smell nothing unexpected.";
    }
    if (action == ##Listen) {
        "You hear nothing unexpected.";
    }
    if (action == ##Taste) {
        "You taste nothing unexpected.";
    }
    if (action == ##Touch) {
        if (n == 1) {
            "Keep your hands to yourself!";
        }
        if (n == 3) {
            "If you think that'll help.";
        }
        "You feel nothing unexpected.";
    }
    if (action == ##Dig) {
        "Digging would achieve nothing here.";
    }
    if (action == ##Cut) {
        "Cutting that up would achieve little.";
    }
    if (action == ##Jump) {
        "You jump on the spot, fruitlessly.";
    }
    if (action == ##JumpOver or ##Repair) {
        "You would achieve nothing by this.";
    }
    if (action == ##Drink) {
        "There's nothing suitable to drink here.";
    }
    if (action == ##Fill) {
        "But there's no water here to carry.";
    }
    if (action == ##Sorry) {
        "Oh, don't apologise.";
    }
    if (action == ##Strong) {
        "Real adventurers do not use such language.";
    }
    if (action == ##Mild) {
        "Quite.";
    }
    if (action == ##Attack) {
        "Violence isn't the answer to this one.";
    }
    if (action == ##Swim) {
        "There's not enough water to swim in.";
    }
    if (action == ##Swing) {
        "There's nothing sensible to swing here.";
    }
    if (action == ##Blow) {
        "You can't usefully blow that.";
    }
    if (action == ##Clean) {
        "You achieve nothing by this.";
    }
    if (action == ##Set) {
        "No, you can't set that.";
    }
    if (action == ##SetTo) {
        "No, you can't set that to anything.";
    }
    if (action == ##WaveHands) {
        "You wave, feeling foolish.";
    }
    if (action == ##Wave) {
        if (n == 1) {
            "But you aren't holding that.";
        }
        print "You look ridiculous waving ";
        Defart(x1);
        ".";
    }
    if (action == ##Pull or ##Push or ##Turn) {
        if (n == 1) {
            "It is fixed in place.";
        }
        if (n == 2) {
            "You are unable to.";
        }
        if (n == 4) {
            "That would be less than courteous.";
        }
        "Nothing obvious happens.";
    }
    if (action == ##PushDir) {
        if (n == 1) {
            "Is that the best you can think of?";
        }
        if (n == 2) {
            "That's not a direction.";
        }
        "Not that way you can't.";
    }
    if (action == ##Squeeze) {
        if (n == 1) {
            "Keep your hands to yourself.";
        }
        "You achieve nothing by this.";
    }
    if (action == ##ThrowAt) {
        if (n == 1) {
            "Futile.";
        }
        "You lack the nerve when it comes to the crucial moment.";
    }
    if (action == ##Tell) {
        if (n == 1) {
            "You talk to yourself a while.";
        }
        "This provokes no reaction.";
    }
    if (action == ##Answer or ##Ask) {
        "There is no reply.";
    }
    if (action == ##Buy) {
        "Nothing is on sale.";
    }
    if (action == ##Sing) {
        "Your singing is abominable.";
    }
    if (action == ##Climb) {
        "I don't think much is to be achieved by that.";
    }
    if (action == ##Wait) {
        "Time passes.";
    }
    if (action == ##Sleep) {
        "You aren't feeling especially drowsy.";
    }
    if (action == ##Consult) {
        print "You discover nothing of interest in ";
        Defart(x1);
        ".";
    }
    rtrue;
];

[ Initialise; ;	! 172408 / 0x2a178
    StartSplash();
    location = Attic;
    move crumpled_piece_of_paper to player;
    move electric_torch to player;
    move chocolate_biscuit to player;
    StartDaemon(electric_torch);
    InsertCardIntoDeck(Drowned_Sailor_card);
    InsertCardIntoDeck(Fool_card);
    InsertCardIntoDeck(Death_card);
    StrongboxX = random(18) - 9;
    StrongboxY = random(18) - 9;
    "^^^^It's become a matter of pride now not to give up. That tourist map of Paris must be up here somewhere in all this clutter, even if it has been five years since your last trip. And it's your own fault. It looks as if your great-grandfather was the last person to tidy up these lofts...^";
];

[ routine172644 ;	! 172644 / 0x2a264
    if (verb == ##Go && carbolic_soap hasnt concealed) {
        set_flag_array(13);
        "You're going nowhere until you make amends for that nasty bad language.";
    }
    if (gas_mask has worn) {
        if (verb == ##Smell) {
            "With the gas mask on all you can smell is old cork and rubber.";
        }
        if (verb == ##Eat) {
            "Not with a gas mask on!";
        }
        if (verb == ##Order or ##Answer or ##Ask) {
            "Your speech is muffled into silence by the gas mask.";
        }
    }
    rfalse;
];

[ routine172820 ;	! 172820 / 0x2a314
    if (deadflag == FAILED) {
        print "You have missed the point entirely";
    }
    if (deadflag == DESTROYED_UNIVERSE) {
        print "You have disembodied the entire universe";
    }
    if (deadflag == AUSTRALIA) {
        print "You have been transported to Australia";
    }
    if (deadflag == PARADOX) {
        print "You have been annihilated by a temporal paradox";
    }
    if (deadflag == MYTH) {
        print "You have become a constellation";
    }
    if (deadflag == PRISON) {
        print "You have been imprisoned as a terrorist";
    }
    if (deadflag == CHECKMATED) {
        print "You have been checkmated";
    }
    if (deadflag == SPOOKED) {
        print "You have been spooked";
    }
    rtrue;
];

[ PrintRank local1 local2 ;	! 173036 / 0x2a3ec
    print ", giving you the rank of ";
    local1 = score;
    if (local1 ~= 65437[?] && task_done->11 ~= 0) {
        local1 = local1 - 50;
    }
    local2 = 1[?];
  .label173080;
    if (local2 <= array_26065-->0 * 2) {
        if (local1 >= array_26065-->local2) {
            print (string) array_26065-->(local2 + 1);
            new_line;
            rtrue;
        }
        local2 = local2 + 2;
        jump label173080;
    }
    rtrue;
];

[ PrintTaskName n ;	! 173128 / 0x2a448
    if (n == SCORE_HAMBURG) {
        "reading postcard";
    }
    if (n == SCORE_TORCH) {
        "recharging torch";
    }
    if (n == SCORE_JOSHUA) {
        "exorcism";
    }
    if (n == SCORE_SECRETDOOR) {
        "opening secret door";
    }
    if (n == SCORE_DEMIJOHN) {
        "opening demijohn";
    }
    if (n == SCORE_WAITER) {
        "using dumbwaiter";
    }
    if (n == SCORE_WAND) {
        "charging a rod";
    }
    if (n == SCORE_AIMWAND) {
        "firing a rod";
    }
    if (n == SCORE_WIRELESS) {
        "exposing radio";
    }
    if (n == SCORE_DAISY) {
        "sporting a daisy chain";
    }
    if (n == SCORE_CHOCOLATE) {
        "placating Aunt Jemima";
    }
    if (n == SCORE_ANDROMEDA) {
        "rescuing Andromeda";
    }
    if (n == SCORE_BATTERY) {
        "uncovering battery";
    }
    if (n == SCORE_PLUMBING) {
        "mending the plumbing";
    }
    if (n == SCORE_SMELL) {
        "scenting a passage";
    }
    if (n == SCORE_REFLECTING) {
        "reflecting";
    }
    if (n == SCORE_HENRIPOST) {
        "solving the grid";
    }
    if (n == SCORE_ORB) {
        "winning the orb";
    }
    if (n == SCORE_MAP) {
        "buying map of Paris";
    }
    if (n == SCORE_ARC) {
        "filling the arc";
    }
    if (n == SCORE_WELL) {
        "getting into the well";
    }
    if (n == SCORE_MASCOT) {
        "acquiring the mascot";
    }
    if (n == SCORE_BISCUIT) {
        "eating between meals";
    }
    if (n == SCORE_SMOKE) {
        "smoke detecting";
    }
    if (n == SCORE_SHIP) {
        "putting a ship in a bottle";
    }
    if (n == SCORE_FLAG) {
        "parachuting on deck";
    }
    if (n == SCORE_SLEEP) {
        "sleeping in Alison's bed";
    }
    if (n == SCORE_SECRET_PASS) {
        "opening sandstone crevice";
    }
    if (n == SCORE_ROD_IDENT) {
        "identifying a rod";
    }
    if (n == SCORE_WATCH) {
        "dislodging the watch";
    }
    if (n == SCORE_HYPNOSIS) {
        "hypnosis";
    }
    if (n == SCORE_SECURITY) {
        "passing security";
    }
    if (n == SCORE_TEMPLE) {
        "restoring the Temple";
    }
    if (n == SCORE_HOMER) {
        "answering Homer";
    }
    if (n == SCORE_ORACLE) {
        "summoning the oracle";
    }
    if (n == SCORE_STRONGBOX) {
        "unearthing strongbox";
    }
    if (n == SCORE_AUSTIN) {
        "startling Austin";
    }
    if (n == SCORE_WASH) {
        "washing away the stone";
    }
    if (n == SCORE_LIBRARY) {
        "provoking the librarians";
    }
    if (n == SCORE_SPHINX) {
        "twisting the sphinx's nose";
    }
    if (n == SCORE_QUARTERSTAFF) {
        "depositing the quarterstaff";
    }
    if (n == SCORE_AFTERLIFE) {
        "rising in the afterlife";
    }
    if (n == SCORE_KNIGHT) {
        "reviving the knight";
    }
    if (n == SCORE_KNIGHT_ENCOURAGE) {
        "encouraging the knight";
    }
    if (n == SCORE_HIGHROD) {
        "choosing a High Rod";
    }
    "** Nameless task **";
];

[ FullScoreSub ndx score_var ;	! 173924 / 0x2a764
    ScoreSub();
    if (score == 0) {
        rfalse;
    }
    new_line;
    L__M(##FullScore,1);
    ndx = 0;
  .label173944;
    if (ndx < 45) {
        if (task_done->ndx == 1[?]) {
            if (ndx == 21) {
                PANum(65486);
                score_var = score_var - 50;
            } else {
                PANum(task_scores->ndx);
                score_var = score_var + task_scores->ndx;
            }
            PrintTaskName(ndx);
        }
        ++ndx;
        jump label173944;
    }
    if (rod_score ~= 0) {
        PANum(rod_score);
        print "discovering rods^";
    }
    if (things_score ~= 0) {
        PANum(things_score);
        L__M(##FullScore,2);
    }
    if (places_score ~= 0) {
        PANum(places_score);
        L__M(##FullScore,3);
    }
    if (good_try_bonus ~= 0) {
        PANum(5);
        print "bonus for a good try^";
        score_var = score_var + 5;
    }
    score_var = score_var + rod_score + things_score + places_score;
    if (score == 65437) {
        score_var = 0 - score_var - 99;
        PANum(score_var);
        print "destroying universe^";
    }
    new_line;
    PANum(score);
    L__M(##FullScore,4);
    if (deadflag == WON && task_done->11 == 0) {
        "^Sadly, you missed out on the 50-point bonus for rescuing Andromeda.";
    }
    rtrue;
];

[ GoodTry ;	! 174212 / 0x2a884
    if (one_time_try_bonus == true) {
        rtrue;
    }
    one_time_try_bonus = true;
    displaying_quote = true;
    StartTimer(Old_Winery,4);
    score = score + 5;
    good_try_bonus = 1;
    "^A shame to see such a good try unrewarded... oh, go on, have an extra five points.";
];

[ GoodTryRevoked ;	! 174296 / 0x2a8d8
    if (good_try_bonus == 1) {
        score = score - 5;
        good_try_bonus = 0;
        "^Under the circumstances, the 5-point bonus is forfeit.";
    }
    rtrue;
];

[ SetHimHer who ;	! 174348 / 0x2a90c
    who = location;
    if (who == thedark) {
        who = real_location;
    }
    if (who.section == 0) {
        "** Room has no zone **";
    }
    game_section = who.section;
    if (who == Potting_Room) {
        herobj = Jemima;
    }
    if (who == Consulting_Room) {
        herobj = Madame_Sosostris;
    }
    if (who == Chatelet_les_Halles) {
        himobj = surly_shopkeeper;
    }
    if (who == Battlements) {
        himobj = Sir_Joshua_Meldrewe;
    }
    if (who == On_board_the_Phlebas) {
        himobj = hollow_man;
    }
    if (who == Eraina_Taverna) {
        himobj = bartender;
    }
    if (who == Rough_Tent) {
        himobj = unconscious_Saxon_spy;
    }
    if (who == Hellish_Place) {
        himobj = demon;
    }
    if (who == Heavenly_Place) {
        herobj = angel;
    }
    if (who == Cave_Mouth) {
        herobj = Oracle;
    }
    if (who == Inner_Sanctum) {
        himobj = Homer;
    }
    if (who == Warehouses_and_Port) {
        himobj = gambling_sailor;
    }
    if (who == Behind_Summer_House) {
        himobj = irate_squirrel_friend;
    }
    if (who == Hollow) {
        herobj = corn_crake;
    }
    if (who == Stone_Cross) {
        himobj = Old_Evans;
    }
    if (who == Consulting_Room) {
        herobj = Madame_Sosostris;
    }
    if (who == Reading_Corridor) {
        himobj = Callimachus;
    }
    if (who == Librarians_Office) {
        himobj = Apollonius;
    }
    if (who == Lost_inside_the_Palace) {
        himobj = slave;
    }
    rtrue;
];

[ DarkToDark ;	! 174596 / 0x2aa04
    deadflag = DIED;
    if (game_section ~= T_MODERN) {
        "As you step falteringly through the darkness, the air falls ice-cold, whispering in secret languages. Suddenly a great bear rears up before you, savagely sweeping its paw!";
    }
    deadflag = FAILED;
    print "As you unwisely blunder about in the dark, you ";
    if (location == Priest_s_Hole) {
        "slip down a side passage of the chimney, further and further, blindly landing in a cloud of soot in the fireplace of the lounge downstairs. Fortunately your family is on hand to clean you up and put you back to work packing.";
    }
    if (location >= 123) {
        "miss your footing, trip over and bang your head... Some time later you wake up in hospital, very confused and not on holiday. Fortunately Aunt Jemima comes to visit you every afternoon with plenty of things for you to do...";
    }
    "put a foot wrong and crash through a thin plaster roof into one of the upstairs bedrooms, happily landing on the bed. In later years it becomes a family joke that you demolished half the house for a tatty old tourist map.";
];

[ routine175152 ;	! 175152 / 0x2ac30
    routine185280();
    displaying_quote = true;
    rtrue;
];

[ routine175160 local1 local2 ;	! 175160 / 0x2ac38
    if (local2 < 2) {
        rfalse;
    }
    if (action_to_be == ##Strike && local1 has rod_attr) {
        return 2[?];
    }
    return 1[?];
];

[ routine175184 local1 ;	! 175184 / 0x2ac50
    if (Meldrewes_History in local1) {
        return 38[Meldrewes_History?];
    }
    if (classical_dictionary in local1) {
        return 43[classical_dictionary?];
    }
    if (ancient_prayer_book in local1) {
        return 95[ancient_prayer_book?];
    }
    if (tourist_map in local1) {
        return 106[tourist_map?];
    }
    return 0;
];

[ LookUpSub local1 local2 ;	! 175216 / 0x2ac70
    local2 = TryNumber(consult_from);
    if (local2 >= 0 && (tourist_map in player || tourist_map in location)) {
        local1 = 106[tourist_map?];
    }
    if (local2 >= 0 && (ancient_prayer_book in player || ancient_prayer_book in location)) {
        local1 = 95[ancient_prayer_book?];
    }
    if (local1 == 0) {
        local1 = routine175184(player);
    }
    if (local1 == 0) {
        local1 = routine175184(location);
    }
    if (local1 == 0) {
        "I can't see what you wish to consult.";
    }
    print "(consulting ";
    Defart(local1);
    print ")^";
    R_Process(##Consult,local1);
    rtrue;
];

[ TimeSub ;	! 175336 / 0x2ace8
    WhereInGame();
    new_line;
    rtrue;
];

[ WhereInGame ;	! 175344 / 0x2acf0
    if (location == Inside_the_Orb) {
        print "Inside the golden orb.";
        rfalse;
    }
    if (game_section == T_MODERN) {
        print "This is the afternoon of June 3rd, 1993, and you are in Meldrew Hall.";
    }
    if (game_section == T_UNREAL) {
        print "It is early morning on October 5th, 1922, and you are in the Unreal City.";
    }
    if (game_section == T_HAMBURG) {
        print "It is nearly midnight on October 31st, 1988, and you are in a museum in Hamburg.";
    }
    if (game_section == T_TAROT) {
        print "You are passing among the strange, unearthly world of the Tarot box.";
    }
    if (game_section == T_GARDEN) {
        print "It is the afternoon of June 3rd, 1993, and you are in the gardens.";
    }
    if (game_section == T_GARDEN_PAST) {
        print "It is about noon on March 14th, 1808, and you are in the gardens.";
    }
    if (game_section == T_ANCIENT_BRITAIN) {
        print "It is some time in the sixth century A.D., and you are in the Master Game.";
    }
    if (game_section == T_DREAMING or (T_DREAMING|T_UNREAL)) {
        print "Time seems to have no meaning, and you are dreaming.";
    }
    if (game_section == T_CATACOMBS) {
        print "It is the afternoon of June 3rd, 1993, and you are in the catacombs beneath the gardens.";
    }
    if (game_section == T_ALEXANDRIA) {
        print "It is some time in the winter of 275 B.C., the reign of Ptolemy II, and you are in ancient Alexandria.";
    }
    if (game_section == T_NE_OF_HOME) {
        print "It is the afternoon of June 3rd, 1993, and you are northeast of Meldrew Hall.";
    }
    if (game_section == T_SPIRIT_WORLD) {
        print "You are in the Spirit World, centuries ahead of your sleeping body.";
    }
    if (game_section == T_AFTERLIFE) {
        print "In the great Monopoly-board Jail of the afterlife, you are ~Just Visiting~.";
    }
    rtrue;
];

[ RestoreSub ;	! 176056 / 0x2afb8
    displaying_quote = true;
    @restore -> generic_globvar;
    if (generic_globvar ~= 2[?]) {
        "Failed.";
    }
    new_line;
    LookSub();
    rtrue;
];

[ SaveSub ;	! 176080 / 0x2afd0
    displaying_quote = true;
    if (location == Heavenly_Place) {
        "The angel looks at you reproachfully.";
    }
    if (location == Hellish_Place) {
        "The demon looks at you viciously.";
    }
    @save -> generic_globvar;
    if (generic_globvar == 0) {
        "Failed.";
    }
    print "Ok.^";
    rtrue;
];

[ JumpSub ;	! 176172 / 0x2b02c
    if (Austin in location) {
        if (game_section == T_ALEXANDRIA) {
            "Austin is quite unruffled.";
        }
        print "For some reason, Austin is startled and springs for his life ";
        set_flag_array(7);
        if (location == Souvenirs_Room && charcoal_sketch in slide_projector && south_wall hasnt concealed) {
            move Austin to Causeway;
            Achieved(SCORE_AUSTIN);
            "right up through the south wall and into Alexandria!";
        }
        AustinMovements(true);
        rfalse;
    }
    L__M(##Jump);
    rtrue;
];

[ SorrySub ;	! 176316 / 0x2b0bc
    if (carbolic_soap has concealed) {
        "Oh, don't apologise.";
    }
    "Sorry isn't good enough!";
];

[ StrongSub ;	! 176360 / 0x2b0e8
    move carbolic_soap to player;
    give carbolic_soap ~concealed;
    "Now, that sort of language is an absolute disgrace, and you're going to have to pay the price for it.";
];

[ WashSub ;	! 176432 / 0x2b130
    if (noun ~= carbolic_soap) {
        "That's not something you can wash with.";
    }
    if (carbolic_soap notin player) {
        "You've no soap.";
    }
    remove carbolic_soap;
    give carbolic_soap concealed;
    "Ugh, it tastes absolutely ghastly. But you feel better for it.";
];

[ MildSub ;	! 176532 / 0x2b194
    "It's good that you can express your frustration in such a mild way.";
];

[ KillSub ;	! 176576 / 0x2b1c0
    if (noun ~= hard_wooden_ball || second ~= croquet_mallet) {
        R_Process(##Attack,noun);
        rtrue;
    }
    if (parent(hard_wooden_ball) ~= location) {
        "The ball is not on the ground.";
    }
    set_flag_array(15);
    print "You strike the ball with the mallet, and a pleasing cracking sound.^";
    if (location == Lawn_Ornaments) {
        "^The ball ricochets around the ornaments as on a pinball table.";
    }
    if (location ~= Croquet_Lawn || Croquet_Lawn.nw_to ~= nothing) {
        rfalse;
    }
    print "^The ball runs smoothly across the lawn";
    if (dug_hole in Croquet_Lawn) {
        move hard_wooden_ball to dug_hole;
        " and falls in the hole.";
    }
    remove hard_wooden_ball;
    Croquet_Lawn.nw_to = Behind_Summer_House;
    Lawn_Ornaments.cant_go = "There are paths only west and northwest.";
    Mosaic.e_to = Behind_Summer_House;
    ", along to the northwestern hedge and into an irate squirrel. In a sudden rustle he leaps away, knocking aside a rotten branch and uncovering a tiny gap through the hedge.";
];

[ PrettySub ;	! 176916 / 0x2b314
    pretty_mode = true;
    set_flag_array(5);
    displaying_quote = true;
    "~Curses~ is now in its (supposedly) ~pretty~ mode.";
];

[ PlainSub ;	! 176968 / 0x2b348
    pretty_mode = false;
    displaying_quote = true;
    "~Curses~ is now in its ~plain~ printing mode.";
];

[ HintsSub ;	! 177008 / 0x2b370
    "There are hints built into this game, but you will have to find out for yourself how to get them.";
];

[ PaceDirSub ;	! 177064 / 0x2b3a8
    if (yard_dir <= 0) {
        yard_dir = e_obj;
    }
    PaceMovement(1,yard_dir);
    rtrue;
];

[ PaceSub ;	! 177080 / 0x2b3b8
    PaceMovement(global178,yard_dir);
    rtrue;
];

[ PaceMovement i d ydelta xdelta x y ;	! 177088 / 0x2b3c0
    if (d == nothing) {
        d = e_obj;
    }
    if (d == invalidObj65535) {
        DigX = 0;
        DigY = 0;
        R_Process(##Look);
        rtrue;
    }
    if (d == invalidObj65534) {
        DigX = OldDigX;
        DigY = OldDigY;
        R_Process(##Look);
        rtrue;
    }
    if (location ~= Croquet_Lawn) {
        "You pace up and down, Holmes-fashion.";
    }
    if (d == nothing) {
        "Perhaps you should say which way to pace.";
    }
    if (parent(d) ~= Compass) {
        "What?";
    }
    if (d == n_obj) {
        xdelta = 1;
    }
    if (d == s_obj) {
        xdelta = 65535;
    }
    if (d == e_obj) {
        ydelta = 1;
    }
    if (d == w_obj) {
        ydelta = 65535;
    }
    if (d == ne_obj) {
        ydelta = 1;
        xdelta = 1;
    }
    if (d == nw_obj) {
        ydelta = 65535;
        xdelta = 1;
    }
    if (d == se_obj) {
        ydelta = 1;
        xdelta = 65535;
    }
    if (d == sw_obj) {
        ydelta = 65535;
        xdelta = 65535;
    }
    if (ydelta == 0 && xdelta == 0) {
        "Hardly!";
    }
    x = DigX + ydelta * i;
    y = DigY + xdelta * i;
    if (x >= 13 || x <= 65523 || y >= 13 || y <= 65523) {
        "That would go past the edge of the lawn.";
    }
    DigX = x;
    DigY = y;
    R_Process(##Look);
    rtrue;
];

[ ExamineSub ;	! 177400 / 0x2b4f8
    if (second ~= long_vanity_mirror or nothing) {
        "The point of which escapes me.";
    }
    if (noun == player) {
        "In the mirror is one of the most strikingly attractive people you have ever seen in all your born days.";
    }
    if (noun == model_of_ugly_animal) {
        print "In the mirror is a model of a mischievous-looking monkey, which wriggles as it comes alive!";
        give model_of_ugly_animal general;
        MonkeyAlive();
        rtrue;
    }
    if (CheckMirror(noun) == true) {
        print "Curiously, ";
        Defart(noun);
        " it casts no reflection in the mirror.";
    }
    print "In the mirror is the reflection of ";
    Defart(noun);
    ".";
];

[ DigWithSub ;	! 177648 / 0x2b5f0
    if (noun ~= spade) {
        "Not really a suitable implement.";
    }
    DigSub();
    rtrue;
];

[ DigSub ;	! 177684 / 0x2b614
    if (spade notin player) {
        "You have nothing really suitable to hand.";
    }
    if (location == Vegetable_Garden or Maze_Foundations) {
        "You succeed only in turning the earth further.";
    }
    if (location == Mosaic) {
        "Archaeology is not for the amateur!";
    }
    if (location == Beside_the_Drive) {
        "The gravel is thin and lies on concrete.";
    }
    if (location == Up_the_Plane_Tree) {
        "Surreal!";
    }
    if (location ~= Croquet_Lawn) {
        "The ground is unsuitable.";
    }
    if (DigX == 0 && DigY == 0) {
        "You surely don't want to dig here, right in the middle of such a fine lawn. The peg would fall out, and that would never do.";
    }
    if (DigX == OldDigX && DigY == OldDigY) {
        "There is already a hole on this exact spot of the lawn.";
    }
    OldDigX = DigX;
    OldDigY = DigY;
    print "You dig an energetic little hole in the superb turf";
    if (dug_hole in Croquet_Lawn) {
        print ", filling your last one up with the earth uncovered";
      .label178057;
        if (child(dug_hole) ~= nothing) {
            remove child(dug_hole);
            dig_cnt = 2;
            jump label178057;
        }
    }
    if (DigX == StrongboxX && DigY == StrongboxY && strongbox hasnt moved) {
        print ", until your spade bumps into something solid";
        move strongbox to dug_hole;
        Achieved(SCORE_STRONGBOX);
    } else if (dig_cnt == 1) {
        dig_cnt = 0;
        print ", failing to find whatever it was you buried";
    }
    move dug_hole to Croquet_Lawn;
    if (dig_cnt == 2) {
        dig_cnt = 1;
    }
    ".";
];

[ FillSub ;	! 178196 / 0x2b814
    if (location == Croquet_Lawn) {
        if (dug_hole notin Croquet_Lawn || noun ~= dug_hole) {
            "What?";
        }
      .label178226;
        if (child(dug_hole) ~= nothing) {
            remove child(dug_hole);
            jump label178226;
        }
        remove dug_hole;
        "You fill in the hole, restoring the turf.";
    }
    if (location == Down_by_River or Garden_Stream or Stream or Sea_Shore) {
        "Don't go carting water about, for heaven's sake, it'll only make a mess of your clothes and all your spare clothes are packed.";
    }
    "Try ~get all~ and then ~put all in...~.";
];

[ BeepSub ;	! 178404 / 0x2b8e4
    "Are you feeling quite right?";
];

[ DanceSub ;	! 178424 / 0x2b8f8
    CDefart(noun);
    " does not wish to dance with you.";
];

[ RipSub ;	! 178452 / 0x2b914
    "That sort of wilful damage to property is exactly what's wrong with the world today. And another thing, the influence of so-called rock and roll music on society has in my view, and I may be old-fashioned, but... [etc]";
];

[ RipDownSub ;	! 178592 / 0x2b9a0
    R_Process(##Rip);
    rtrue;
];

[ XyzzySub ;	! 178600 / 0x2b9a8
    "For a moment you can almost hear a hoarse voice say something to you. But it passes.";
];

[ LagachSub ;	! 178656 / 0x2b9e0
    "You feel inexplicably powerful, but nothing happens. Perhaps you should have addressed yourself more precisely.";
];

[ ShoutSub ;	! 178728 / 0x2ba28
    "Try ~help~ for details of how to speak to people.";
];

[ ShantihSub ;	! 178764 / 0x2ba4c
    "For a moment you can almost hear thunder, as though it were saying something. But the moment passes.";
];

[ WaveSub local1 ;	! 178828 / 0x2ba8c
    if (noun notin player) {
        "But you aren't holding it.";
    }
    if (noun has hidden_rod) {
        if (daisy_chain in player && daisy_chain has worn && daisy_chain.number == 1) {
            score = score + 6;
            rod_score = rod_score + 6;
            print "Light pulses around the daisy chain, then leaps out to engulf ";
            Defart(noun);
            print " which melts into ";
            remove noun;
            local1 = noun.rod_assoc;
            itobj = local1;
            give local1 moved;
            give local1 unidentiifed_rod;
            move local1 to player;
            Indefart(local1);
            "!";
        }
        if (yellow_daisy in player && yellow_daisy has worn) {
            score = score + 6;
            rod_score = rod_score + 6;
            print "Light pulses from the daisy behind your ear, leaping out to engulf ";
            Defart(noun);
            print " which melts into ";
            remove noun;
            local1 = noun.rod_assoc;
            itobj = local1;
            give local1 moved;
            move local1 to player;
            if (local1 has rod_attr) {
                Defart(local1);
            } else {
                Indefart(local1);
            }
            "!";
        }
    }
    if (noun has rod_attr) {
        "That seems to be not quite how they work...";
    }
    if (noun has worn) {
        "You can't wave what you're wearing.";
    }
    print "You look ridiculous waving ";
    Defart(noun);
    ".";
];

[ StrikeSub ;	! 179164 / 0x2bbdc
    if (noun notin player) {
        "But you aren't holding it.";
    }
    if (noun hasnt rod_attr) {
        print "You ineffectually bash ";
        Defart(noun);
        " on the ground.";
    }
    if (noun has charged) {
        deadflag = DIED;
        "The already-charged rod explodes with cataclysmic violence, burying everything nearby in rubble!";
    }
    give noun charged;
    Achieved(SCORE_WAND);
    if (AfterRoutines() == true) {
        rtrue;
    }
    "The rod charges with etherial power, drawn up from the earth through ley lines...";
];

[ PointAtSub ;	! 179364 / 0x2bca4
    print "You point at ";
    Defart(noun);
    ".";
];

[ PointVagueSub ;	! 179384 / 0x2bcb8
    if (noun in Compass && adamantine_knight in location) {
        routine143448();
        rfalse;
    }
    if (noun has rod_attr) {
        "Please point it at something.";
    }
    "A useless gesture.";
];

[ PointSub local1 ;	! 179440 / 0x2bcf0
    if (noun notin player) {
        "But you aren't holding it.";
    }
    if (second in player) {
        "It's too fiddly pointing it at something you're holding.";
    }
    if (noun hasnt rod_attr) {
        "Ok. (Why?)";
    }
    if (noun hasnt charged) {
        "Nothing happens.";
    }
    Achieved(SCORE_AIMWAND);
    local1 = noun.rod_action;
    if (local1 == 65535[?]) {
        "** No rod routine **";
    }
    give noun ~charged;
    generic_globvar = local1();
    rtrue;
];

[ PlayCroquetSub ;	! 179588 / 0x2bd84
    "You'll have to be a little more explicit.";
];

[ DiagnoseSub ;	! 179616 / 0x2bda0
    "Hang on a moment... yes, you're still breathing. Keep it up!";
];

[ LeanSub ;	! 179660 / 0x2bdcc
    if (location ~= Folly) {
        "That won't achieve anything very much.";
    }
    if (second ~= Folly_tower) {
        "That isn't in conspicuous need of support.";
    }
    if (noun ~= old_timber_spar) {
        "That isn't a particularly good support.";
    }
    move old_timber_spar to Folly;
    old_timber_spar.initial = "The timber prop leans against the tottering Folly, supporting it.";
    give old_timber_spar ~moved;
    bean_pole.number = 0;
    give old_timber_spar general;
    give bean_pole ~general;
    "You lean the timber prop against the Folly tower, supporting it. (Better just hope you won't be needing the prop for anything else!)";
];

[ PropWithSub local1 ;	! 179880 / 0x2bea8
    local1 = noun;
    noun = second;
    second = local1;
    LeanSub();
    rtrue;
];

[ MilkSub ;	! 179896 / 0x2beb8
    if (noun == goat or herd_of_goats) {
        "Pour encourager les udders... But milking goats is no job for an amateur.";
    }
    "What?";
];

[ HypnotizeSub ;	! 179964 / 0x2befc
    if (second ~= nothing or gold_watch_on_a_chain) {
        "You don't seem to have a suitable focus.";
    }
    if (gold_watch_on_a_chain notin player) {
        "Unaided, you are unable to make any impression.";
    }
    print "You set the gold watch swinging, back and forth, spinning the light. ";
    if (noun == Old_Evans) {
        give Old_Evans general;
        "Old Evans, who is nine-tenths hypnotised most of the time anyway, succumbs easily.";
    }
    if (noun == player) {
        R_Process(##Sleep);
        rtrue;
    }
    print "But ";
    Defart(noun);
    " seems wilful enough to resist hypnosis.";
];

[ AnoppeSub ;	! 180196 / 0x2bfe4
    if (location ~= Lost_inside_the_Palace || Lost_inside_the_Palace hasnt general) {
        "Nothing happens.";
    }
    routine140220();
    rtrue;
];

[ SailSub ;	! 180228 / 0x2c004
    if (player notin skiff) {
        "You are not in any suitable means of transport.";
    }
    if (skiff in Warehouses_and_Port || skiff in Garden_Stream) {
        if (skiff in Warehouses_and_Port) {
            move skiff to Garden_Stream;
            location = Garden_Stream;
        } else {
            move skiff to Warehouses_and_Port;
            location = Warehouses_and_Port;
        }
        print "The skiff gathers wind from somewhere, which whistles past you until your eyes are blurred and watery. When you look around, you find that you are moored once again...^";
        R_Process(##Look);
        rtrue;
    }
    if (skiff has general) {
        "That seems to be happening whether you like it or not.";
    }
    give skiff general;
    move skiff to Harbour_Mouth;
    location = Harbour_Mouth;
    print "You set sail, and a light breeze propels your skiff...^";
    R_Process(##Look);
    rtrue;
];

[ AnointSub ;	! 180520 / 0x2c128
    "You have no oil.";
];

[ KnockSub ;	! 180532 / 0x2c134
    if (noun hasnt door) {
        print "(If you insist.)  ";
    }
    "There is no reply.";
];

[ WishSub ;	! 180568 / 0x2c158
    if (chicken_wishbone notin player) {
        "You make a wish.";
    }
    "The wishbone has already been pulled, and you have the part which lost.";
];

[ InscribeSub ;	! 180628 / 0x2c194
    "Graffiti is uncouth.";
];

[ InscribeOnSub ;	! 180644 / 0x2c1a4
    if (second has unidentiifed_rod) {
        "The silver plaque is extremely strong, and resists all attempts to mark it.";
    }
    InscribeSub();
    rtrue;
];

[ LieSub ;	! 180704 / 0x2c1e0
    "Whatever happened to truthfulness...";
];

[ LieDownSub ;	! 180732 / 0x2c1fc
    if (location == Servants_Room) {
        R_Process(##Enter,servants_bed);
        rtrue;
    }
    if (location == Alisons_Writing_Room) {
        R_Process(##Enter,comfortable_bed);
        rtrue;
    }
    "You lie down on the floor for a while and then get up again, feeling foolish.";
];

[ RamSub ;	! 180804 / 0x2c244
    if (game_section == T_MODERN) {
        "For heaven's sake, this is your own house.";
    }
    if (location == Coven_Cell) {
        "No, this is a goat. A ~ram~ is a kind of sheep.";
    }
    "Please don't ram anything. This computer only has limited RAM.";
];

[ GambleSub ;	! 180924 / 0x2c2bc
    "How, exactly?";
];

[ CloseWithSub ;	! 180936 / 0x2c2c8
    R_Process(##PutOn,second,noun);
    rtrue;
];

[ StackSub ;	! 180948 / 0x2c2d4
    R_Process(##Drop,noun);
    rtrue;
];

[ TurnWithSub ;	! 180956 / 0x2c2dc
    if (second ~= steel_wrench) {
        CDefart(second);
        " is unsuitable for turning things.";
    }
    if (location ~= Library_Storage) {
        print "(The wrench seems unnecessary, so you use bare hands.)^";
    }
    R_Process(##Turn,noun);
    rtrue;
];

[ StartSub ;	! 181040 / 0x2c330
    "You'll have to say exactly how to do that.";
];

[ IsDirection ;	! 181068 / 0x2c34c
    if (noun in Compass) {
        rtrue;
    }
    rfalse;
];

[ ConTopicJ w ;	! 181076 / 0x2c354
    consult_from = wn;
  .label181080;
    w = NextWordStopped();
    if (w ~= 'invalidDictWord65535' && (w ~= 'to' || action_to_be ~= ##Answer)) jump label181080;
    --wn;
    consult_words = wn - consult_from;
    if (consult_words == 0) {
        return 65535[?];
    }
    if (action_to_be == ##Ask or ##Answer or ##Tell) {
        w = wn;
        wn = consult_from;
        parsed_number = NextWord();
        if (parsed_number == 40278 && consult_words > 1) {
            parsed_number = NextWord();
        }
        wn = w;
        return 1[?];
    }
    return 0;
];

[ ConTopic w ;	! 181160 / 0x2c3a8
    consult_from = wn;
  .label181164;
    w = NextWordStopped();
    if (w ~= 'in' or 'invalidDictWord65535') jump label181164;
    if (w == 'invalidDictWord65535') {
        return 65535[?];
    }
    --wn;
    consult_words = wn - consult_from;
    if (consult_words == 0) {
        return 65535[?];
    }
    return 0;
];

[ Stub10 ;	! 181204 / 0x2c3d4
    rfalse;
];

[ Stub9 ;	! 181208 / 0x2c3d8
    rfalse;
];

[ Stub8 ;	! 181212 / 0x2c3dc
    rfalse;
];

[ Stub7 ;	! 181216 / 0x2c3e0
    rfalse;
];

[ Stub6 ;	! 181220 / 0x2c3e4
    rfalse;
];

[ Stub5 i ;	! 181224 / 0x2c3e8
    i = 0;
    rfalse;
];

[ Stub4 i ;	! 181232 / 0x2c3f0
    i = 0;
    rfalse;
];

[ Stub3 i ;	! 181240 / 0x2c3f8
    i = 0;
    rfalse;
];

[ Stub2 i ;	! 181248 / 0x2c400
    i = 0;
    rfalse;
];

[ Stub1 i j ;	! 181256 / 0x2c408
    i = 0;
    j = 0;
    rfalse;
];

[ NegativeOne ;	! 181264 / 0x2c410
    return 65535;
];

[ ConTopicI w ;	! 181268 / 0x2c414
    consult_from = wn;
  .label181272;
    w = NextWordStopped();
    if (w ~= 'on' or 'invalidDictWord65535') jump label181272;
    if (w == 'invalidDictWord65535') {
        return 65535[?];
    }
    --wn;
    consult_words = wn - consult_from;
    if (consult_words == 0) {
        return 65535[?];
    }
    return 0;
];

[ routine181312 local1 ;	! 181312 / 0x2c440
    local1 = NextWordStopped();
    --wn;
    return local1;
];

[ PaceOrPaces d ;	! 181324 / 0x2c44c
    if (d == 'pace' or 'step' or 'stride') {
        return 1[?];
    }
    if (d == 'paces' or 'steps' or 'strides') {
        return 2[?];
    }
    rfalse;
];

[ routine181352 local1 local2 local3 ;	! 181352 / 0x2c468
    local3 = wn;
    local1 = routine181312();
    if (local1 == 30945['by'?] or 33348['for'?]) {
        ++wn;
        local1 = routine181312();
    }
    if (local1 == 29622['a//'?] or 39117['single'?]) {
        ++wn;
        local1 = routine181312();
        if (PaceOrPaces(local1) ~= 1[?]) {
            wn = local3;
            rfalse;
        }
        ++wn;
        return 1[?];
    }
    if (PaceOrPaces(local1) == 1[?]) {
        ++wn;
        return 1[?];
    }
    local2 = TryNumber(wn);
    if (local2 < 0) {
        wn = local3;
        rfalse;
    }
    ++wn;
    local1 = routine181312();
    if (PaceOrPaces(local1) == 1[?] && local2 == 1[?] || (PaceOrPaces(local1) == 2[?] && local2 > 1)) {
        ++wn;
    }
    return local2;
];

[ CroquetMove w i flag j d ;	! 181484 / 0x2c4ec
    w = routine181312();
    if (w == 'forward' or 'forwards') {
        ++wn;
        return yard_dir;
    }
    if (w == 'back' or 'backward' or 'backwards') {
        ++wn;
        w = routine181312();
        flag = 1;
    }
    if (w == 'to') {
        ++wn;
        w = routine181312();
    }
    if (w == 'the') {
        ++wn;
        w = routine181312();
    }
    if (w == 'peg' or 'middle' or 'centre' or 'hoop' or 'hoops' or 'center') {
        ++wn;
        return 65535;
    }
    if (w == 'hole' && dug_hole in Croquet_Lawn) {
        ++wn;
        return 65534;
    }
    i = wn;
    if (w ~= 'invalidDictWord65535') {
        j = NounDomain(1[?],0,0);
    } else {
        j = 65535;
    }
    if (j <= top_object && j > 0) {
        d = j;
    } else {
        wn = i;
        d = yard_dir;
        if (d <= 0) {
            d = e_obj;
        } else if (flag == 1) {
            if (yard_dir == n_obj) {
                d = s_obj;
            }
            if (yard_dir == s_obj) {
                d = n_obj;
            }
            if (yard_dir == e_obj) {
                d = w_obj;
            }
            if (yard_dir == w_obj) {
                d = e_obj;
            }
            if (yard_dir == ne_obj) {
                d = sw_obj;
            }
            if (yard_dir == nw_obj) {
                d = se_obj;
            }
            if (yard_dir == sw_obj) {
                d = ne_obj;
            }
            if (yard_dir == se_obj) {
                d = nw_obj;
            }
        }
    }
    return d;
];

[ routine181728 local1 local2 ;	! 181728 / 0x2c5e0
    local1 = routine181352();
    if (local1 == 0) {
        if (routine181312() == 65535[?]) {
            return 65535[?];
        }
        local2 = CroquetMove();
        if (routine181312() == 65535[?]) {
            local1 = 1[?];
        } else {
            local1 = routine181352();
        }
        if (local1 == 0) {
            return 65535[?];
        }
    } else {
        local2 = CroquetMove();
    }
    global178 = local1;
    yard_dir = local2;
    return 0;
];

[ routine181800 local1 local2 ;	! 181800 / 0x2c628
    local1 = routine181352();
    if (local1 == 0) {
        return 65535[?];
    }
    local2 = CroquetMove();
    global178 = local1;
    yard_dir = local2;
    return 0;
];

[ readchar s i j k ;	! 181828 / 0x2c644
    j = wn * 4 + 1;
    k = parse->j;
    s = k + 24021;
    i = parse->(j - 1);
    if (i ~= true) {
        return 65535;
    }
    j = 65535;
    if (s->0 >= 97 && s->0 <= 122) {
        j = s->0 - 97 + 1;
    }
    if (s->0 >= 65 && s->0 <= 90) {
        j = s->0 - 65 + 1;
    }
    if (j == 65535) {
        return 65535;
    }
    parsed_number = j;
    ++wn;
    return 1;
];

[ PageScreen s more c ;	! 181952 / 0x2c6c0
    if (more == true) {
        print "(Press H for more, or SPACE to return.)^^";
    }
    print (string) s;
    new_line;
    new_line;
    @read_char 1 0 0 -> c;
    if (c == 'H' or 'h') {
        rfalse;
    }
    rtrue;
];

[ MoreAmusements ;	! 182012 / 0x2c6fc
    if (menu_item == 1) {
        if (PageScreen("Drop the robot mouse where Austin can get at it",true) == 1) {
            return 2;
        }
        if (PageScreen("Shut Austin out of the attic with the trap door") == 1) {
            return 2;
        }
        if (PageScreen("Ram or knock on various doors") == 1) {
            return 2;
        }
        if (PageScreen("Cast all the rods on yourself") == 1) {
            return 2;
        }
        if (PageScreen("Ask the demon and angel about Heaven and Hell") == 1) {
            return 2;
        }
        if (PageScreen("Eat a genuine Ekmek special (look it up in the dictionary for details)") == 1) {
            return 2;
        }
        "Write your own Inform adventure, and so revenge yourself on the author";
    }
    if (menu_item == 2) {
        "Callimachus (c. 300-240 BC), a former schoolteacher in Alexandria, produced the first library catalogue: a 120-part organised history of literature to date (almost all lost now, like much of its subject matter). He was favoured at court and celebrated for his epigrams (about 60 of which survive in the ~Greek Anthology~) but denounced by critics for being unable to write epics, which he detested (~big book, big bore~). Apollonius, the head librarian c. 260-247, was a former pupil with exactly opposite views, who brought out a 6000-line epic on the Argonauts, whereupon the quarrel grew so personal and bitter that Apollonius was driven into retirement.";
    }
    if (menu_item == 3) {
        "Sleep cold at someone's ^Door as, shivering, ^I lie tonight at ^Yours. The neighbours weep ^To see me here, but ^Who will weep for you, ^Crouched on a doorstep ^When the grey hairs come? ^^ -- translation by Edward Lucie-Smith";
    }
    if (menu_item == 4) {
        if (PageScreen("Other anagrams of ~Marie Swelldon~, found by Michael Kinyon, include...",true) == 1) {
            return 2;
        }
        if (PageScreen("Demeanor Wills") == 1) {
            return 2;
        }
        if (PageScreen("Domineer Walls") == 1) {
            return 2;
        }
        if (PageScreen("Amino Dwellers") == 1) {
            return 2;
        }
        if (PageScreen("Enrolled Swami") == 1) {
            return 2;
        }
        if (PageScreen("Lemonade Swirl") == 1) {
            return 2;
        }
        if (PageScreen("Mellowed Rains") == 1) {
            return 2;
        }
        if (PageScreen("Dowel Minerals") == 1) {
            return 2;
        }
        if (PageScreen("Seminole Drawl") == 1) {
            return 2;
        }
        if (PageScreen("Allowed Miners") == 1) {
            return 2;
        }
        if (PageScreen("Almoner Wields") == 1) {
            return 2;
        }
        if (PageScreen("Mellows Rained") == 1) {
            return 2;
        }
        if (PageScreen("Mineral Slowed") == 1) {
            return 2;
        }
        if (PageScreen("Moraine Dwells") == 1) {
            return 2;
        }
        if (PageScreen("Mellow Sardine") == 1) {
            return 2;
        }
        if (PageScreen("Sawmill Redone") == 1) {
            return 2;
        }
        if (PageScreen("Soldier Lawmen") == 1) {
            return 2;
        }
        if (PageScreen("Swindle Morale") == 1) {
            return 2;
        }
        "Swollen Admire";
    }
    if (menu_item == 5) {
        "To those who wrote to suggest ~wistaria~ be spelt ~wisteria~: ^The genus is named after the American anatomist Caspar Wistar (1761-1818), so ~wistaria~ is correct, but the mistake was introduced by Thomas Nuttall, who originally christened the family. Ironically, American dictionaries side with Nuttall and English ones with Wistar, as far as I can tell.";
    }
    if (menu_item == 6) {
        if (PageScreen("The 1970s robot mouse is capable of speech recognition.",true) == 1) {
            return 2;
        }
        if (PageScreen("Mentioning a bridge game (between Sir Joshua Meldrewe and the Prince of Wales) which took place a century before the invention of bridge. (In this release, they play piquet.)") == 1) {
            return 2;
        }
        if (PageScreen("Locating Alexandria in ~Upper Egypt~. Actually it's in Lower Egypt - the Nile flows from south to north.") == 1) {
            return 2;
        }
        if (PageScreen("The ~brass~ key is no longer really brass (examine it!) since brass is unmagnetic.") == 1) {
            return 2;
        }
        if (PageScreen("The lighthouse in the fifth century BC, the period of city states, is named after the Pharos, yet to be built in Alexandria during the Hellenic era. (Quinquiremes are contemporary with the frieze, though.)") == 1) {
            return 2;
        }
        "Not really a mistake, just the pace of history: the English pub licensing laws which close the village pub in the afternoon have, since June 1993, been repealed.";
    }
    if (menu_item == 7) {
        "There are two ancient languages: a hieroglyphic and a demotic script, the important clue being the Rosetta stone to compare the two. ^^The hieroglyphics are loosely based on the beautiful system devised by Michael Berlyn and Patricia Fogleman for their excellent game, ~Infidel~, though I have taken care not to reveal any of their answers. ^^The demotic script (written right to left) is my own invention, but the numbers are Etruscan. (And are just about the only Etruscan words deciphered - they were found on a gambler's die.)";
    }
    rtrue;
];

[ EndMenuDisplay ;	! 183780 / 0x2cde4
    DoMenu("^^     Frivolous things to do^     About Callimachus and Apollonius^     An epigram by Callimachus^     Salmon Wielder^     Wistaria or wisteria?^     Great Curses mistakes^     The ancient languages^",EndMenu,MoreAmusements);
    rtrue;
];

[ EndMenu ;	! 183792 / 0x2cdf0
    if (menu_item == 0) {
        submenu_header = "For your amusement";
        submenu_number = 9;
        return 7;
    }
    if (menu_item == 1) {
        submenu_header = "Frivolous things to do";
        submenu_number = 11;
    }
    if (menu_item == 2) {
        submenu_header = "About Callimachus and Apollonius";
        submenu_number = 16;
    }
    if (menu_item == 3) {
        submenu_header = "An epigram by Callimachus";
        submenu_number = 12;
    }
    if (menu_item == 4) {
        submenu_header = "Salmon Wielder";
        submenu_number = 7;
    }
    if (menu_item == 5) {
        submenu_header = "Wistaria or wisteria?";
        submenu_number = 10;
    }
    if (menu_item == 6) {
        submenu_header = "Great Curses mistakes";
        submenu_number = 10;
    }
    if (menu_item == 7) {
        submenu_header = "The ancient languages";
        submenu_number = 10;
    }
    rtrue;
];

[ AmusementMenu ;	! 183900 / 0x2ce5c
    if (menu_item == 1) {
        if (PageScreen("Giving Aunt Jemima the wrapped parcel;",true) == 1) {
            return 2;
        }
        if (PageScreen("Or the chocolate biscuit;") == 1) {
            return 2;
        }
        if (PageScreen("Or kissing her;") == 1) {
            return 2;
        }
        if (PageScreen("Attracting Bateau Phlebas by waving the poster (which can be torn down);") == 1) {
            return 2;
        }
        if (PageScreen("Casting the Rod of Fire at the medicine bottle to try and open it (as advised by demon);") == 1) {
            return 2;
        }
        if (PageScreen("Trying the postcard in the slide projector;") == 1) {
            return 2;
        }
        if (PageScreen("Or the Alexandrian sketch when it's still framed;") == 1) {
            return 2;
        }
        "Feeding Austin the chicken wishbone.";
    }
    if (menu_item == 2) {
        if (PageScreen("Eighty-one. The inspiration for the radio station came about when the author was driving at midnight through Oxfordshire and the local station played, in succession, the Moonlight Sonata, the Four Seasons, You Take My Breath Away and Gold. So the radio plays the 80 most hackneyed radio tunes the author could think of.",true) == 1) {
            return 2;
        }
        "For the eighty-first, the Sibelius violin concerto, see the Inform technical manual.";
    }
    if (menu_item == 3) {
        if (PageScreen("Not counting everyday death, winning or the various ways of almost but not quite coming to an end...",true) == 1) {
            return 2;
        }
        if (PageScreen("Missing the point entirely") == 1) {
            return 2;
        }
        if (PageScreen("Being spooked") == 1) {
            return 2;
        }
        if (PageScreen("In checkmate") == 1) {
            return 2;
        }
        if (PageScreen("Being transported to Australia") == 1) {
            return 2;
        }
        if (PageScreen("Facing a prison term as a terrorist") == 1) {
            return 2;
        }
        if (PageScreen("Being annihilated by a temporal paradox") == 1) {
            return 2;
        }
        if (PageScreen("Becoming a constellation") == 1) {
            return 2;
        }
        "Disembodying the entire universe";
    }
    if (menu_item == 4) {
        if (PageScreen("If magic, the daisy chain rustles (according to inventories) when you are carrying something which could turn into a rod if waved.",true) == 1) {
            return 2;
        }
        if (PageScreen("Likewise, the yellow daisy (from Roman Britain) twitches.") == 1) {
            return 2;
        }
        "The vanity mirror does not reflect rods or things which become rods (unless you're so vain as to polish it, after which it reflects everything).";
    }
    if (menu_item == 5) {
        "Apart from the projector beam's effects, looking into the ball shows one of twelve little scenes, corresponding to the twelve main areas of the game.";
    }
    if (menu_item == 6) {
        "The angel and the demon bear a surprising resemblance to them. ^^Sadly, Donald Sutherland died a few days ago (as I write this). I'm slightly sorry now to have typecast him.";
    }
    if (menu_item == 7) {
        if (PageScreen("Not only the title, but the plan and a good deal of the incidental symbolism of the Unreal City were taken from early poems of T. S. Eliot (which owed a bit to Baudelaire), and I recommend them (apart from the great interest of the poems themselves) to any who think such elucidation worth the trouble.",true) == 1) {
            return 2;
        }
        if (PageScreen("The handkerchief is not Jemima's but belongs to J. Alfred Prufrock (though cf. ~The Waste Land~ l. 178).") == 1) {
            return 2;
        }
        "The graffiti behind the poster is the closing words of ~The Waste Land~, which the Thunder said. ~Shantih~ is not, as one inspired player guessed, meant as an anagram of ~has hint~.";
    }
    if (menu_item == 8) {
        "59. Nine can be carried, plus another 21 trumps and 29 plainer cards in the pack. I have obviously departed from the exact constitution of the Tarot pack (with which I am not familiar) to suit my own convenience.";
    }
    if (menu_item == 9) {
        if (PageScreen("By dropping it down the empty dumbwaiter shaft;",true) == 1) {
            return 2;
        }
        if (PageScreen("Putting it at the foot of the shaft, and dropping the dumbwaiter on it;") == 1) {
            return 2;
        }
        if (PageScreen("Running over it in the garden roller;") == 1) {
            return 2;
        }
        if (PageScreen("Dropping it from the top of the beanstalk;") == 1) {
            return 2;
        }
        if (PageScreen("Or from the top of the mast of the Lady Magdalena;") == 1) {
            return 2;
        }
        if (PageScreen("Aunt Jemima can open it...") == 1) {
            return 2;
        }
        "...and so can the jaws of Dobbin (Doktor Stein's goat).";
    }
    if (menu_item == 10) {
        "Annoyance of the player: it's the biggest red herring in the game. It scores -50, the demon advises you to hang onto it at all times - and it was cursed.";
    }
    rtrue;
];

[ TriviaMenu ;	! 185096 / 0x2d308
    DoMenu("^^     1. What are the ~good but wrong guesses~?^     2. How many songs does the radio play?^     3. In what *** ways *** can the game end?^     4. What are the secret ways to detect a Rod?^     5. What can you see in the crystal ball?^     6. Where are Dame Judi Dench and Donald Sutherland?^     7. Explain the handkerchief initials and the graffiti.^     8. How many tarot cards are there altogether?^     9. How can the medicine bottle be opened?^     10. What is the mascot for in the premonition?^",TriviaQuestion,AmusementMenu);
    rtrue;
];

[ TriviaQuestion ;	! 185108 / 0x2d314
    if (menu_item == 0) {
        submenu_header = "Trivia questions";
        submenu_number = 8;
        return 10;
    }
    if (menu_item == 1) {
        submenu_header = "1. What are the ~good but wrong guesses~?";
        submenu_number = 20;
    }
    if (menu_item == 2) {
        submenu_header = "2. How many songs does the radio play?";
        submenu_number = 19;
    }
    if (menu_item == 3) {
        submenu_header = "3. In what *** ways *** can the game end?";
        submenu_number = 20;
    }
    if (menu_item == 4) {
        submenu_header = "4. What are the secret ways to detect a Rod?";
        submenu_number = 22;
    }
    if (menu_item == 5) {
        submenu_header = "5. What can you see in the crystal ball?";
        submenu_number = 20;
    }
    if (menu_item == 6) {
        submenu_header = "6. Where are Dame Judi Dench and Donald Sutherland?";
        submenu_number = 25;
    }
    if (menu_item == 7) {
        submenu_header = "7. Explain the handkerchief initials and the graffiti.";
        submenu_number = 27;
    }
    if (menu_item == 8) {
        submenu_header = "8. How many tarot cards are there altogether?";
        submenu_number = 22;
    }
    if (menu_item == 9) {
        submenu_header = "9. How can the medicine bottle be opened?";
        submenu_number = 20;
    }
    if (menu_item == 10) {
        submenu_header = "10. What is the mascot for in the premonition?";
        submenu_number = 23;
    }
    rtrue;
];

[ WhichMenu ;	! 185256 / 0x2d3a8
    if (menu_item == 1) {
        EndMenuDisplay();
        return 2;
    }
    if (menu_item == 2) {
        TriviaMenu();
        return 2;
    }
    return 2;
];

[ routine185280 ;	! 185280 / 0x2d3c0
    DoMenu("^^     For your amusement^     Trivia questions^",HintSubmenu,WhichMenu);
    rtrue;
];

[ HintSubmenu ;	! 185292 / 0x2d3cc
    if (menu_item == 0) {
        submenu_header = "Amusements";
        submenu_number = 5;
        return 2;
    }
    if (menu_item == 1) {
        submenu_header = "For your amusement";
        submenu_number = 9;
    }
    if (menu_item == 2) {
        submenu_header = "Trivia questions";
        submenu_number = 8;
    }
    rtrue;
];

[ StartSplash i ;	! 185336 / 0x2d3f8
    @erase_window 65535;
    print "^^^^^^^^^^^^^";
    i = 0->33;
    if (i == 0) {
        i = 80;
    }
    i = (i - 50) / 2;
    style bold;
    0-->8 = 2 | 0-->8;
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .label185404;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label185404;
    }
    print "               Welcome to CURSES^";
    style roman;
    print "^^";
    generic_globvar = i;
    if (generic_globvar >= 1) {
      .label185461;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label185461;
    }
    print "         [Please press SPACE to begin.]^";
    0-->8 = 65533 & 0-->8;
    i = random(3);
    if (i == 1) {
        quote_line-->0 = "Nine times she waved the fluttering wimple round,";
        quote_line-->1 = "And made a little plot of magic ground.";
        quote_line-->2 = "And in that daisied circle, as men say,";
        quote_line-->3 = "Is Merlin prisoner till the judgement day...";
        quote_line-->4 = 0;
        quote_line-->5 = "-- Matthew Arnold, Tristram and Iseult III (1852)";
        generic_globvar = quote_display(6,49,quote_line);
    }
    if (i == 2) {
        quote_line-->0 = "Curses are like young chickens,";
        quote_line-->1 = "they always come home to roost.";
        quote_line-->2 = 0;
        quote_line-->3 = "-- Robert Southey (1774-1843),";
        quote_line-->4 = "   ~The Curse of Kehama~";
        generic_globvar = quote_display(5,31,quote_line);
    }
    if (i == 3) {
        quote_line-->0 = "Let Rome in Tiber melt, and the wide arch";
        quote_line-->1 = "Of the ranged empire fall! Here is my space.";
        quote_line-->2 = "Kingdoms are clay.";
        quote_line-->3 = 0;
        quote_line-->4 = "-- Shakespeare, ~Antony and Cleopatra~ I:1";
        generic_globvar = quote_display(5,44,quote_line);
    }
  .label185661;
    @read_char 1 0 0 -> i;
    if (i ~= 32 or 10 or 13) jump label185661;
    @erase_window 65535;
    rtrue;
];

[ routine185680 ;	! 185680 / 0x2d550
    rtrue;
];

[ StatusLinePrinter columns local2 ;	! 185684 / 0x2d554
    columns = 0->33;
    if (columns == 0) {
        columns = 80;
    }
    0-->8 = 2 | 0-->8;
    if (pretty_mode == true) {
        @split_window 2;
    } else {
        @split_window 1;
    }
    @buffer_mode false;
    @set_window 1;
    style reverse;
    if (current_game_sec ~= location.section) {
        displaying_quote = true;
    }
    current_game_sec = location.section;
    if (deadflag > 0 || undone_flag == 1) {
        displaying_quote = true;
    }
    if (displaying_quote == true) {
        @set_cursor 1 1;
        generic_globvar = columns;
        if (generic_globvar >= 1) {
          .label185779;
            print ' ';
            generic_globvar = generic_globvar - 1;
            if (generic_globvar ~= 0) jump label185779;
        }
        if (pretty_mode == true) {
            @set_cursor 2 1;
            generic_globvar = columns;
            if (generic_globvar >= 1) {
              .label185808;
                print ' ';
                generic_globvar = generic_globvar - 1;
                if (generic_globvar ~= 0) jump label185808;
            }
        }
    }
    if (displaying_quote == true || short_loc_var ~= location) {
        @set_cursor 1 2;
        before_short_desc = true;
        PrintShortName(location);
        before_short_desc = false;
        generic_globvar = 20[rod_of_infinity?];
        if (generic_globvar >= 1) {
          .label185853;
            print ' ';
            generic_globvar = generic_globvar - 1;
            if (generic_globvar ~= 0) jump label185853;
        }
        short_loc_var = location;
        displaying_quote = true;
    }
    if (pretty_mode == false) {
        local2 = columns - 15;
        @set_cursor 1 local2;
        save_score = score;
        print score, "/", turns, "   ";
    } else {
        if (displaying_quote == true) {
            local2 = columns - 35;
            @set_cursor 1 local2;
            if (deadflag > 0) {
                print "Final score: ";
            } else {
                print "Score: ";
            }
        } else {
            local2 = columns - 28;
            @set_cursor 1 local2;
        }
        if (displaying_quote == true || save_score ~= score) {
            print score;
            if (deadflag > 0) {
                print "/550";
            }
        }
        @set_cursor 2 local2;
        if (displaying_quote == true) {
            print "Turns: ";
        }
        print turns;
        if (displaying_quote == true || save_game_sec ~= game_section) {
            game_section = location.section;
            local2 = columns - 20;
            @set_cursor 2 local2;
            if (game_section == T_MODERN) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_UNREAL) {
                print " October 5th, 1922";
            }
            if (game_section == T_HAMBURG) {
                print "October 31st, 1988";
            }
            if (game_section == T_GARDEN) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_GARDEN_PAST) {
                print "  March 14th, 1808";
            }
            if (game_section == T_ANCIENT_BRITAIN) {
                print "  Sixth century AD";
            }
            if (game_section == T_CATACOMBS) {
                print "    June 3rd, 1993";
            }
            if (game_section == T_ALEXANDRIA) {
                print "  Winter of 275 BC";
            }
            if (game_section == T_NE_OF_HOME) {
                print "    June 3rd, 1993";
            }
            if (game_section == (T_DREAMING|T_UNREAL) or T_SPIRIT_WORLD or T_TAROT or T_AFTERLIFE) {
                print "                  ";
            }
            @set_cursor 2 2;
            if (game_section == T_MODERN) {
                print "(in Meldrew Hall)       ";
            }
            if (game_section == T_UNREAL) {
                print "(in the Unreal City)    ";
            }
            if (game_section == T_HAMBURG) {
                print "(Hamburg by night)      ";
            }
            if (game_section == T_TAROT) {
                print "(in the Tarot box)      ";
            }
            if (game_section == T_GARDEN) {
                print "(in the gardens)        ";
            }
            if (game_section == T_GARDEN_PAST) {
                print "(in the gardens)        ";
            }
            if (game_section == T_ANCIENT_BRITAIN) {
                print "(in the Master Game)    ";
            }
            if (game_section == T_DREAMING or (T_DREAMING|T_UNREAL)) {
                print "(dreaming?)             ";
            }
            if (game_section == T_CATACOMBS) {
                print "(in the catacombs)      ";
            }
            if (game_section == T_ALEXANDRIA) {
                print "(in Alexandria)         ";
            }
            if (game_section == T_NE_OF_HOME) {
                print "(northeast of the House)";
            }
            if (game_section == T_SPIRIT_WORLD or T_AFTERLIFE) {
                print "                        ";
            }
        }
    }
    style roman;
    @buffer_mode true;
    @set_cursor 1 1;
    @set_window 0;
    0-->8 = 65533 & 0-->8;
    displaying_quote = false;
    if (bool_array_recently_set ~= 65535) {
        display_quote(bool_array_recently_set);
        bool_array_recently_set = 65535;
    }
    rtrue;
];

[ quote_display lines margin lines columns center cursor i l ;	! 186572 / 0x2d8cc
    @split_window (lines + 6);
    @set_window 1;
    columns = 0->33;
    if (columns == 0) {
        columns = 80;
    }
    center = (columns - margin) / 2;
    style reverse;
    columns = center - 2;
    cursor = 5;
    i = 0;
    @set_cursor 4 columns;
    generic_globvar = margin + 4;
    if (generic_globvar >= 1) {
      .label186632;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label186632;
    }
  .label186644;
    @set_cursor cursor columns;
    generic_globvar = margin + 4;
    if (generic_globvar >= 1) {
      .label186660;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label186660;
    }
    @set_cursor cursor center;
    l = lines-->i;
    if (l ~= 0) {
        print (string) l;
    }
    ++cursor;
    ++i;
    if (i ~= lines) jump label186644;
    @set_cursor cursor columns;
    generic_globvar = margin + 4;
    if (generic_globvar >= 1) {
      .label186712;
        print ' ';
        generic_globvar = generic_globvar - 1;
        if (generic_globvar ~= 0) jump label186712;
    }
    @buffer_mode true;
    style roman;
    @set_window 0;
    @split_window 1;
    @output_stream 65535;
    print "[ ";
    i = 0;
  .label186748;
    columns = lines-->i;
    if (columns ~= 0) {
        print (string) columns;
    }
    ++i;
    if (i == lines) {
        print "]^^";
    } else {
        print "^  ";
        jump label186748;
    }
    @output_stream 1;
    rtrue;
];

! Code appears to end here. If the strings below look like
! garbage, try adding this directive to the symbol file:
!   FalseEnd	0x2d8cc	1

! 186788 (0x2d9a4): "CURSES"
! 186796 (0x2d9ac): "^An Interactive Diversion^Copyright (c) 1993, 1994, 1995 by Graham Nelson.^"
! 186864 (0x2d9f0): "951024"
! 186872 (0x2d9f8): "5/12"
! 186880 (0x2da00): "a"
! 186884 (0x2da04): "You can't go that way."
! 186900 (0x2da14): "the"
! 186904 (0x2da18): "the"
! 186908 (0x2da1c): "the"
! 186912 (0x2da20): "the"
! 186916 (0x2da24): "the"
! 186920 (0x2da28): "the"
! 186924 (0x2da2c): "the"
! 186928 (0x2da30): "the"
! 186932 (0x2da34): "the"
! 186936 (0x2da38): "the"
! 186940 (0x2da3c): "the"
! 186944 (0x2da40): "the"
! 186948 (0x2da44): "Darkness"
! 186956 (0x2da4c): "It is pitch dark, and you can't see a thing."
! 186980 (0x2da64): "As good-looking as ever."
! 187000 (0x2da78): "Nameless item"
! 187012 (0x2da84): "your former self"
! 187024 (0x2da90): "a"
! 187028 (0x2da94): "featureless mahogany rods"
! 187044 (0x2daa4): "the"
! 187048 (0x2daa8): "Astonishing!  One of the three high Rods!"
! 187076 (0x2dac4): "the"
! 187080 (0x2dac8): "This is rather dangerous, I'm afraid. Use only on vegetative matter."
! 187124 (0x2daf4): "Well, that's not very useful, is it?  I'd go on strike if I were you."
! 187172 (0x2db24): "It has no horticultural application."
! 187196 (0x2db3c): "a"
! 187200 (0x2db40): "Well, where might you have seen infinity before?"
! 187232 (0x2db60): "Perhaps you should look up ~husbandry~ in a dictionary."
! 187268 (0x2db84): "Bronze is the key here. Have you seen any other bronze anywhere?"
! 187308 (0x2dbac): "Far, far too dangerous. The age of martyrs in the church is long gone, you know."
! 187360 (0x2dbe0): "Well, if there's such a thing as luck, maybe this would help."
! 187400 (0x2dc08): "a"
! 187404 (0x2dc0c): "Use only at heated moments, when affairs are delicately balanced."
! 187448 (0x2dc38): "the"
! 187452 (0x2dc3c): "the"
! 187456 (0x2dc40): "The High Rods of Life, Love and Death lean together in a pyramid at the top of the steep slope, balanced rather delicately."
! 187536 (0x2dc90): "A treasure in every sense, the orb pulsates with golden radiance."
! 187580 (0x2dcbc): "A blooming shrub, gay with red flowers, is being nursed in a wide round tub under the wall here."
! 187636 (0x2dcf4): "the"
! 187640 (0x2dcf8): "Tarot cards"
! 187648 (0x2dd00): "   Things to do:^^   1. Find map^   2. Phone airport to check parking^   3. Health forms...^^and so on. Let's face it, 1. is more enticing than the rest put together."
! 187764 (0x2dd74): "Immensely useful, that."
! 187784 (0x2dd88): "an"
! 187788 (0x2dd8c): "The torch has a battery compartment which can be reached by opening it up."
! 187832 (0x2ddb8): "Pity you can't change the batteries."
! 187856 (0x2ddd0): "an"
! 187860 (0x2ddd4): "Oatmeal covered with plain chocolate, since you ask."
! 187896 (0x2ddf8): "I bet you didn't know that chocolate biscuit manufacturers are damned in perpetuity?  I'm afraid the chapters about that in the Old Testaments were lost, though, and now no-one can remember why."
! 188020 (0x2de74): "The attics, full of low beams and awkward angles, begin here in a relatively tidy area which extends north, south and east. The wooden floorboards seem fairly sound, just as well considering how heavy all these teachests are. But the old wiring went years ago, and there's no electric light."
! 188196 (0x2df24): "A hinged trapdoor in the floor stands open, and light streams in from below."
! 188244 (0x2df54): "There is a closed trapdoor in the middle of the floor."
! 188276 (0x2df74): "some"
! 188280 (0x2df78): "Open-topped. You could easily look inside, if so minded."
! 188320 (0x2dfa0): "the"
! 188324 (0x2dfa4): "It was to have been the Honourable Peter Meldrew's life's work, a two-volume edition giving the definitive family history. Unfortunately, although he claimed to have hunted for evidence to the ends of the earth, he never could find a detail he wanted for volume I, and it was never published. Somehow, this typifies your family, and consulting this worthy book about your ancestors makes you realise what an uncanny knack they had for never quite achieving anything.^^Unless, of course, you count having an awful lot of children. So many Meldrews are listed here that you'll have to look them up individually."
! 188692 (0x2e114): "What a boring old book!  There's nobody worth looking up."
! 188728 (0x2e138): "an"
! 188732 (0x2e13c): "A graceful lady's box, bearing the initials A. M. and engraved with a drawing of what seems to be a rabbit's foot."
! 188804 (0x2e184): "In one corner is a jewellery box, which had previously been hidden by the open trapdoor."
! 188860 (0x2e1bc): "Try investigating the world of the romantic novel, out on the balconies of life."
! 188908 (0x2e1ec): "Actually a four-leafed sprig of herb paris (Paris Quadrifolia) in the shape of a fourfold true-love knot. But that was good enough for Alison."
! 189004 (0x2e24c): "Not much use as it is, is it?"
! 189024 (0x2e260): "Once upon a time, servants in great houses lived in awful little crevices and excuses for rooms like this one. They must have been in permanent danger of suffocation, for there are no windows and only a doorway to the west. A bed is still kept here, and the sight of it brings on drowsiness in all this warm stuffy air. All you want to do is curl up and sleep."
! 189244 (0x2e33c): "Hobson's"
! 189252 (0x2e344): "Lots of naughty words in that one."
! 189276 (0x2e35c): "~Hobson's: A Choice Classical Dictionary~. It claims to have numerous entries."
! 189332 (0x2e394): "There's a little book on the tiny bedside table."
! 189364 (0x2e3b4): "an"
! 189368 (0x2e3b8): "This is an old Biblioll College scarf, made by Dunn and Co. (naturally). It has four stripes: royal blue, emerald, dark grey and scarlet."
! 189460 (0x2e414): "An old striped scarf hangs up behind the doorway."
! 189492 (0x2e434): "The very height of fashion, if you ignore the colours and wear it regardless."
! 189540 (0x2e464): "A tight door stands open in the northern wall, giving onto the servants' staircase."
! 189588 (0x2e494): "Scruffy old furniture is piled up here: armchairs with springs coming out, umbrella stands, a badly scratched cupboard, a table with one leg missing... You try to remember why you keep all this rubbish, and fail. Anyway the attic continues to the southeast."
! 189748 (0x2e534): "The attic turns from north to southeast here."
! 189776 (0x2e550): "Nothing there, but that cupboard looks interesting."
! 189808 (0x2e570): "It has a calm, soothing effect."
! 189828 (0x2e584): "A patent ~Harrison~ bird-whistle, according to the slogan on one side."
! 189876 (0x2e5b4): "Shame the wrapping paper won't come off."
! 189900 (0x2e5cc): "Far too nice to give to anybody else. In fact..."
! 189936 (0x2e5f0): "some"
! 189940 (0x2e5f4): "The reindeer have enormous significance."
! 189968 (0x2e610): "It is addressed to the house, and postmarked 1963, but has no message. Odd, that."
! 190020 (0x2e644): "There's no message there to read."
! 190040 (0x2e658): "These bottles can even survive long drops, so perhaps you should try fire."
! 190088 (0x2e688): "~Antidote only: no preventative effect.~"
! 190116 (0x2e6a4): "This drug is for fun, it isn't an antidote. And it tastes gorgeous..."
! 190164 (0x2e6d4): "The air is dusty and warm, almost making you choke in this rather empty area. The attic turns from northwest to east, and there is also a tight doorway leading west. A short flight of wooden steps leads down and to the south."
! 190296 (0x2e758): "(Aunt Jemima has two cats, Jane and Austin, but she finds Austin especially annoying - about the only point you have ever agreed with her about.)^^Austin, a ginger with a long tail and an uncompromisingly lazy expression, is the kind of cat who hates being pushed around."
! 190460 (0x2e7fc): "Austin, your incorrigible ginger cat, lounges around here."
! 190500 (0x2e824): "This is a roughly-furnished photographer's dark room, used by your grandfather years ago. There's nothing much here now, since you threw the chemicals out in case the children found them."
! 190612 (0x2e894): "The only doorway is back east."
! 190632 (0x2e8a8): "the old"
! 190636 (0x2e8ac): "Mounted on a plaque is an old sepia photograph of a man."
! 190672 (0x2e8d0): "The photograph is one of the very early ones which looks as if it was taken in the dark because the chemicals have gradually oxidised. The poor man in the frame (Mr Roger Meldrew, Esquire) looks as if he was propped up by a big clamp to hold him still for five minutes, and that's because he was."
! 190844 (0x2e97c): "It is attached to the ceiling."
! 190860 (0x2e98c): "You bump your head on the cord hanging from the ceiling, for the umpteenth time."
! 190904 (0x2e9b8): "Things do look subtly different in this light."
! 190932 (0x2e9d4): "When you can get this working, perhaps you should take it somewhere prominent."
! 190980 (0x2ea04): "The kind of black box which often sits on top of a camera, used to illuminate otherwise dim scenes. It has an openable compartment on the side, with room left inside for a battery and a timer mechanism (which seem to be optional extras)."
! 191120 (0x2ea90): "A rather more modern photographer's flash lies on a shelf to one side."
! 191168 (0x2eac0): "Once upon a time, this small circular room had a dome and a telescope, but it leaked dreadfully and so now there's a proper roof.^^A circular mural painted with the signs of the zodiac is interrupted by a short flight of stairs leading up to the north, a smoke detector, a west doorway to a shadowy alcove and the continuation of the stairs down and to the south."
! 191384 (0x2eb98): "It isn't at all clear on what principle the detector works. It looks like a smoke detector, certainly. But you just left the contractors to sort out all those boring fire prevention matters for themselves.^^They were a slap-dash firm, too, from what you remember. They put the little white thing high up, right in the middle of the Capricorn scene on the mural. And even if there was a fire, chances are it would be useless."
! 191636 (0x2ec94): "Mounted on the old telescope stand is what looks like a solid glass ball."
! 191680 (0x2ecc0): "Once upon a time, the house library was used as a gun-room, and all the unwanted books kept up here. Now this is just another awkward cranny, with a water tank and some pipes in one corner which are something to do with the central heating."
! 191824 (0x2ed50): "From here, you can only squeeze back east to the observatory."
! 191860 (0x2ed74): "The joint on the water pipe looks none too sturdy."
! 191888 (0x2ed90): "Don't bother reading or thinking about it. Nothing to do with your family."
! 191936 (0x2edc0): "A romantic novel and a book of poetry are the only books left, and they're propping up a water pipe near a rather loose joint - it really is time you called a plumber to sort this one out."
! 192048 (0x2ee30): "~Coronets for the Cotton Girl~, by Miss Marie Swelldon, published London, 1912. It's all about the happy-go-lucky daughter of a Yorkshire mill owner and her adventures marrying into the aristocracy."
! 192184 (0x2eeb8): "My my, a golden age for clear, simple poetry. At last, an end to the dreary obscurity of Tennyson, Kipling and Hardy."
! 192260 (0x2ef04): "This is where you ought to have left the wretched map, in the family lumber-room of souvenirs and holiday snaps. You checked it thoroughly earlier, and can't bear the thought of searching it all again. A slide projector is aimed at the whitewashed south wall, one of the outside walls of the house. The only way to go is back up to the observatory."
! 192464 (0x2efd0): "It has an on/off switch on the side, and a slot for holding whatever is to be projected. There is also a little dial on the back, perhaps for the focus."
! 192552 (0x2f028): "some"
! 192556 (0x2f02c): "That is a difficult puzzle, yes."
! 192580 (0x2f044): "In the north wall is an open cupboard door, large enough to step inside."
! 192624 (0x2f070): "In the north wall is an intriguing closed cupboard door."
! 192660 (0x2f094): "The winding attic comes to a dead end here, and particularly dirty it is too, what with soot everywhere from the broken old chimney sweeping gear."
! 192748 (0x2f0ec): "It might be handy, if only it could carry anything."
! 192784 (0x2f110): "Great Scott!  That old canvas rucksack must be the very one your famous ancestor, the African explorer Ebenezer Meldrew, brought back from the Zambezi Expedition of 1882!"
! 192892 (0x2f17c): "On second thoughts, now you look at more closely, it seems to be the rucksack you bought to go to Paris with five years ago."
! 192968 (0x2f1c8): "A secret door stands open in the south wall!"
! 192996 (0x2f1e4): "The secret door is closed."
! 193012 (0x2f1f4): "A hatchway in the east wall, onto an old iron fire escape, is open and light floods in through it. (Some fool must have set the alarm off.)"
! 193100 (0x2f24c): "This is a surprisingly spacious cupboard, which you can't recall ever visiting before today. You really ought to use this convenient empty room for something..."
! 193196 (0x2f2ac): "Carry this with you everywhere you go."
! 193220 (0x2f2c4): "A large painting of Mad Isaac Meldrewe, your eighteenth-century ancestor, is propped up against the west wall."
! 193288 (0x2f308): "It used to hang in the downstairs landing, and the red, deranged eyes annoyed everybody who passed. Then Aunt Jemima picked up the ridiculous idea that it was by Sir Joshua Reynolds and had it valued. Happily it wasn't and, to cut a long story long, it ended up here."
! 193448 (0x2f3a8): "There is a big iron fireplace in the west wall."
! 193476 (0x2f3c4): "The medicine bottle, alas, was undamaged by the fall down the chimney."
! 193520 (0x2f3f0): "The skylight above is open, and the sky does indeed light the room."
! 193560 (0x2f418): "Above you is a blacked-out skylight with a crank handle."
! 193596 (0x2f43c): "It was painted out black during the first wave of Zeppelin air raids in World War I. This is completely irrelevant, but you did ask."
! 193680 (0x2f490): "The cork filters have gone. It's useless now."
! 193712 (0x2f4b0): "This is a recessed area of the roof, open to the skies but screened from below. There used to be a flagpole here, but not any more. An open skylight leads down, and a fairly safe catwalk leads northwest. However, the red-tiled roof is vertiginous and you have vertigo, which makes it especially annoying that there's an odd little balcony too far away to the south."
! 193932 (0x2f58c): "William Wordsworth once described poetry as emotion recollected in tranquillity. If so, hospitals must be full of people turning out verses about what it was like to fall off the roof of a high building. Perhaps it might be better not to join them."
! 194088 (0x2f628): "The old crenellated battlements of the house. An Englishman's home is, of course, his castle, but Meldrew Hall never saw much fighting and these military-looking features were just a seventeenth-century fashion. They also weren't intended for standing on, and the only safe way to proceed is back southeast.^^It is peculiarly cold here."
! 194296 (0x2f6f8): "The rooftop is far too dangerous in that direction."
! 194328 (0x2f718): "Unfortunately, what you need this for is up in the clouds."
! 194364 (0x2f73c): "He is dressed in a grey shadow of Georgian finery."
! 194400 (0x2f760): "the ghost of"
! 194408 (0x2f768): "The chimney is cramped, sooty, unpleasant and has no floor to speak of, so you are held up only by jamming your feet against the walls. To the east, through the fireplace, is the cupboard."
! 194524 (0x2f7dc): "Not a chance!"
! 194536 (0x2f7e8): "Wedged loosely in beside you is a sooty old stick."
! 194568 (0x2f808): "It's exactly what it seems."
! 194588 (0x2f81c): "Good heavens, so the house has a priest hole after all!  It was always a family legend but nobody seemed to know quite where it was. Apart from a cross painted on one wall and a padded floor (to absorb the noise), this spartan cranny is featureless. Nevertheless there is a spooky air of the supernatural about... A narrow crawl leads up into the chimney."
! 194808 (0x2f8f8): "An open hatch-door in the wall at floor level reveals a chute leading down into darkness."
! 194868 (0x2f934): "Low down on one wall is a little hatch door, which if it were open would be large enough to enter."
! 194928 (0x2f970): "Perhaps the attic key might unlock it?  It does look modern compared to everything else here."
! 194984 (0x2f9a8): "an"
! 194988 (0x2f9ac): "The really good research was in his earlier years."
! 195020 (0x2f9cc): "The dust and grime on the floor almost obscures an ancient prayer book."
! 195064 (0x2f9f8): "Despite appearances, this is not a prayer book after all but is Mad Isaac's diary of supernatural investigations!  The script is cursive and cursory as he rambles on through all those theories about the Curse. There's so much of it that you'd better just look up particular years."
! 195240 (0x2faa8): "There's just the secret north door, unless of course you count the windows."
! 195284 (0x2fad4): "Black-latticed windows open on a beautiful summer's day."
! 195324 (0x2fafc): "Blue sky can be seen through south-facing windows, latticed with black lead and shut tight."
! 195380 (0x2fb34): "Evans is content once again."
! 195400 (0x2fb48): "There is a long vanity mirror beside the bed."
! 195428 (0x2fb64): "A tiny balcony around Miss Alison's windows, offering fresh air, blue skies and a magnificent view over the gardens down to the droning motorway in the distance. The roof is too perilous to scale even if you had a good reason (which you haven't), so you had better go back north."
! 195600 (0x2fc10): "The rooftop is far too dangerous in that direction."
! 195632 (0x2fc30): "You look down on a low, bare window-sill."
! 195660 (0x2fc4c): "The balcony is only a foot or so beneath the window-sill, and only about four feet square."
! 195716 (0x2fc84): "Gold and lead are naturally related, so you want to find a lead box to open."
! 195764 (0x2fcb4): "This small cavity at the north end of the attic once housed all manner of home-made wine paraphernalia, now lost and unlamented. Steps, provided with a good strong banister rail, lead down and to the west, and the banister rail continues along a passage east."
! 195916 (0x2fd4c): "Faded ink on the label reads: Elderberry '63."
! 195948 (0x2fd6c): "It's provided for your torch, and not for anything else."
! 195984 (0x2fd90): "On the side is the word ~Achtung~."
! 196008 (0x2fda8): "Purely decorative."
! 196024 (0x2fdb8): "The good news is that it has excellent grid references, which are easy to look up. The bad news is that it is a map of central Hamburg."
! 196104 (0x2fe08): "This used to be called the Conservatory, before Aunt Jemima took it over to potter about with plants, painting and indeed (on occasion) pottery. She has filled the place with objets trouves and bric-a-brac, and hung up a home-made calendar of watercolours. Even the old airing cupboard to the south is cluttered.^^An open doorway leads back southwest onto the upstairs landing, and you can hear the chaotic noise of suitcases being manhandled about - good thing nobody's seen you. A narrow staircase leads up and to the east into the attic.^^Jemima herself seems to be in the potting room to the west."
! 196456 (0x2ff68): "A space about six feet square. The old drying racks now contain odd ceramic sculptures almost but not quite unrecognisable as coffee mugs. One corner is filled with an enormous pile of tie-dyed sheets, from Aunt Jemima's infamous Sixties Revival period of last October."
! 196624 (0x30010): "The only way to go from here is back north."
! 196648 (0x30028): "a synthesized"
! 196660 (0x30034): "a light orchestra"
! 196672 (0x30040): "a choral"
! 196680 (0x30048): "a snare drum and strings"
! 196696 (0x30058): "a country-and-western"
! 196712 (0x30068): "a one-finger piano"
! 196724 (0x30074): "a Welsh coal-miners' Eisteddfod choir"
! 196752 (0x30090): "a Hammond organ"
! 196764 (0x3009c): "an easy-listening"
! 196776 (0x300a8): "a ~lite-n-mellow~"
! 196792 (0x300b8): "a jazz trio"
! 196800 (0x300c0): "a Big Band"
! 196808 (0x300c8): " version of "
! 196816 (0x300d0): " rendition of "
! 196824 (0x300d8): " travesty of "
! 196836 (0x300e4): " arrangement of "
! 196848 (0x300f0): " transcription of "
! 196860 (0x300fc): "Queen's ~I Want To Break Free~."
! 196888 (0x30118): "Bach's ~Air on a G-string~."
! 196908 (0x3012c): "Mozart's ~Musical Joke~."
! 196928 (0x30140): "Stockhausen's ~Piano Pieces I-IX~."
! 196956 (0x3015c): "Beethoven's ~Moonlight Sonata~."
! 196980 (0x30174): "Summer from Vivaldi's ~Four Seasons~."
! 197008 (0x30190): "the especially slow movement of Gorecki's ~Symphony no. 3~."
! 197048 (0x301b8): "Spandau Ballet's ~Gold~."
! 197068 (0x301cc): "Duran Duran's ~Is There Something I Should Know?~."
! 197108 (0x301f4): "Derek and the Dominos' ~Layla~."
! 197132 (0x3020c): "Don McLean's ~American Pie~."
! 197156 (0x30224): "Chopin's ~Nocturne no. 1~."
! 197176 (0x30238): "Oxygene by Jean-Michel Jarre."
! 197200 (0x30250): "the Beatles' ~Yellow Submarine~."
! 197228 (0x3026c): "the Beatles' ~She Loves You~."
! 197252 (0x30284): "the Beatles' ~Hey Jude~."
! 197276 (0x3029c): "the Beatles' ~Lucy in the Sky with Diamonds~."
! 197308 (0x302bc): "Queen's ~Bohemian Rhapsody~."
! 197332 (0x302d4): "the Beatles' ~Magical Mystery Tour~."
! 197364 (0x302f4): "the Beatles' ~I Am The Walrus~."
! 197392 (0x30310): "Bill Haley's ~Rock Around the Clock~."
! 197420 (0x3032c): "the old Elvis Presley number ~Jailhouse Rock~."
! 197456 (0x30350): "the old Elvis Presley number ~Blue Suede Shoes~."
! 197496 (0x30378): "ELO's ~Mr Blue Sky~."
! 197516 (0x3038c): "Bach's Toccata in D minor for organ."
! 197544 (0x303a8): "ABC's ~The Look of Love~."
! 197564 (0x303bc): "the Beach Boys' ~California Girls~."
! 197596 (0x303dc): "the Stranglers' ~Golden Brown~."
! 197624 (0x303f8): "Genesis' ~That's All~."
! 197644 (0x3040c): "Grieg's piano concerto."
! 197660 (0x3041c): "Bruce Springsteen's ~Born in the USA~."
! 197688 (0x30438): "Beethoven's Symphony no. 5."
! 197712 (0x30450): "Beethoven's ~Emperor~ piano concerto."
! 197740 (0x3046c): "Mozart's ~Elvira Madigan~ concerto."
! 197764 (0x30484): "Bach's Brandenburg Concerto no. 5."
! 197792 (0x304a0): "Deep Purple's ~Smoke On The Water~."
! 197820 (0x304bc): "Faure's Requiem."
! 197836 (0x304cc): "Tchaikovsky's ~1812 Overture~."
! 197860 (0x304e4): "the Swan from Saint-Saens' ~Carnival of the Animals~."
! 197900 (0x3050c): "the ~O Fortuna~ from Carl Orff's ~Carmina Burana~."
! 197940 (0x30534): "Led Zeppelin's ~Stairway to Heaven~."
! 197968 (0x30550): "the Bugs Bunny theme tune."
! 197988 (0x30564): "Strauss' ~Blue Danube~ waltz."
! 198012 (0x3057c): "the Star Wars theme tune."
! 198032 (0x30590): "the Star Trek theme tune."
! 198052 (0x305a4): "the Dallas theme tune."
! 198068 (0x305b4): "Wagner's ~Ride of the Valkyries~ overture."
! 198096 (0x305d0): "Dire Straits' ~Money For Nothing~."
! 198124 (0x305ec): "Dire Straits' ~Brothers In Arms~."
! 198152 (0x30608): "Dire Straits' ~Tunnel Of Love~."
! 198180 (0x30624): "Wham's ~Wake Me Up Before You Go-Go~."
! 198212 (0x30644): "something abysmal by Leo Sayer."
! 198236 (0x3065c): "Lionel Richie's ~Hello~."
! 198256 (0x30670): "Hot Chocolate's ~Happy Birthday~."
! 198284 (0x3068c): "Abba's ~Mama Mia~."
! 198300 (0x3069c): "Abba's ~Knowing Me, Knowing You~."
! 198324 (0x306b4): "Barry Manilow's ~I Write The Songs~."
! 198352 (0x306d0): "Ian Dury and the Blockheads' ~Hit Me With Your Rhythm Stick~."
! 198400 (0x30700): "Ravel's ~Bolero~."
! 198416 (0x30710): "~Nessun Dorma~, as sung simultaneously by Pavarotti, Carreras and Dolly Parton."
! 198476 (0x3074c): "Michael Jackson's ~Thriller~."
! 198500 (0x30764): "Michael Jackson's ~Billy Jean~."
! 198524 (0x3077c): "Michael Jackson's ~Beat It~."
! 198548 (0x30794): "Kylie Minogue's ~I Should Be So Lucky~."
! 198580 (0x307b4): "the Eurovision Song Contest's finest five minutes, ~Diggy-Loo Diggy-Lay (Life Is Going My Way)~."
! 198656 (0x30800): "Dexy's Midnight Runners' ~Come on Eileen~."
! 198692 (0x30824): "Steppenwolf's ~Born to be Wild~."
! 198716 (0x3083c): "Toto's ~The Eye of the Tiger~."
! 198736 (0x30850): "Cyndi Lauper's ~Girls Just Wanna Have Fun~."
! 198772 (0x30874): "the traditional air ~Greensleeves~."
! 198800 (0x30890): "Hoagy Carmichael's ~Skylark~."
! 198824 (0x308a8): "Noel Coward's ~Don't Put Your Daughter On The Stage~."
! 198864 (0x308d0): "Chas and Dave's ~Rabbit Song~."
! 198888 (0x308e8): "Paul McCartney's ~Mull of Kintyre~."
! 198916 (0x30904): "John Lennon's ~Imagine~."
! 198936 (0x30918): "that grisly carol, ~We Wish You A Merry Christmas~."
! 198976 (0x30940): "that hoary old favourite, ~Oh Come All Ye Faithful~."
! 199016 (0x30968): "~My Way~, crooned over by Frank Sinatra."
! 199048 (0x30988): "an"
! 199052 (0x3098c): "It rolls on casters, and has a bakelite on/off switch."
! 199088 (0x309b0): "This light room is full of pot plants, flowers, seeds, ornamental trowels and other miscellaneous garden implements."
! 199160 (0x309f8): "The only exit is back east to the conservatory."
! 199188 (0x30a14): "some"
! 199192 (0x30a18): "Good for nothing. Why would you want gloves on?"
! 199224 (0x30a38): "A pair of yellow rubber gloves hangs from a hook on one wall."
! 199264 (0x30a60): "Aunt"
! 199268 (0x30a64): "She's been fiddling about with those cut flowers all afternoon. And she's a bit upset at being left alone in the house while you're off on holiday, so best not to get on her bad side. You really ought to make it up to her somehow."
! 199408 (0x30af0): "Aunt Jemima, who has for years collected varieties of daisy, is engaged in her regular annual pastime of deciding which species make the best chains."
! 199496 (0x30b48): "Definitely mollified."
! 199512 (0x30b58): "Dangerous to wear. But at least any sort of daisies will do."
! 199556 (0x30b84): "A disused storage room off the winery. In one wall is an opening onto an ominous dark shaft, and beside it is a big Victorian-steam-engine style wheel with a handle on."
! 199660 (0x30bec): "The only doorway is back west to the winery."
! 199684 (0x30c04): "There is a concealed safety catch (poorly) hidden on the wheel."
! 199724 (0x30c2c): "the old"
! 199728 (0x30c30): "Inside the dark shaft is the old dumbwaiter."
! 199756 (0x30c4c): "Uninviting."
! 199764 (0x30c54): "A steel wrench gathers dust in the corner."
! 199792 (0x30c70): "the"
! 199796 (0x30c74): "The dumbwaiter hangs on strong pulley ropes which stretch up and down from here."
! 199844 (0x30ca4): "It isn't even mentioned in any of the books I've read."
! 199880 (0x30cc8): "The half which didn't get the wish, actually."
! 199908 (0x30ce4): "Halfway up, or else halfway down, and a dreary place it is too: nothing but a dark corridor leading north."
! 199976 (0x30d28): "A passage which slants very slightly down to the south, which is full of coal dust, to which you are unfortunately allergic. Not somewhere to linger."
! 200064 (0x30d80): "A secret passage slants down to the east through a sandstone recess."
! 200108 (0x30dac): "There is a shallow sandstone recess in the east wall."
! 200140 (0x30dcc): "At the north end is a metal door, standing open."
! 200168 (0x30de8): "At the north end is a closed metal door."
! 200192 (0x30e00): "Cobwebbed old cellars. There is nothing to see except an opening in one wall onto a dark shaft, and a big Victorian-steam-engine style wheel beside it with a handle on. The cellar continues east-to-west and south."
! 200324 (0x30e84): "Uninviting."
! 200332 (0x30e8c): "There is a little closed window-vent low in the north wall."
! 200368 (0x30eb0): "You can just make out an impression of golden light."
! 200400 (0x30ed0): "It can't even follow orders."
! 200420 (0x30ee4): "In one corner is a dust-covered robot mouse."
! 200452 (0x30f04): "Remember the late 1970s, when a craze for home-made robots swept the home computing world?  No, perhaps not, but here is a left-over from it anyway. The mouse is quite large (almost a foot wide and tall), and has a big smile painted on its metal chassis. It has surprisingly modern circuitry in, though, and is even humming very faintly, so someone must have put some work in on it recently."
! 200696 (0x30ff8): "This is the eastern end of the cellars, from which you can only go west."
! 200736 (0x31020): "The bricking-up of this cellar seems incomplete, because there is a hole about ten or eleven inches across in the west wall. You peer at this with interest but nothing is within reach inside, and it is far too small for you to wriggle through. The cellars go back north, and so, it would appear, do you."
! 200916 (0x310d4): "It isn't the attic key, I fear."
! 200936 (0x310e8): "Brass is of course a non-magnetic copper-zinc alloy, so presumably this key also contains iron."
! 201000 (0x31128): "Lying where the mouse dropped it is a small brass-coloured key."
! 201040 (0x31150): "The west end of a disused and shadowy old cellar. It was bricked up when you were a child - you never did find out why. Perhaps the golden, jewelled staircase leading down into smoky mists to the south might be something to do with it."
! 201180 (0x311dc): "an"
! 201184 (0x311e0): "In the northwest wall the ironbound door stands open."
! 201216 (0x31200): "In the northwest wall is a heavy, imposing ironbound door."
! 201252 (0x31224): "There are times when your life seems an endless sequence of locked doors, each harder to pass than the last. This one, though, has a feeling of the ultimate about it."
! 201348 (0x31284): "An eerie, dark cave carved from crystal icicles of rock and strewn with great spiders' webs hung from the ragged stone, inhabited only by dead white insects. A narrow crevice opens out to an iron doorway and the warmth of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol.^^You shiver with foreboding, but inexplicably feel that the map you're looking for must be somewhere near here."
! 201656 (0x313b8): "There is now a small spherical opening in one wall."
! 201688 (0x313d8): "It would just hold a ball the size of your palm."
! 201716 (0x313f4): "A cave carved from crystal icicles of rock and glowing with vivid, golden light, so bright it almost hurts your eyes. A narrow crevice opens out to an iron doorway and the relative darkness of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol."
! 201940 (0x314d4): "A flight of sandstone steps, cut in the 1920s when an Egyptological craze was sweeping England, slants down from the coal-dust passage to the east."
! 202032 (0x31530): "A broad, dark octagonal room devoted to dull exhibits of the disastrous Nile Valley Expedition of '21 - the few good ones were donated to the British Museum. A back staircase leads west to the unbuilt extension, while the entrance seems to be the cobwebbed passage southeast. High windows on the northern face let in dim light."
! 202232 (0x315f8): "The only exits are via the southeast passage and the back staircase."
! 202272 (0x31620): "There is a little window-vent high in the southwest wall."
! 202308 (0x31644): "You can just make out an impression of cellars."
! 202340 (0x31664): "A rather morbid, gilded model coffin rests here in peace."
! 202380 (0x3168c): "A rather morbid gilded model coffin rests here."
! 202412 (0x316ac): "The model coffin is closed and throbbing with electric power."
! 202448 (0x316d0): "A rather morbid gilded model coffin rests open here."
! 202484 (0x316f4): "Leaned against one of the eight corners is a ragged white parchment scroll."
! 202532 (0x31724): "What taste! What artistry!"
! 202552 (0x31738): "A lamentably naff tourist's gift, this seems to be a ~replica~ of one of the papyri on which some lost Greek play or other was written. Some nonsense about the priestess of Apollo being summoned by music, etcetera.^^It has all the charm of a tea-towel of, oh, say the Taj Mahal made out of curry."
! 202740 (0x317f4): "A little charcoal sketch is framed on one wall."
! 202772 (0x31814): "Behind the frame seems to be an artist's impression of the great Palace of Alexandria as it might once have been."
! 202844 (0x3185c): "It's the frame which really sets it off."
! 202872 (0x31878): "Charcoal is so unrealistic, don't you agree?  Besides, it's far too large and clumsy."
! 202932 (0x318b4): "A miniature artist's impression of the great Palace of Alexandria as it might once have been.^^(No, the impression is miniature, not the artist.)"
! 203028 (0x31914): "The ravings of a madman. Ignore it."
! 203052 (0x3192c): "A low, white hallway adjoining the Octagon, converted from what was once the scullery and the servants' pantry. A tight, dark staircase runs up and south; and a diagonal bricked path runs out northeast to the gardens."
! 203184 (0x319b0): "Up on one wall is a picture hook."
! 203208 (0x319c8): "Mad Isaac's painting glares at you from the picture hook."
! 203244 (0x319ec): "an"
! 203248 (0x319f0): "A deep old elephant's-foot umbrella stand."
! 203280 (0x31a10): "There's an old-fashioned elephant's foot umbrella stand beside the garden doorway."
! 203332 (0x31a44): "This dark, steep staircase zigzagging through the house once gave the servants access throughout. But those days are long gone and now all the doors are locked up."
! 203428 (0x31aa4): "This is a city side street, but as if seen through the grey of despair. People stream by, some of whom you almost recognise, as if dead. The street runs east-west, and to the north is a doorway into a grubby tenement building."
! 203568 (0x31b30): "This shambolic flat, extending to the east, shares a filthy hallway with the one upstairs. To the south, passers-by pass by along the street. Peeling-away posters have been stuck up on top of each other on the walls, in such a way that you can only read the most recent."
! 203728 (0x31bd0): "~Bateaux Phlebas - toujours le dernier mot~. You briefly wish you had a dog called Toto, so as to be able to say ~Toto, I've got a feeling we're not in England any more.~"
! 203840 (0x31c40): "What a very useful piece of paper. Pity there's writing on it."
! 203884 (0x31c6c): "Flats occupied by starving-but-noble artists can be romantic and stylish despite the squalor. This one, however, is simply a one-room hovel, caked with paint, littered with brushes and improvised easels, and you can't help standing on tiptoe here."
! 204036 (0x31d04): "One whole wall is an Impressionist mural painting of a yellow chair."
! 204080 (0x31d30): "One whole wall is an Impressionist mural painting of lilies on a pond."
! 204128 (0x31d60): "One whole wall is an Impressionist mural painting of a chateau in Aix-en-Provence."
! 204184 (0x31d98): "One whole wall is an Impressionist mural painting of nude bathers."
! 204228 (0x31dc4): "One whole wall is an Impressionist mural painting of a waitress at a bar."
! 204276 (0x31df4): "One whole wall is an Cubist mural painting of a woman with a plate of fish on her head."
! 204332 (0x31e2c): "One whole wall is an abstract Cubist mural painting."
! 204368 (0x31e50): "One whole wall is an Pre-Raphaelite mural painting of the Virgin Mary looking up at the light."
! 204428 (0x31e8c): "One whole wall is an Impressionist mural painting of a woman with a parasol."
! 204476 (0x31ebc): "One whole wall is an pointillist mural painting of a scene in a park by a lake."
! 204524 (0x31eec): "an"
! 204528 (0x31ef0): "The bottom corner is signed simply ~Helene~."
! 204560 (0x31f10): "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads west. In the centre of the room is a table, on which is an electric bell push and a wicked Tarot pack."
! 204712 (0x31fa8): "Peculiarly, the hanging curtain seems to be solid iron when you walk into it."
! 204764 (0x31fdc): "She has a bad cold, but nevertheless is known to be the wisest woman in Europe."
! 204816 (0x32010): "Hood, scythe, skeleton, implacable grin: yes, it's the Reaper all right."
! 204864 (0x32040): "It's vital you slide right along with this one."
! 204896 (0x32060): "Don't worry, he won't slide down the cliff."
! 204924 (0x3207c): "The Fool is a man looking directly ahead as he steps off the edge of a cliff."
! 204972 (0x320ac): "He's one of my colleagues now, of course."
! 205000 (0x320c8): "Those are pearls that were his eyes..."
! 205028 (0x320e4): "an"
! 205032 (0x320e8): "Shoddy workmanship, but never mind, it's only a staff and who needs those any more?"
! 205088 (0x32120): "Down at the end of the street, the brown urban waters carry by unpleasant rubbish, and rats scuttle up and over the mounds washed up around you."
! 205176 (0x32178): "People had no style in those days, before they invented paper tissues. I mean this tatty cloth is hardly attractive, is it?"
! 205256 (0x321c8): "On one especially repellent mound is, of all things, a fine silk handkerchief."
! 205304 (0x321f8): "Monogrammed J. A. P., but that's no great matter."
! 205336 (0x32218): "The side reads: PHLEBAS."
! 205360 (0x32230): "Moored close to the bank is a glass-roofed tourist boat."
! 205396 (0x32254): "On the far bank is a glass-roofed tourist boat. As much as you like to explore, you can't see how to attract its attention."
! 205472 (0x322a0): "A tourist river-boat, glass-roofed. You can climb out to the shore to the east. At the helm is a very strange man, at times almost a straw dummy, almost perhaps a hollow cut-out made of paper. He (or it) turns the wheel and casts his eyes to windward."
! 205628 (0x3233c): "the"
! 205632 (0x32340): "Every now and then he whimpers."
! 205652 (0x32354): "The hollow man mechanically says: ~Where to, guv'nor?  Me with my big mouth, I gone and done it again, calling you the guv'nor. I was down Margate Sands way once, had a bloke come on board, he thought any old destination would do, like a real place, like anywhere was real... We are the hollow men, I says, he didn't like that... Hurry up, please, it's time.~"
! 205884 (0x3243c): "A dry, desolate waste of buildings borders here on a main road, so full of black-suited pedestrians off to work at banks that you can't force your way any further east. Once in a while a few of the bowler-hatted army step into the street and down some steps below a Metropolitan sign."
! 206060 (0x324ec): "You can't force your way through the tide of bankers."
! 206092 (0x3250c): "This is a vast underground station in great rectangular caverns, deep beneath the streets. You are outside the ticket gates, near a flight of steps back up to the city, and since you haven't a ticket you're likely to stay that way."
! 206228 (0x32594): "Back up the stairs for you. Call yourself a traveller..."
! 206264 (0x325b8): "Behind a kiosk, a surly-looking man is selling guide books and maps."
! 206308 (0x325e4): "His jumper is unstriped, and there are no onions around his neck. Nonetheless he has a rather Gallic, disgruntled look to him. Perhaps he's a former Socialist cabinet minister."
! 206420 (0x32654): "Burn it!  Burn it at once!"
! 206440 (0x32668): "What a very useful map!  Now you can go on holiday."
! 206476 (0x3268c): "Just the way you remember yours having been."
! 206504 (0x326a8): "The Museum of Arcana is deserted after nightfall and only dimly lit by distant sodium street-lamps. Outside it is a stormy October night and rain beats against the windowpanes. Shadows swoop and dive in the air like bats.^^The revolving door to northeast, which leads out, seems to be solidly blocked off. But a dim passage runs south, through a strange metal corridor."
! 206732 (0x3278c): "There's no apparent way but south."
! 206752 (0x327a0): "Why not go northeast and look inside?"
! 206776 (0x327b8): "A publicity poster is displayed for passers-by outside to see."
! 206816 (0x327e0): "One of those pretentious exhibition posters. Your German is just about adequate to the task:^^~Cults of the Druids - a Major Retrospective, October-November 1988~."
! 206928 (0x32850): "Inside one quarter of the cramped revolving door, which is blocked off from the world outside and opens only onto the foyer, southwest."
! 207004 (0x3289c): "To north and east are the walls of the door."
! 207028 (0x328b4): "The door only turns clockwise."
! 207048 (0x328c8): "You stand within it."
! 207060 (0x328d4): "A colourful, striped inflated beach ball bounces around."
! 207100 (0x328fc): "A great square gloomy room, just south of the foyer. There are square lintelled doorways east and west. The storm is dark, and the windows are high, but there's just enough light to see by."
! 207212 (0x3296c): "There's nothing worthwhile in it."
! 207232 (0x32980): "Resting on a little display table is a Tarot box."
! 207264 (0x329a0): "A long painted still life graces one wall near a corner."
! 207300 (0x329c4): "A disturbing painting, perhaps by Edvard Munch, this is a still life of a seedling on a table, surrounded by a rusty iron rod with a star on the end, a glass bottle, a lamp and a bunch of keys. No doubt these arcane objects held some special significance for primitive tribes now absorbed into civilisation."
! 207488 (0x32a80): "A dark staircase, turning from east to south as it descends. The hideous sound of arhythmic chanting can be heard from below."
! 207564 (0x32acc): "On one step, an empty matchbook lies discarded."
! 207596 (0x32aec): "Ah, I fear it is only a token clue."
! 207620 (0x32b04): "It's from the Ruined Castle Cafe, and (like the Cafe) is matchless."
! 207664 (0x32b30): "A stone castle on a hill."
! 207684 (0x32b44): "It leads nowhere."
! 207696 (0x32b50): "A single bright light in the darkness."
! 207720 (0x32b68): "Ugh, what a nasty bright light. Good thing you'll never go there."
! 207760 (0x32b90): "There's less to this card than meets the eye."
! 207788 (0x32bac): "Andromeda chained to a rock on the sea-shore."
! 207820 (0x32bcc): "What an ugly girl!  Bet she's good for a laugh though."
! 207856 (0x32bf0): "It leads nowhere."
! 207868 (0x32bfc): "It shows a great many crystal-glass cups and glasses."
! 207904 (0x32c20): "An old administrative office of the museum, emptied and made into a prison cell: amateur but effective."
! 207968 (0x32c60): "There's definitely no way out of here."
! 207992 (0x32c78): "an"
! 207996 (0x32c7c): "Just a crook. And what's wrong with crooks, that's what I say."
! 208040 (0x32ca8): "As you might expect, the cell door is closed."
! 208068 (0x32cc4): "An annexe to the museum, containing sundry archaelogical finds, badly labelled in German (which you can hardly read at the best of times) and securely pinioned inside glass cabinets. The storm outside thrashes against the narrow dark windows."
! 208216 (0x32d58): "One cabinet looks particularly vulnerable."
! 208248 (0x32d78): "You could just look inside the broken glass cabinet."
! 208280 (0x32d98): "A smooth palm-sized disc, perhaps of pumice stone, painted in yellows and browns with a single star motif, around which (clockwise) are the words ~nog~, ~er~, ~ska~ and ~iw~. If you remember the label rightly, something funny has been done to a piece of metal embedded in the top, but your German wasn't up to understanding what."
! 208488 (0x32e68): "Doesn't the shape strike you as familiar at all?  - There, that should point you in the right direction."
! 208548 (0x32ea4): "You need more evidence before you can begin deciphering the language, I fear."
! 208596 (0x32ed4): "Only one line has survived intact:^^.<anoppe> an-spe : ska er nog-er an-ge : to-ro-ma ka ur Al-x-an-dr u bir ka ur-a an-ge ur"
! 208696 (0x32f38): "This crowded, bohemian cafe bears only a passing resemblance to the ruined castle of the Tarot card: the decor imitates castle walls and arrowslits. You find yourself sitting at a table for one in the centre of the cafe floor. It is noisy, bustling and cheery, and a string quartet plays Strauss under the chattering of German voices. Your chances of attracting a waiter are very slight."
! 208924 (0x3301c): "The crowd is lively and exciting, but also inconsiderate and bulky."
! 208968 (0x33048): "It contains a timer-detonator, a bundle of plastic explosives and many, many wires. The most obvious ones are green, red, blue and black. They would pull out of their loose sockets in the timer easily, so perhaps this bomb disposal nonsense isn't as tricky as people make out."
! 209140 (0x330f4): "Taped loosely to the underside of the table is a complicated-looking bomb."
! 209184 (0x33120): "Time flies down here, you know. Eternity simply breezes by."
! 209224 (0x33148): "Good photographic gear that. You didn't get it from a... well, a bomb, I hope."
! 209276 (0x3317c): "This basement room is filled with crate after crate of glasses and cups, enough for an entire hotel, or restaurant perhaps. Almost anything might be hidden among them. A little light comes in from an opaque skylight which is at street level outdoors. There is no way out of here, since the only door is shut tight."
! 209460 (0x33234): "There's no apparent way out of here."
! 209480 (0x33248): "Through the square window in the door you can see a bar at which staff are serving, and a very crowded and lively cafe-restaurant beyond. The cabaret act has her back to you, and a considerable amount of her front to the diners."
! 209612 (0x332cc): "numerous"
! 209620 (0x332d4): "Old, unwanted, dusty, empty."
! 209640 (0x332e8): "The great challenge, of course, is to get a ship inside."
! 209676 (0x3330c): "An unlabelled whisky bottle, laid on its side and mounted on a wood plaque, lies deservedly unwanted on one of the crates."
! 209752 (0x33358): "Oh, well done!  Why not take a closer look, you deserve it?"
! 209792 (0x33380): "Within the whisky bottle is a model sailing ship, far too large to have passed the neck."
! 209844 (0x333b4): "The great challenge, of course, is to get it inside a bottle."
! 209880 (0x333d8): "A superb model sailing ship, about six inches from prow to stern, immaculate in every detail from an anchor on a filigree chain to a carved mermaid up front."
! 209976 (0x33438): "The great challenge, of course, is to get it inside a bottle."
! 210012 (0x3345c): "A tightly-folded bundle of sticks, about six inches long, with a filigree chain and anchor hanging from it."
! 210076 (0x3349c): "The rocks are too dangerous. You'll have to scale the cliff."
! 210112 (0x334c0): "Chained to the cliff face is the beautiful Andromeda, looking nobly out to sea as she awaits her fate."
! 210172 (0x334fc): "Andromeda's"
! 210184 (0x33508): "A long clasp of amber, perfect for long straggly Greek hair."
! 210224 (0x33530): "Mmm... it still has her perfume on it. Hehehehe. Bet she's dead now."
! 210272 (0x33560): "On top of some exposed cliffs on the Mediterranean. A dangerous slither down leads on one side to the shore, all other ways down being even more hazardous. Atop the cliffs is the Pharos tower, a round stone pinnacle lighthouse, but there is no way in from here.^^A grassy walk leads east, and a narrow crack leads southwest into a cave mouth."
! 210480 (0x33630): "There's only dull grassland that way."
! 210504 (0x33648): "A long clifftop walk by the sea, from the lighthouse to the west to the village not far east. These fields are occupied by herds of hardy mountain goats, continually butting each other and frisking. To the south a path leads across sparse grassland to a great outgrowth of some kind."
! 210668 (0x336ec): "There's only dull grassland that way."
! 210692 (0x33704): "A long walk along the cliffs from the lighthouse leads naturally here, just outside the Eraina Taverna, whose open doorway lies to the south."
! 210772 (0x33754): "There's only dull grassland that way."
! 210796 (0x3376c): "Only a small, thorny, unclimbable fig tree."
! 210824 (0x33788): "Legend has it that the Roman emperor Augustus was killed by his wife Livia, who painted the figs on his tree with poison. Actually it looks like a perfectly nice piece of fruit."
! 210936 (0x337f8): "Hanging from a low branch of a fig tree is, as you might expect, a fig."
! 210980 (0x33824): "Good enough for a god."
! 210996 (0x33834): "You can ask a god for a date, but they just don't give a fig."
! 211032 (0x33858): "A plain but cheery taverna, fill of miserable and rather ashamed men who are drinking retsina heavily. The day is dawning outside the north door, but they strangely do not share your uplifted feeling at the sight."
! 211164 (0x338dc): "The tavern entrance is to the north."
! 211188 (0x338f4): "A speciality dessert of the Taverna: ice cream, kateifi, raspberry sauce, cream. An acquired taste."
! 211256 (0x33938): "Left untouched on one table is an Ekmek Special dessert."
! 211296 (0x33960): "Better with chocolate ice cream, I think."
! 211324 (0x3397c): "Doesn't somebody else need this more than you?"
! 211356 (0x3399c): "Morose and unconvivial at the best of times. This is not the best of times."
! 211400 (0x339c8): "Behind the bar, a depressed bartender polishes glasses."
! 211436 (0x339ec): "The rather sparse rolling landscape is dominated here by a massive, and suspiciously unnatural, wall of thorns, which forms a great ring about an area perhaps a hundred yards in diameter. There are goat pastures to the north."
! 211568 (0x33a70): "There's only dull grassland that way."
! 211592 (0x33a88): "A ragged gap in the wall has been burnt out to the south."
! 211624 (0x33aa8): "The wall rustles and clashes its thorns like a beast alive."
! 211660 (0x33acc): "It's hard to imagine what could possibly shift a wall like that."
! 211700 (0x33af4): "Here inside the thorn wall, a north-south path leads across sacred earth into the imposing marble Temple of Zeus. You feel distinctly uneasy walking on such hallowed turf. There are any number of myths about gods getting cross about that sort of thing."
! 211856 (0x33b90): "The wall of thorns hems you in."
! 211876 (0x33ba4): "The beautiful candle-lit Temple of Zeus, a cavern of marble pillars which is quite empty and featureless save for the entrance at the north. So much for all the rumours about hoards of treasure - it looks as if Zeus (who is, by the way howling with anger outside) was bluffing all along.^^Cloisters lead southeast and southwest, deeper into the temple."
! 212092 (0x33c7c): "one"
! 212096 (0x33c80): "On one side, a man's face: on the other, a symbol, I. One obol, or one-sixth of a drachma."
! 212156 (0x33cbc): "This currency is only valid in ancient Greece. Where on earth have you been?"
! 212204 (0x33cec): "The east cloister of the Temple, which turns from northwest to southwest, is bare but for a small niche."
! 212264 (0x33d28): "an"
! 212268 (0x33d2c): "Resting in the niche is an inscribed pumice stone, two feet tall."
! 212308 (0x33d54): "Whoever wrote this must have wanted to get the message across very badly, to write it all out twice."
! 212372 (0x33d94): "Along the west cloister, turning from northeast to southeast, is a broad bas relief depicting the seasons: the planting of seed, high summer, the harvest, floods and then the coming of ice."
! 212484 (0x33e04): "A curious symbol is repeated along the top of the relief."
! 212520 (0x33e28): "Here from the dark heart of the temple, cloisters fork northeast and northwest while a flight of narrowing steps lead down and to the north."
! 212600 (0x33e78): "The blind poet Homer half-slumbers here, clutching his syrinx (or Pan-pipes) to himself."
! 212660 (0x33eb4): "Homer is wearing a Columbo-style raincoat."
! 212692 (0x33ed4): "Homer sits half-awake, clutching his syrinx."
! 212724 (0x33ef4): "Homer glares at you through sightless eyes."
! 212752 (0x33f10): "Homer is asleep again, his syrinx tight in his arms."
! 212788 (0x33f34): "the"
! 212792 (0x33f38): "Marvellous! A sound to soothe the spirit."
! 212820 (0x33f54): "Carefully cut from river reeds, these once belonged to Homer himself. As you may recall."
! 212876 (0x33f8c): "The fabled Labyrinth seems only to consist of a broad cross. Arms run to northeast, northwest, southeast and southwest, while a flight of stone steps widens and climbs south."
! 212984 (0x33ff8): "The two-foot opening is clear again."
! 213008 (0x34010): "the"
! 213012 (0x34014): "~ka-i ur-a re-im ka an-ge~"
! 213036 (0x3402c): "There are extremely scuffed and faded inscriptions at the centre of the cross."
! 213080 (0x34058): "Beside the inscriptions is an opening in the floor, about two feet square."
! 213124 (0x34084): "The opening is securely wedged with the stone."
! 213152 (0x340a0): "The opening is securely wedged with the prop."
! 213180 (0x340bc): "A foul, musty bone pit, beneath the cross, where sacrificial victims were once dropped and ~forgotten~."
! 213248 (0x34100): "Lying on top of crushed, broken bones, in plain view, is a gleaming gem of amber."
! 213304 (0x34138): "Embedded within is the body of a fly. Scratched upon one face is the word ~GALITA~."
! 213360 (0x34170): "Isn't there some classical legend about her?"
! 213388 (0x3418c): "This cross-corner is inlaid with carvings of fish, of the waves, of great casting nets sweeping through the water.^^The Labyrinth lies to southwest."
! 213480 (0x341e8): "This cross-corner is surrounded with carvings of wheat swaying in the breeze, bathed with sunshine.^^The Labyrinth lies to southeast."
! 213564 (0x3423c): "This cross-corner is decorated with carvings of massed ranks of hoplite warriors, advancing into battle.^^The Labyrinth lies to northwest."
! 213652 (0x34294): "This cross-corner is decorated with carvings of grape-vines and barrels.^^The Labyrinth lies to northeast."
! 213720 (0x342d8): "A fine statue of the god Poseidon stands here."
! 213748 (0x342f4): "A fine statue of the goddess Demeter stands here."
! 213780 (0x34314): "A fine statue of the god Ares stands here."
! 213808 (0x34330): "A fine statue of the god Dionysus stands here."
! 213836 (0x3434c): "A dry cave opening from a crack to the northeast, becoming a fair-sized cavern, furnished with bronze and lit by trestle lamps chained from the ceiling."
! 213928 (0x343a8): "the"
! 213932 (0x343ac): "The Oracle, the masked priestess of Apollo, stands here behind an obsidian altar-stone, three cubits cubed: to her side is a bronze urn, mouthing perpetual flame."
! 214036 (0x34414): "the"
! 214040 (0x34418): "In the centre of the cave rests an obsidian altar stone with a flaming bronze urn."
! 214092 (0x3444c): "The altar stone, sometimes called ~Omphalos~ or ~the navel~, bears an odd cross or plus sign and is fabled to mark the centre of the world.^^Around the side of the urn are reliefs of feasts, of oxen being tracked and sacrificed, of the gathering of fruit and the making of cheese."
! 214264 (0x344f8): "The god Apollo moves in mysterious ways, for another fig has appeared on the tree."
! 214316 (0x3452c): "Being a lighthouse, this pinnacle is way up in the air. Point taken?"
! 214360 (0x34558): "A brown-tinted frieze, depicting hunters and spear-carriers, surrounds this dark stair-well, which has no exit except for a spiral staircase leading back up."
! 214460 (0x345bc): "The decorated strip of entablature between the architrave and the cornice, in the Attic style circa fifth century B.C.^^Well, you did ask."
! 214548 (0x34614): "the"
! 214552 (0x34618): "the"
! 214556 (0x3461c): "the"
! 214560 (0x34620): "the"
! 214564 (0x34624): "There is a storm tossing the deck, one which drives no rain: you reel from one side to the other, hanging onto the rail, grabbing at the mast or the rigging. Nobody else seems to be aboard. The boat makes no headway in a strange, glassy mist.^^The mast rises dizzyingly high.^^You can't even make out the water below. A great pink haze spreads across the sky. With omens like these, who needs albatrosses?"
! 214804 (0x34714): "The deck runs fore to aft (as all decks do)."
! 214832 (0x34730): "the"
! 214836 (0x34734): "Down might be a better idea."
! 214856 (0x34748): "Coming up here must be one of your less inspired ideas. The mist is all around you, confusing your senses. Two pale, bluish moons hang in a pink sky."
! 214948 (0x347a4): "A flagpole juts out portwards from the top of the mast, far too insubstantial to bear any weight. From it hangs the ensign of the British Merchant Navy (which you could just reach the bottom of)."
! 215068 (0x3481c): "The flagpole juts out to port with the prevailing... wind?"
! 215104 (0x34840): "The flag has fluttered to a heap on deck."
! 215132 (0x3485c): "Piece of advice - it's never very comfortable wrapping yourself in the Flag."
! 215180 (0x3488c): "Broad, heavy, scarlet cloth, halfway between a silken sheet and a carpet, with a cross and a Union Jack in one corner."
! 215256 (0x348d8): "an"
! 215260 (0x348dc): "A plain old piece of timber."
! 215280 (0x348f0): "An old timber prop, once the spar of a main mast."
! 215312 (0x34910): "The broken flagpole, a plain timber spar, lies beside the mast."
! 215352 (0x34938): "You stand in the triangular prow of the ship, which is graced by a carved and painted figurine and named the ~Lady Magdalena~. There is no sign of water, but the boat is rocked too often for it to be aground. And the glassy mist hangs ahead."
! 215492 (0x349c4): "Oh, you startled me for a moment there! I am getting flighty."
! 215532 (0x349ec): "In the Lady Magdalena's loose grip is a traditional sailor's good-luck token: a green-leafed branch, to attract the gulls of an approaching shore."
! 215628 (0x34a4c): "The square stern of the ship looks out south, not onto receding waves, but to what seems a tunnel through dense, glassy mist. You can faintly make out an odd, pale reddish sand bank in the distance."
! 215744 (0x34ac0): "The boat runs fore."
! 215756 (0x34acc): "The top of the anchor chain is wound around the capstan, a great wheel on the deck beside you. The chain disappears over the side."
! 215832 (0x34b18): "In the lush, verdant (which is to say, under-cared for) gardens of Meldrew House, where a stream gurgles pleasantly as it meanders through reeds. The house rises up high above you to the south and you dare not be seen from the windows by the rest of the family, so you'll have to go northwest, deeper into the gardens, or else east along a path hugging the wall."
! 216040 (0x34be8): "The Hall is not safely climbable."
! 216060 (0x34bfc): "Better not... you'd be seen from the Orangery."
! 216088 (0x34c18): "Better not... you'd be seen from the Library."
! 216116 (0x34c34): "Better not... you'd be seen from the Old Ballroom."
! 216148 (0x34c54): "The bulk of the Hall is in your way."
! 216172 (0x34c6c): "On the house wall is a coal bunker, whose door stands open."
! 216208 (0x34c90): "On the house wall is a coal bunker, whose loading door is shut."
! 216244 (0x34cb4): "The east-west path along the foot of Meldrew Hall ends here at one of the carved walls bordering the garden."
! 216304 (0x34cf0): "You'd be seen from the Library that way."
! 216328 (0x34d08): "You'd be seen from the Old Ballroom that way."
! 216356 (0x34d24): "There's no door into the Hall."
! 216372 (0x34d34): "The walls of the Hall are unclimbable to someone suffering from your degree of vertigo."
! 216424 (0x34d68): "The stone wall blocks further passage east."
! 216452 (0x34d84): "A shrub is being nursed in a wide round tub in the centre of the path, sheltered behind the wall."
! 216508 (0x34dbc): "The garden wall once bore painted carvings, but they have fallen into disrepair."
! 216560 (0x34df0): "The timber lid stands open beside the shrub, revealing the old barrel-hatch."
! 216608 (0x34e20): "Beside the shrub is a timber hatch, three feet across."
! 216644 (0x34e44): "You stand in the shade of a great plane tree, seedlings for which were brought back from Spain by an ancestor of yours in 1806. To the southeast is a stream, to the west is a small clearing and to the north a single break in the green privet hedge marks the entrance to the famously difficult Meldrew Hall Maze. A signpost reading ~To the Mosaic~ points east across the lawn."
! 216860 (0x34f1c): "Several hundred years of rolling have made this a rather fine patch of grass, between the privet hedge (north), the plane tree (west) and the mosaic (east). Unfortunately, it is adorned with all the really ugly ornaments (gnomes, plaster nymphs, stone windmills to grow flowers in), this being the corner of the garden least visible from the house."
! 217072 (0x34ff0): "The options appear to be east or west."
! 217096 (0x35008): "Prominent amongst these is a plaster statuette, a bust of a woman."
! 217140 (0x35034): "It stands four feet high. At the base is an engraving: ~Self-Portrait, H.M. '54~. (It's presumably not by Her Majesty the Queen, though.)"
! 217240 (0x35098): "The lawn is lightly coated with broken plaster and dust, and in the spot where the statuette once stood is a dark, ancient well."
! 217312 (0x350e0): "You can make out nothing below, and the well is too small to climb down."
! 217352 (0x35108): "This sunken corner of the garden has been excavated and then covered over with tough perspex to protect it from visitors' shoes. It consists of a time-worn Roman mosaic, divided into four quadrants, each showing scenes of idealised Roman life. There was probably a villa on this site, but your family has never been keen on archaeologists so the excavations went no further."
! 217580 (0x351ec): "From here you can climb back up to the lawn."
! 217604 (0x35204): "Made of terra-cotta and ceramic fragments, it has held together surprisingly well."
! 217656 (0x35238): "Splendid, you're having a ball. I do hope you hit it off."
! 217692 (0x3525c): "A hard wooden ball, palm-sized, rolls about across the mosaic."
! 217732 (0x35284): "A clearing at the edge of the garden, surrounded by walls and the privet hedges of the maze. To the east is the plane tree, to the west an opening in the wall makes a garage entrance and to the south is a small vegetable garden."
! 217860 (0x35304): "A recently-turned vegetable garden, using up a shady corner of the garden. The patch testifies more to good intentions than horticulture."
! 217948 (0x3535c): "From this corner, you can only go back to the clearing."
! 217980 (0x3537c): "A giant runner-bean plant leads up vertiginously into the sky from here."
! 218028 (0x353ac): "Only a runner-bean plant graces the vegetable garden."
! 218064 (0x353d0): "At the top of the beanstalk, in amongst the clouds. There is no safe way to go from here except back down, not surprisingly. A dangerous way might be to step out onto the clouds to the north, but even if this is a fairy-tale it would be taking a lot on trust."
! 218216 (0x35468): "The clouds are too tenuous that way."
! 218240 (0x35480): "A modest brick garage, built into the garden walls. A big open doorway leads east onto the clearing."
! 218300 (0x354bc): "A motorised garden roller of the kind you sit inside, among whose simple controls is a big on/off switch."
! 218368 (0x35500): "The garden roller sits here, its engine still running."
! 218404 (0x35524): "A big motorised garden roller is parked here."
! 218436 (0x35544): "The funny thing is, they didn't have weedkillers in the early nineteenth century, and yet they still planned some marvellous gardens."
! 218520 (0x35598): "If squeezed, it squirts weed killer over the ground. There are many warning labels about getting it on one's hands."
! 218592 (0x355e0): "In the shadows is a weed killer bottle."
! 218620 (0x355fc): "Do you think there's anywhere in the garden particularly suitable for such an implement?"
! 218676 (0x35634): "Hanging from a hook is a bladed agricultural implement."
! 218712 (0x35658): "A magnificent view of the gardens would be yours, were it not for the branches and leaves which surround you. You can make out Aunt Jemima up at one of the conservatory windows, but hide from her view. Down below, the privet-hedge layout of the maze can be seen through the lower branches."
! 218872 (0x356f8): "No, don't go out on a limb."
! 218892 (0x3570c): "the"
! 218896 (0x35710): "A maze of green privet passages, all alike."
! 218924 (0x3572c): "The privet hedges are in the way."
! 218944 (0x35740): "This is an old stone patio in the heart of the garden maze. A missing flagstone offers an intriguing dark prospect beneath."
! 219020 (0x3578c): "The privet hedges are in the way."
! 219040 (0x357a0): "Up?  Are we playing the same game?"
! 219064 (0x357b8): "Sticking out of some soft earth is a perfectly-carved marble rose."
! 219108 (0x357e4): "Perfection set in stone. Not a gift for mortal women!"
! 219144 (0x35808): "This flagstoned rampart on the hillside looks across the valley, down (unfortunately) to the motorway below. Coaches pass by, reminding you of the rapidly approaching time when visitors will have to be let in again for the summer. The only safe way to go is back east into the maze. To one side is a plaque."
! 219324 (0x358bc): "The hillside is too steep."
! 219340 (0x358cc): "~This viewpoint, one of the finest in the county, was laid down by Capability Meldrew, a well-known landscape gardener of his day. It was intended as one of the rewards of the garden maze, and was constructed c. 1808 after an earlier folly on the site collapsed.~"
! 219500 (0x3596c): "A miniature plastic etching rests on the plaque."
! 219532 (0x3598c): "What's the point of a drawing so small it might almost be a playing card?"
! 219576 (0x359b8): "No larger than a playing card, it depicts the Folly which used to stand on the hillside outcrop."
! 219632 (0x359f0): "This is a rampart on the hillside, a natural ledge leading east. Down below in the valley, rough cottages surround a church. Labourers toil in the fields, and a hay wain is being pulled across the river.^^Towering over you is a monstrously awful piece of architecture, a Folly. The freestanding tower has no appreciable purpose and no apparent entrance. The latter is just as well since it looks extremely unsafe."
! 219884 (0x35aec): "The hillside is too steep."
! 219900 (0x35afc): "Decidedly unsteady."
! 219916 (0x35b0c): "Whatever you do, it'll always be a bean pole."
! 219948 (0x35b2c): "A bean pole, of the kind used to grow climbing plants, rests against the side of the tower."
! 220000 (0x35b60): "A square grid of plots of grass and seedbeds, all alike."
! 220036 (0x35b84): "Capability Meldrew and his gang of workmen are delicately planting a sapling plane tree here. Your disturbance annoys them immensely and you are immediately arrested for vagrancy and theft. After a few months in prison, you are hauled up before the County Assizes and sentenced..."
! 220208 (0x35c30): "You're strolling on a pleasant bricked path, passing from the outer rooms of Meldrew Hall to a track through the eastern side of the garden."
! 220284 (0x35c7c): "Named by some family wag generations back, this is a restful hedge garden, crowned with a summer house to the north, widening out to a broad croquet lawn east."
! 220380 (0x35cdc): "A flock of sparrows crowds around the gutters of the summer house. Every now and then one flits up and lands somewhere else, and they bustle about chirpily."
! 220476 (0x35d3c): "An old wooden summer house, reeking of varnish and uncertain beneath your feet. Several segments of the tall glass many-sided pyramidal roof are missing and others are cracked, but this is still somehow a homely and welcoming retreat. The only entrance is also the only exit."
! 220648 (0x35de8): "Croquet is the Devil's own game!"
! 220672 (0x35e00): "It's for mashing croquet potatoes."
! 220696 (0x35e18): "A croquet mallet stands by one wooden wall."
! 220724 (0x35e34): "How easily are the weak mesmerised by baubles."
! 220756 (0x35e54): "It is beautifully polished, and captivates the eye. You could stare for hours..."
! 220804 (0x35e84): "Something golden hangs by a chain from a loose pane in the roof, but it's too high up to reach."
! 220860 (0x35ebc): "Among dense hedges by the shabby wood-slatted back of the summer house. Dark scratchy branches hem you in, but you could scramble down to the west or out onto the croquet lawn southeast."
! 220976 (0x35f30): "You could easily squeeze past the loose board south into the summer house."
! 221020 (0x35f5c): "One board of the back wall is noticeably loose, making a good-sized crack."
! 221068 (0x35f8c): "Through the crack you can see the summer house."
! 221096 (0x35fa8): "your"
! 221100 (0x35fac): "Not at all shy when on his own territory."
! 221128 (0x35fc8): "The squirrel sits here, watchfully pecking away at the nuts."
! 221168 (0x35ff0): "The lawn is enclosed on all sides, but for a gap back west."
! 221204 (0x36014): "There are six arched hoops in a croquet set, arranged around a central peg. These ones have been safely anchored in place since the lawn was laid out in, oh, Midsummer 1923 if family lore is to be believed."
! 221332 (0x36094): "A good strong strongbox, buried for two centuries and now unearthed; it bears a fine gothic iron lock, and a tasteless coat of arms (a wild boar rampant)."
! 221432 (0x360f8): "You might have read about this. One of your ancestors is the key, perhaps?"
! 221476 (0x36124): "A very old instrument for measuring altitudes, this is all that remains of Sir Joshua Meldrewe's stolen hoard of gold. There is an eyepiece."
! 221564 (0x3617c): "A mighty fine instrument, though not much use hand-held."
! 221600 (0x361a0): "The rich loam, the silver of earthworms, the dignity of toil... none of these pastoral consolations is yours as you scrabble in the dirt."
! 221684 (0x361f4): "This is a murky hillside cave, whose mouth opens to the northeast, though a tight squeeze might lead a little way west. Outside is a clear starry night. There is no traffic noise, and the air smells fresh."
! 221804 (0x3626c): "Hanging up on an iron bracket is a flaming torch."
! 221836 (0x3628c): "an"
! 221840 (0x36290): "It is a summary of the writings of a polemical monk called Gildas, and relates to events following the fall of the tyrant Vortigern at the turn of the fifth century A.D. After dark decades of pillage by Saxon mercenaries, Britain was reunited by Ambrosius Aurelianus and then defended at the Battle of Badon Hill, some time in the early years of the sixth century.^^This remarkable victory was of no religious significance, so Gildas does not dwell upon it. He tends only to mention bad kings and leaders, and then chiefly to insult them. (Talking about Gildas is an excellent way to annoy an Anglo-Saxon historian.)  Nobody even knows where Badon Hill is any more, or anything else about it, although some students of Welsh poetry believe Ambrosius was the source of the legend of King Arthur."
! 222344 (0x36488): "An uncomfortable spur of rock on the hillside crags. The only natural access to this spot is a crevice in the hill to the east, but there is also a securely fastened rope hanging down into the darkness."
! 222464 (0x36500): "The crags are too precipitous."
! 222484 (0x36514): "You are hanging perilously on a hemp rope, suspended from an overhang of rock above, which drops down into the darkness of the valley. On the tracks below, patrols of men can be heard, and you feel instinctively that they are not friendly."
! 222628 (0x365a4): "Up and down are it, quite frankly."
! 222652 (0x365bc): "A single yellow daisy grows from a little tuft of grass on the crags."
! 222692 (0x365e4): "The geography is strangely familiar here. You are on a natural shelf on the hillside, overlooking the valley below. An all-but invisible cleft in the rock leads to a cave to the southwest, and the slope can safely be traversed to the east.^^It is a brightly moonlit night, cool as in late spring. There will be a sharp frost tomorrow. Down in the valley, a great cartwheel circle of camp fires illuminate some dark shapes, perhaps crude encampments. There is no other sign of civilisation."
! 222980 (0x36704): "The hillside is too steep."
! 222996 (0x36714): "You stand beside a Roman villa, whose columns cast shadows of an Empire in the moonlight. It is thirty years since the fall of the West, and Britain is cut off from the continent, where soon even the existence of the Anglis will become a myth. This villa has survived the pestilence and devastation of the civil war, and although it must be a couple of centuries old, it is still standing. From here you could cut across the hillside east to west, or slip in through a none-too-secure timber door."
! 223288 (0x36838): "A stream runs past the villa and cascades down the hillside here, to join the river far below, near the Roman road which will, in 1500 years time, become the motorway which so spoils the view from your back garden. A rough ladder of wood lashed together with leather rests against the villa at the lowest point of the tiled roof."
! 223480 (0x368f8): "You climb the ladder and are about to jump onto the roof when you catch sight of a man swaddled in animal furs, spreadeagled over the tiles, looking down into the central courtyard of the villa. He has a nasty-looking sword and since he hasn't seen you, you quietly shin back down the ladder again."
! 223652 (0x369a4): "The shadowy cloisters of the villa's atrium. You disturb a fieldmouse, and hear the scratching of tiny claws on stone. Moonlight filters in from the central courtyard to the south, and a rotten timber door leads back north."
! 223780 (0x36a24): "Resting against one pillar is a horn made from a tusk, mounted on a long spear-like pole."
! 223836 (0x36a5c): "The central well of the villa, ringed with columns. On the north side is a cloister and stone-linteled doorways lead east, south and west. The central floor area is commanded by a beautiful Roman mosaic, quartered into individual scenes, around the edges of which are vents from the hypocaust. There is no roof over the courtyard, and the atrium is lit by moonlight."
! 224052 (0x36b34): "The four quarters show white-beards in the Forum, farmers in Italian fields, a military fortification and a grain ship unloading at Ossia."
! 224140 (0x36b8c): "Whatever function this spacious room once had, now it is evidently home to military men, for it is filled with crude armour, spears, rough blankets which are little more than animal hides. Fortunately for you the guards are absent."
! 224280 (0x36c18): "A crude six-sided die made from animal bone."
! 224308 (0x36c34): "a pair of"
! 224316 (0x36c3c): "What was once the villa's triclinium, or kitchen, is now deserted and long since ransacked for metal. (Nobody lives on their own in this century, and this villa wouldn't be easy to defend.)  A doorway to the east gives onto the atrium."
! 224464 (0x36cd0): "The well has a hinged wooden cover. You can't tell by looking how deep it is."
! 224512 (0x36d00): "The hinged wooden cover is raised, revealing a circular well about a yard in diameter. It is very dark inside."
! 224580 (0x36d44): "In one corner is a hinged wooden cover of some kind, which is shut."
! 224624 (0x36d70): "You are clinging perilously to the walls of the deep and dangerous well. You can hardly see a thing, even with the aid of the torch, but curiously enough you feel warm air blowing across you from the east."
! 224736 (0x36de0): "Too risky. There might not be anything that way, for all you know."
! 224776 (0x36e08): "This very low almost-cellar underneath the atrium is a tiny access space for log fires which are kept going to provide a form of central heating for the villa. They are lit and going away nicely, interestingly. It isn't very warm by twentieth-century standards, but you have to admit it works.^^A tiny amount of light filters in from the vents in the roof; just enough to see by. The only way in seems to be the way you came."
! 225028 (0x36f04): "The log fires are hot, and anyway the only way out large enough for you is back west."
! 225080 (0x36f38): "the"
! 225084 (0x36f3c): "A well-flagstoned forecourt at the villa entrance, surrounded by lesser wooden buildings. Some of these are in use as stables, and figures of men slip between them. You hide from sight, not wishing to draw attention to yourself. Up on the hill, where Meldrew Hall will one day be built, men on horseback can be seen circling the access track. For a deserted villa, this is certainly well-guarded."
! 225324 (0x3702c): "Well, here you are, imprisoned again. This time the cell is a tent of stitched animal hides, perhaps twenty feet in diameter, supported by a central pole. You have no idea where the entrance is, because you were blindfolded on the way in. There is at least a dim light from the camp-fires outside the tent."
! 225504 (0x370e0): "This tent doesn't seem to have an exit, either."
! 225532 (0x370fc): "He is dishevelled, wiry and unconscious. He is also covered with dust and leaves, as if he has been lying down on his front outdoors for hours."
! 225620 (0x37154): "An unconscious Saxon spy is slumped on the ground. Occasionally faint noises can be heard from him."
! 225680 (0x37190): "Luckily for you the tent, now collapsed, was hardly being watched at all, because all the attention is diverted to a ghastly ritual being carried out over beyond the camp-fires. But your luck cannot hold for long. You are so surrounded by hostile territory that you simply have nowhere to run or hide. Things are, not to put too fine a point on it, looking grim."
! 225892 (0x37264): "Far, far too risky."
! 225908 (0x37274): "An erratic glacial rock, which seems in the feverish firelight to make a natural dolmen, can be made out to the east, on the other side of an almost-extinguished campfire of hot coals."
! 226016 (0x372e0): "You stand beside the eerie dolmen, surrounded by the terrible noises and incantations of a druidic rite."
! 226080 (0x37320): "Far, far too risky."
! 226096 (0x37330): "I wouldn't wave that around if I were you!"
! 226124 (0x3734c): "Resting on top of the dolmen is a polished blue stone."
! 226160 (0x37370): "You are transparent like a ghost."
! 226184 (0x37388): "It is a frosty, clear night, but there is a scent of camp-fires burning in the distance. You are passing through the landscape as if a ghost, and all seems faintly unreal. To the east is one side of an animal-hide tent, but there is no way in from here. To southwest, some soldiers sit around the embers of a fire. There is a terrible sense of something about to happen."
! 226400 (0x37460): "This is the tent of a thin, reedy man who wears no uniform but has an obvious and commanding presence. He has an aquiline, patrician nose and, at five feet four, is taller than anyone else present. The others are advisers, junior officers, scheming politicians and their like. They are keeping their distance from a trestle table at the north end of the tent."
! 226612 (0x37534): "This is a kind of improvised shrine. A trestle table bears entrails, crude drawings sketched out on hide, and caged animals: draped beside it is a primitive tapestry of a bear reared up on its hind legs."
! 226740 (0x375b4): "Primal, bestial, terrifying."
! 226760 (0x375c8): "An absolute essential."
! 226776 (0x375d8): "On the table is a heavy iron mascot of some kind."
! 226808 (0x375f8): "The mascot is in the shape of an ankh, with a lemniscus (or infinity) symbol moulded onto it."
! 226868 (0x37634): "Beside the table is a more substantial adviser, as if she too walks in this strange spirit plane. She is wearing frightening druidical robes, of strange pelts and furs, with nasty-looking charms around her neck. Every so often, she seems to catch sight of you out of the corner of her eye, but then look round and see nothing. The military men do not believe in her power, and yet... they treat her with respect."
! 227116 (0x3772c): "You can almost smell fear here. A motley platoon of soldiers are sitting about the embers of a fire. None are talking or sleeping, and the false good humour of the evening has died away. At first light, you realise, there will be a battle. It isn't a risk you'd like to run in their place. And there is a strange light already in the east... not yet a dawn, for the soldiers seem unaware of it."
! 227352 (0x37818): "A standing stone, perhaps a glacial erratic, stands here and on top of it is a shining blue stone, whose brightness almost blinds you. You feel irresistably drawn to it, and your hand reaches out..."
! 227476 (0x37894): "A strangely familiar, dusty passage, sloping down from a southern end bathed in hostile light to some kind of metal barrier in the north."
! 227560 (0x378e8): "Flurries of green luminescence whirl endlessly around you, west to east and over."
! 227612 (0x3791c): "The flurries have almost endless fascination... but you manage to tear your eyes away after, oh, an hour?"
! 227676 (0x3795c): "Your ghostly self is embedded in a diagonal downward shaft (descending to the east) entirely filled with dry sand. Solid flagstones line the walls."
! 227768 (0x379b8): "Flaming torches bracketed in the wall gutter as the last oxygen in the air is consumed, and the flicker of flame plays across the yellow-orange glaze of the tomb walls.^^This octagonal chamber is lined with Egyptian hieroglyphics. Sand spills across the floor from under the sole entrance, sealed by an ingenious stone slab."
! 227960 (0x37a78): "some"
! 227964 (0x37a7c): "A kind of ship's wheel (of eight-spoked timber) is affixed to the northwest wall."
! 228016 (0x37ab0): "A dismal crypt, disused, rainswept and strewn with leaves. Light streams in from the square hole in the roof. There are no bones or urns on show."
! 228104 (0x37b08): "The mural stands slightly to one side, revealing a passage leading downward."
! 228152 (0x37b38): "The south wall forms a giant bronze mural, which has stood the test of time."
! 228196 (0x37b64): "The mural depicts an old bearded wise man following a star in the western sky. He has his right arm around an attractive young woman and holds a bundle of wands with his left hand. Around the border are astrological symbols of all kinds, from Tarot suits to zodiacal constellations."
! 228364 (0x37c0c): "An eerie passage, running down from an opening at the north to murky depths in the south. The walls are jagged, uneven and decorated with bones. An unpleasantly stale, charnel odour drifts in through a gap to the east."
! 228496 (0x37c90): "You appear to be standing on a wrought iron key."
! 228524 (0x37cac): "A figure-eight double ring, a long barrel and a finely-cut ten-groove claw: this is the ultimate in keys. It is superb."
! 228596 (0x37cf4): "A long, winding, vile passage through the earth, running east to west. The distasteful odour grows stronger as you go east."
! 228672 (0x37d40): "Well, perhaps ~sarcophagus~ is a little melodramatic, but it's that kind of moment. This must be somewhere under the old parish church. You are stooped over inside a stone tomb, stained and crumbled with decay, broken only by a crevice you crawled in by. It is a nightmarish place."
! 228844 (0x37dec): "Nightmarishly, even the floor you kneel on is a fallen tombstone."
! 228884 (0x37e14): "The gist of the inscription is: ~Henri Maladreue, obiit mcdlvi.~"
! 228928 (0x37e40): "A large, grisly cave, deep under the garden, dimly lit and eerie. Darkness curls around the natural pillars of rock like a mist: and there is a peculiar, vaguely familiar odour to it. The only obvious routes out are an uneven passage climbing to the north and a crawl west."
! 229096 (0x37ee8): "You bumped into something unpleasant there."
! 229124 (0x37f04): "Leading down."
! 229136 (0x37f10): "an"
! 229140 (0x37f14): "The odd smell seems to be ozone, and it drifts up from a previously concealed aluminium staircase."
! 229200 (0x37f50): "The cartoonist Heath Robinson used to specialise in drawings of fantastically complicated machines of string, pulleys, levers, counterweights, cogs, mice running about on wheels and the like. Just such a contraption fills the west end of this room, though most of the workings are behind a glass wall which, although running with age, is as solid as the day it was built. The parts are very old (hand-made, not machined) but uncorroded.^^The only way out appears to be via the crawl to the east."
! 229496 (0x38078): "The north edge of the room is a big sheet of dull amber-coloured metal."
! 229540 (0x380a4): "Someone rather good-looking (you can't help thinking) is reflected in the metal surface."
! 229596 (0x380dc): "How tantalisingly valuable it seems."
! 229620 (0x380f4): "Solid, heavy, reliable, out of reach on the other side of the glass."
! 229664 (0x38120): "You really should try to be more awestruck, for this is Merlin's cave, the hub of Creation. Every visitor perceives this place differently, according to his or her own myths and beliefs. Your particular creed being science, there is only a black metal one-metre cube with an unimpressive collection of gauges and dials. An aluminium staircase leads up."
! 229888 (0x38200): "The lower, on, position is labelled ~Determinism~. The upper, off, position is labelled ~Chance~."
! 229952 (0x38240): "Particularly prominent are a large dial, like the volume control on an expensive hi-fi amplifier, and a big electrician's switch. Both are labelled in small print."
! 230056 (0x382a8): "Above the dial is a lower-case letter h with a slashed line through it. It is currently turned to 1.055 or thereabouts. There is something worryingly dangerous about its matter-of-factness."
! 230176 (0x38320): "A treasure in every sense, but misted over, like condensation on a cold window. Odd shapes seem visible through the haze: a horse's head, castle walls, a priest's crook."
! 230284 (0x3838c): "Sitting on the grass, beside the well, is a glowing golden orb."
! 230324 (0x383b4): "You half-stand, half-float in a golden, misty sphere perhaps ten yards across, which slowly spins. The centre, out of reach and somehow insubstantial, is an eight-by-eight lattice of oblong crystals, bathed in warm pearly light."
! 230468 (0x38444): "Images lurk about the array of oblong crystals."
! 230500 (0x38464): "an"
! 230504 (0x38468): "They are extremely hard to see and impossible to touch, as if you can only catch anything at all through the corner of your eye."
! 230580 (0x384b4): "A warm winter's night in the ancient city of Alexandria, on the Heptastadion causeway across the harbour to the Island of Pharos (to north). The Mediterranean waters lap against the land bridge, and the whole city (southeast) is lit up with torches: it is a night of celebration."
! 230752 (0x38560): "The island of the Pharos: the lighthouse after which others are named, one of the Seven Wonders of the World, blazes into the sharp moonlit sky. It is 120 metres high, a circle on an octagon on a square.^^A light wind blows across the coastal defences. On this spot, seventy-two scholars first translated the Old Testament into Greek: shivering continuously if it was as chilly as this. A narrow causeway runs south across the harbour."
! 231020 (0x3866c): "The causeway is the only land route off the island."
! 231048 (0x38688): "The Pharos is unclimbable, alas."
! 231072 (0x386a0): "That iron key seems to have washed up here..."
! 231104 (0x386c0): "...and there's the strange stone again."
! 231132 (0x386dc): "A rusty seaweed-wreathed iron grating lies open here."
! 231168 (0x38700): "In one wall of the wave defences is a rusty seaweed-wreathed iron grating, closed up tight."
! 231224 (0x38738): "The iron key, out of reach below, is glued somehow to the strange stone."
! 231268 (0x38764): "Interestingly, a key which looks as if it would fit the grating can be seen inside the passage beneath."
! 231328 (0x387a0): "Oh dear, surely it's gratingly obvious what this fits?"
! 231364 (0x387c4): "Down on a dark stone jetty, where the waters of the Alexandrian harbour splash insistently. Rough-hewn steps rise up the island through the grating."
! 231456 (0x38820): "A skiff (a small sail-boat) is moored up here."
! 231492 (0x38844): "You could easily sail away: where you would end is at the mercy of the tides and the night breeze, since you have no idea how to guide a rudder or trim a sail."
! 231584 (0x388a0): "an"
! 231588 (0x388a4): "A cardioid of the kind favoured by Valentine's cards rather than surgeons.^^It reminds you oddly of one of the symbolic pieces in Monopoly - the ship, the hat and so on."
! 231696 (0x38910): "There must be more to this marvellous figure somewhere."
! 231732 (0x38934): "An adamantine heart lies in the skiff."
! 231760 (0x38950): "As the skiff passes the jaws of the Royal Harbour, beneath the great Pharos light, you have a final view of the receding civilisation of Alexandria: ahead lies the vast, oil-calm Mediterranean and moonlight on the waters."
! 231892 (0x389d4): "The skiff is not under your control."
! 231912 (0x389e8): "You drift in the wide, peaceful Lunar sea. Curious fish, their yellow-green eyes gleaming beneath the silver ripples, brush past your wake: the night zephyr is almost slack but still you drift. Minutes pass like hours in paradise."
! 232056 (0x38a78): "You feel only a drug-like calm."
! 232080 (0x38a90): "The great crossroads at the heart of chlamys-shaped Alexandria, greatest city of the civilised world. The northwest-southeast road runs from the causeway to the Tower: the main road runs southwest from the Necropolis gate, northeast to the great public buildings of the city."
! 232240 (0x38b30): "A spacious, sombre, moonlit and magnificent valley of tombs, some brand new, just outside the walls of Alexandria (to the northeast). Already it is ancient. Most of the little termite-hill style pyramids have been invaded time after time: indeed, one pyramid's entrance gapes open to the south."
! 232424 (0x38be8): "This is no place to wander after dark."
! 232448 (0x38c00): "some"
! 232452 (0x38c04): "Birds of prey circle high in the night sky, their talons glinting in the moonlight."
! 232500 (0x38c34): "You stand near the tombstone to which the birds of prey were so inexplicably drawn."
! 232548 (0x38c64): "You stand near the tombstone, which has become rather more interesting now that a flight of steps downward has appeared."
! 232616 (0x38ca8): "It bears just one word of epigram: ~GALITA~. Below that is a curious face, with an open empty socket of a mouth."
! 232692 (0x38cf4): "An amber gem gleams in the mouth of its face."
! 232724 (0x38d14): "Are you sure it isn't inside out?"
! 232748 (0x38d2c): "A cloak of many colours lies folded on it."
! 232776 (0x38d48): "A fine cloak, grey-lined, sapphire-encrusted, rippled across with rainbow fabrics from the trade routes of the world."
! 232848 (0x38d90): "A fine grey cloak, sapphire-encrusted, lined with rainbow fabrics from the trade routes of the world."
! 232908 (0x38dcc): "Ransacked, dimly-lit, cramped and empty, this rough-built and uneven burial mound is to the Great Pyramids of Giza (built just a century before) what the summerhouse in your garden is to Windsor Castle. There are only dull painted writings, an unpleasant odour and a passage out to the north."
! 233092 (0x38e84): "some"
! 233096 (0x38e88): "One of the so-called Pyramid Texts making up the so-called ~Book of the Dead~. This dramatic passage seems to be devoted to wise men preparing their bodies to rise in the afterlife, anointing themselves with oil. An interesting motif of ten strokes, arranged^^   III IIIIII I^^catches the eye."
! 233284 (0x38f44): "A perfectly-cut room of rose-coloured granite, twelve feet across, painted in yellows and browns to simulate alabaster panelling. This is the latest in modern funerary apartments.^^There's a couch for visitors, a table, a flight of steps up and a doorway to the west, flanked by two stone sphinxes."
! 233472 (0x39000): "No grave would be complete without one."
! 233496 (0x39018): "two"
! 233500 (0x3901c): "The sphinxes seem to stare balefully at you."
! 233528 (0x39038): "A comfortable-looking wooden couch, covered with weave matting."
! 233568 (0x39060): "One of the sphinxes does have rather a prominent nose, it must be said."
! 233612 (0x3908c): "Splendid."
! 233620 (0x39094): "A perfectly-cut room of rose-coloured granite, twelve feet across, painted in yellows and browns to simulate alabaster panelling, at the foot of a flight of steps which leads only to a sealed wall."
! 233740 (0x3910c): "No grave would be complete without one."
! 233764 (0x39124): "Stone sphinxes guard the west doorway, staring balefully at you."
! 233804 (0x3914c): "The weave matting on the couch is now in some disarray."
! 233836 (0x3916c): "A comfortable-looking wooden couch, covered with weave matting."
! 233876 (0x39194): "two"
! 233880 (0x39198): "Two Napoleonic officers stand awestruck as light splashes from their lanterns over the riches of the tomb."
! 233944 (0x391d8): "The officers wear the uniforms of the Emperor's 1798 occupation of the Nile Delta, and carry fine brass lanterns."
! 234016 (0x39220): "The passage, descending from the east down to the west, is cut from marble, lined with painted scenes from the fashionable comedies of Menander, decorated with Alexandrian coloured glass ornaments.^^The expression ~You can't take it with you~ doesn't seem to be popular hereabouts."
! 234184 (0x392c8): "Just an east-west passage."
! 234204 (0x392dc): "You simply can't bear to look. It might be a monkey... at least it has a tail... No. No, you have to look away."
! 234276 (0x39324): "Despite the tasteful decor, the most hideously ugly model animal you have ever seen sits on a little shelf here."
! 234348 (0x3936c): "Oh dear."
! 234356 (0x39374): "Exquisite. Simply charming."
! 234376 (0x39388): "The passage opens out onto the burial chamber below."
! 234408 (0x393a8): "Unfortunately, the passage slants down only into a solid marble wall."
! 234452 (0x393d4): "A really luxurious burial chamber, far beneath the entrance court.^^A yard-wide square channel runs away fractionally east of north, in an apparently endless stooped passage.^^On the west wall are three curious sockets, above a painting of a priest of the half-mythical pharoah Sosostris in full sceptred, grey-clad regalia."
! 234664 (0x394a8): "The passage rises sharply to the east."
! 234688 (0x394c0): "Drawn in the odd aspect favoured by the Egyptians, who believed in ideal angles rather than accurate drawing. The sceptre, only half the size of the large ones you once saw in the British Museum, looks oddly familiar.^^This close to the wall, you notice words written above the three sockets."
! 234860 (0x3956c): "Golden, kingfisher-blue, smoothly curved, immensely heavy, beautiful. And final, and dead."
! 234920 (0x395a8): "A beautiful gold and blue mummy case, or sarcophagus, rests massively here."
! 234972 (0x395dc): "the"
! 234976 (0x395e0): "The sceptre projects from the first socket like a handle."
! 235008 (0x39600): "The sceptre projects from the second socket like a handle."
! 235040 (0x39620): "The sceptre projects from the third socket like a handle."
! 235072 (0x39640): "A copy, half-size, of the one from Tutenkhamun's sarcophagus. It isn't real gold, either."
! 235132 (0x3967c): "Of no use to anyone these last two thousand years, sorry!"
! 235168 (0x396a0): "The great lid of the coffin is open."
! 235192 (0x396b8): "You lie in the mummy case, your arms folded across each other, face grimaced, running out of air rapidly and with almost no room to maneouvre. The coffin lid is about ten times heavier than you, and its seal is very good."
! 235324 (0x3973c): "an"
! 235328 (0x39740): "There must be more to this marvellous figure somewhere."
! 235364 (0x39764): "It reminds you oddly of one of the symbolic pieces in Monopoly - the car, the boot and so on."
! 235424 (0x397a0): "An adamantine skull lies here, as if casually dropped by a god's hand."
! 235472 (0x397d0): "The great Stadium of Alexandria, with capacity enough to hold the whole population of the city: and it looks full. Olympic openings in the age of television have nothing on these people. The procession surges continually in, around the track and then out again, and amid the bustle you cannot push through."
! 235652 (0x39884): "It would be easier to breathe back southwest."
! 235684 (0x398a4): "Tragically, the Theatre is closed tonight, but roads lead past the great stepped bowl: north toward the Palace, south to the Museum and west to the harbour-front."
! 235780 (0x39904): "The main southwest-northeast road forks off with a road due north to the Theatre. Despite the kaleidoscopic din you are impressed by the sober majesty of the Museum of the Ptolemies, whose fine portico entrance, decked with reliefs, is southeast."
! 235928 (0x39998): "Reliefs of the cat-god bestride the square-cut entrance. The fanaticism of the cult of the Cat in Lower Egypt has such a stranglehold that the image is everywhere. You remember reading somewhere that passers-by in the street have been torn to death before, just on suspicion of mistreating a sacred cat."
! 236112 (0x39a50): "This is not the famous Alexandrian tower (which is not due to be built by the Emperor Domitian for centuries), just an anonymous little monument on the same site. It is square-cut inside and there's only a small exit northwest."
! 236248 (0x39ad8): "The heavily defaced door opens onto a staircase up."
! 236280 (0x39af8): "In one wall is a door heavily defaced with writings, the same word, over and over in a hundred tongues and scripts: the word ~Sosostris~, in fact."
! 236372 (0x39b54): "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads east. In the centre of the room is a table, which is bare."
! 236496 (0x39bd0): "Peculiarly, the hanging curtain seems to be solid iron when you walk into it."
! 236548 (0x39c04): "Madame Sosostris stares at it fixedly as she meditates."
! 236588 (0x39c2c): "Unmoving."
! 236596 (0x39c34): "Known to be the wisest woman in Asia Minor."
! 236624 (0x39c50): "Madame Sosostris, famous clairvoyante, meditates here."
! 236664 (0x39c78): "It needs to be left to mature, and yet there's something awfully familiar about it."
! 236716 (0x39cac): "You seem to have dislodged one of the wooden beams used by the tomb's builders: a useful length of greenish oak."
! 236784 (0x39cf0): "Perhaps it could be put aside for later use."
! 236816 (0x39d10): "Ready to use."
! 236828 (0x39d1c): "For me? Oh, you shouldn't have... oh, you didn't. Well give it to someone else then."
! 236888 (0x39d58): "A silver locket on a thin chain, with a heart-shaped picture of a knight placing a rose in his lady's hair. Quite nauseously romantic."
! 236972 (0x39dac): "Down by the sea-front, in the old harbourlands, surrounded by warehouses. The Mediterranean laps darkly against the hard, splashing an occasional wave up the slope. The city, and the party, lie back east."
! 237096 (0x39e28): "There's nowhere to go but the city, east."
! 237120 (0x39e40): "A grizzled sailor sits at a harbourside table."
! 237152 (0x39e60): "an"
! 237156 (0x39e64): "An inscribed six-sided die lies on the table in front of him."
! 237196 (0x39e8c): "The sides you can see are labelled with short words."
! 237228 (0x39eac): "The celebrated Library of Alexandria, finest in the entire world, possessed of hundreds of thousands of books: where the ruling Ptolemies keep fanatic, infighting scholars almost imprisoned as they turn out rival commentaries on the ancient poems - hence the nickname.^^There is a little door to the south; a dusty corridor southeast; a thoroughfare east, and a grand entrance northwest."
! 237464 (0x39f98): "There is a pigeonhole mounted on one wall."
! 237492 (0x39fb4): "A depository for scrolls."
! 237512 (0x39fc8): "Surely this is addressed to someone?"
! 237536 (0x39fe0): "An open-ended hollow tube, marked with a Greek capital Alpha."
! 237580 (0x3a00c): "An open-ended hollow tube, marked with a Greek capital Kappa."
! 237624 (0x3a038): "Oh my. ~I touch your... and the scent of you rises from... your beautiful...~  I'd better not read the rest. Strictly for aficionados."
! 237712 (0x3a090): "All Greek to you, alas. Only a dozen lines or so, though."
! 237752 (0x3a0b8): "Oh my. Well, the plot, um, there are seven attackers, all with different shields, one for each of the seven city gates, and it's a civil war so of course the brothers are really in a duel and there are champions and the women are upset but it's all because of their brother who was really their father... Never mind. It's strictly for aficionados."
! 237964 (0x3a18c): "All Greek to you, alas, and running on for 1000 lines or more."
! 238008 (0x3a1b8): "This small, dark (by night) room is a repository for Library supplies: above all, for lamp oil, which is stored in broad shallow earthenware troughs. Lucky your torch is electric, when you think about it. Anyway, a passage leads back north."
! 238160 (0x3a250): "the"
! 238164 (0x3a254): "The rather neglected hall for the accurate study of geography: as opposed to the lurid travellers' tales preferred by most writers in this slapdash century. Nobody is working here, and one can only file back northwest."
! 238296 (0x3a2d8): "In order to make sure the geographers don't get lost, the only exit is northwest."
! 238344 (0x3a308): "Protruding from a broken globe of the Earth (marked with very tentative and approximate maps) is the spindle, the only thing holding it together."
! 238428 (0x3a35c): "Perhaps the best work of cartography likely for the next two thousand years, though it seems unlikely to last the next two hours."
! 238504 (0x3a3a8): "Don't go waving this about."
! 238524 (0x3a3bc): "Once the polar axis of a globe."
! 238544 (0x3a3d0): "A spacious, densely colonnaded corridor, its walls lined with inset shelves on which are scrolls beyond count, ribboned, dusty, disintegrating, badly catalogued so that only an expert can find what he wants."
! 238672 (0x3a450): "You wander through the columns, but can find no exit save the thoroughfare west and a little office south."
! 238732 (0x3a48c): "endless"
! 238740 (0x3a494): "Even a single book may run for dozens of individual scrolls, and the titles are hard to interpret: anyway, most of the books are rubbish. Dewey decimal numbers are not due to be invented for millenia."
! 238864 (0x3a510): "Apollonius and Callimachus are now engaged in a furious, ugly brawl, from which it seems unlikely they will emerge for some considerable time."
! 238952 (0x3a568): "Apollonius and Callimachus are having a furious, heated, endless argument about something. They seem well practised at this occupation."
! 239036 (0x3a5bc): "The expert in question being Callimachus, who is brooding over a scroll, and hardly aware of your presence."
! 239100 (0x3a5fc): "Callimachus is famous for something or other. You wonder what..."
! 239140 (0x3a624): "Apollonius seems to have dropped a mystic scroll in the scuffle."
! 239180 (0x3a64c): "We in the afterlife, um, have a policy of never commenting on leaked documents."
! 239228 (0x3a67c): "Don't you believe it!"
! 239244 (0x3a68c): "It tells that even the greatest mortal must choose of the three High [and the next word is illegible], for once and all, but that for each there is a way. The usual mystic nonsense."
! 239356 (0x3a6fc): "And Callimachus' purple shoulder-sash has come off."
! 239392 (0x3a720): "Worn over the shoulder."
! 239408 (0x3a730): "A tiny office adjoining the colonnades north, this is home to Apollonius the head Librarian, whose writing implements, table and sand-wells are scattered untidily about."
! 239512 (0x3a798): "Apollonius paces about self-importantly in a purple sash, perusing documents on his desk."
! 239572 (0x3a7d4): "His aim in life is chiefly to annoy Callimachus, his junior librarian and the modern poet he despises most."
! 239640 (0x3a818): "A hugely impressive edifice, and everything you might expect from the man who conquered the whole of Asia Minor at an age when most people are starting to think about getting a mortgage.^^There are of course guards, but they're trying to catch the procession, so if you're careful not to draw attention to yourself you could probably sneak in to the north."
! 239852 (0x3a8ec): "Scholars are divided on the origin of the ~maze~ legend: some hold that to a primitive culture, the Knossos palace was so complex as to seem a maze, and the king so fearsome as to seem a Minotaur.^^Others say the early palaces really were labyrinths to protect sacred altars.^^And you think it's because this is a maze of twisty little passages, all alike."
! 240076 (0x3a9cc): "Such a slave, a highly trained professional, stands at every intersection of passages in the palace. They are deaf mutes, to prevent them overhearing State secrets."
! 240180 (0x3aa34): "A slave stands impassively by one wall."
! 240208 (0x3aa50): "The magnificent balcony overlooking the Royal harbour of Alexandria. In two hundred years' time, Julius Caesar will be besieged here, and will hold the palace with a tiny force of men against an entire army: and will lose his heart to Cleopatra...^^For the mean time, this is a broad stone balustraded balcony. The coin-bright moon, low in the sky, reflects off the black waters far below."
! 240452 (0x3ab44): "There seems to be absolutely no way off the balcony, as the stone doors to the heart of the palace are sealed shut."
! 240516 (0x3ab84): "an"
! 240520 (0x3ab88): "An impressive astronomical mounting stands on a tripod here. But there is no telescope."
! 240576 (0x3abc0): "Instead, there is an astrolabe."
! 240600 (0x3abd8): "At the foot of the Hall is the drive, a long gravel lane approaching the house through trees.^^Since your family are intermittently loading suitcases into the car, which only makes you feel guilty, the only safe way to creep away is along the public footpath, to northeast."
! 240760 (0x3ac78): "Better not - they might catch you."
! 240784 (0x3ac90): "The fire escape is perilous and leads nowhere. Doubtless it would be useless in any real fire."
! 240844 (0x3accc): "The Hall is in the way."
! 240860 (0x3acdc): "The old carved southern wall of the gardens blocks your way around the edge of the Hall."
! 240912 (0x3ad10): "For the first couple of storeys, an old iron zig-zag, and after that a ladder that might or might not be well-anchored. The gardeners have done a good job of concealing it behind wistaria which (in any case) looks the stronger of the two."
! 241052 (0x3ad9c): "By a stile in the public footpath across the fields to the village, which lies to the north. Sitting on the stile you have a splendid view of the house and its battlements. The air is ablaze with pollen and dragonflies.^^It might be possible to scramble down to a hollow, but it surely wouldn't be pleasant."
! 241236 (0x3ae54): "The footpath turns from southwest to north."
! 241264 (0x3ae70): "A low, muddy, stinking hollow, trodden with reeds, dried out in the long summer and no more than moist now. You could climb back up, or go northwest, though that would mean crawling through a thorny hedge."
! 241388 (0x3aeec): "There's a bird's nest at the bottom of the hollow."
! 241420 (0x3af0c): "A bunch of nuts, left over from last autumn."
! 241448 (0x3af28): "Do you know, I love nuts, but I have to be so careful what I eat now... Still, the little ones will have them."
! 241520 (0x3af70): "Nuts to you too."
! 241532 (0x3af7c): "Entwined in the nest is a bunch of nuts."
! 241556 (0x3af94): "And sat upon it is, as you might expect, a bird: a corn crake, in fact."
! 241600 (0x3afc0): "A rail with a distinctive cry. And a possessive look."
! 241636 (0x3afe4): "Beside the long triangle of the green, under the stone cross of the First World War memorial. The public footpath runs south to a stile. The village is tiny: the parish church, the ~Goat and Compasses~ pub (which, owing to quaint English licensing laws, is closed) and a few houses and desultory tea-shops for tourists visiting Meldrew Hall."
! 241844 (0x3b0b4): "You wander around the peaceful green for a while, but there's nothing to do."
! 241888 (0x3b0e0): "Old Evans, the village racing enthusiast, sits on the steps of the memorial, combing the back pages of his ~Racing Times~ newspaper."
! 241972 (0x3b134): "In the band of his hat is his lucky mascot: a little picture of the crescent moon."
! 242020 (0x3b164): "Old Evans' hat is empty. You feel terribly guilty."
! 242056 (0x3b188): "The stone cross, for the fallen of the Great War of 1914-18, contains more names than there are houses in the village.^^Your eye is caught by Second Lieutenant Gerard Meldrew of the 19th/21st Rifles, and you shiver, although the afternoon is warm."
! 242216 (0x3b228): "The fourteenth-century Church of St Michael and All Angels doesn't seem to be locked up, exactly - just barred from the other side."
! 242304 (0x3b280): "In the days of Oliver Cromwell, it was called ~God Encompasseth~, but the locals have worn down the name over the centuries to ~Goat and Compasses~. It is of course closed, owing to the licensing laws. You congratulate yourself on living in such a modern, forward-looking country."
! 242476 (0x3b32c): "The monkey sits on Evans' shoulder, cheeping with excitement. Evans has found a pet, and is so gruffly delighted that he has forgotten all about the mascot you stole. Now if he could only predict the 3.40 at Borchester Mills..."
! 242620 (0x3b3bc): "Some kind of crescent moon, an old Druidical symbol."
! 242656 (0x3b3e0): "It leads nowhere."
! 242668 (0x3b3ec): "The front page story (~Lord Lucan's new acquisition Shergar comes out of retirement to win the Grand National~) is so boringly unsensational that you quickly lose interest. But Evans is eternally fascinated with minute details of the form of the horses, tomorrow's race meetings, current odds quoted by the bookmakers, and so on."
! 242872 (0x3b4b8): "Racing aficionados consider it lucky to wear mascots in the bands of their hats."
! 242920 (0x3b4e8): "Before this was the Norman church of St Michael and All Angels, it was a Saxon one: this is an ancient site. A great space of stone, filled with dark wooden pews and woven mattings. Flowers left over from Sunday grace the lectern and altar. A narrow stair leads upward, and the village green lies to the south.^^Old side chapels lie east and west."
! 243140 (0x3b5c4): "The church door is open."
! 243156 (0x3b5d4): "the"
! 243160 (0x3b5d8): "A passage slants down through a solid crystal doorway in the Moonstone."
! 243204 (0x3b604): "Set into the floor, and slightly raised, is the Moonstone, an ancient broad flagstone the size of a door, inscribed with a crescent moon."
! 243288 (0x3b658): "The Moonstone is very old, probably pre-dating the rest of the church by some centuries. Legends about it abound: some say the spirits of the departed pass beneath. Old iron rings are set in it, but nobody has ever succeeded in lifting the colossal weight."
! 243444 (0x3b6f4): "An alcove in the ancient west side of the church, beneath stained glass windows of the Resurrection."
! 243504 (0x3b730): "The church lies east."
! 243520 (0x3b740): "an"
! 243524 (0x3b744): "The statue is half-skeleton, and you can see clear through the bones."
! 243564 (0x3b76c): "the"
! 243568 (0x3b770): "The adamantine knight stands staunchly here."
! 243596 (0x3b78c): "Diana's tall marble statue bathes in the moonlight: and a flower is placed gaily in her hair."
! 243652 (0x3b7c4): "The knight stands here, bowing toward Diana."
! 243680 (0x3b7e0): "The knight stands clasping the flower."
! 243700 (0x3b7f4): "The knight stands staunchly here."
! 243720 (0x3b808): "A small clear space to the side of the church, in a bay ringed with stained glass windows of the Nativity."
! 243784 (0x3b848): "The church lies west."
! 243800 (0x3b858): "A tall marble statue of Diana stands here: a find from the nearby Roman remains."
! 243848 (0x3b888): "There is a sly look in her eye as she smiles aslant."
! 243880 (0x3b8a8): "The bell-ringing chamber, half-way up the church tower. Thick braided ropes hang down, tailing into sashes. A plaque on one wall announces that in 1901, ten men (Roger Meldrew among them) rang a Kent Triple Bob."
! 244016 (0x3b930): "The ropes are too smooth and noisy to climb."
! 244044 (0x3b94c): "eight"
! 244048 (0x3b950): "There is a beautiful view over the green parceled farmlands and hills surrounding the village, and you feel a certain pride to see Meldrew Hall sitting amongst it. It's also windy and dangerous up here on the grey lead spire of the parish church, beside the old clock: fortunately an opening leads down into the clerestory."
! 244236 (0x3ba0c): "an"
! 244240 (0x3ba10): "Like a solid glove.^^It reminds you oddly of one of the symbolic pieces in Monopoly - the ship, the car and so on."
! 244316 (0x3ba5c): "There must be more to this marvellous figure somewhere."
! 244352 (0x3ba80): "Mounted loosely on the end of the weathervane, an adamantine hand points the way the wind blows."
! 244408 (0x3bab8): "William Snelson's"
! 244424 (0x3bac8): "The clock stands at ten past three, as it has done for some years. According to a small commemorative plaque, it was the work of William Snelson the Clockmaker (1776-1848)."
! 244536 (0x3bb38): "~In the premonition, it is vital to get hold of the mascot for later use.~"
! 244580 (0x3bb64): "~It's no use poking about on the attic floor for fresh torch batteries, because there aren't any.~"
! 244640 (0x3bba0): "~Your Aunt Jemima is not the kind of woman to be distracted by music or frivolous presents, mark my words.~"
! 244704 (0x3bbe0): "~Novels are, of course, invariably written by people using their real names, not disguised in any way.~"
! 244772 (0x3bc24): "~The thing about daisies is, they are the same all year round, not changing with the calendar.~"
! 244828 (0x3bc5c): "~Modern medicine bottles can even withstand falls from a great height. I should try heat if I were you.~"
! 244892 (0x3bc9c): "~You can easily get a grip on the demijohn with your bare hands.~"
! 244932 (0x3bcc4): "~The answer's the same, whichever bottle you meant. That counts as your hint, I'm afraid. Not very fair, but then I am a demon.~"
! 245016 (0x3bd18): "The demon acknowledges the question, but cannot bring himself to speak of Heaven."
! 245064 (0x3bd48): "~Hell?  Oh this isn't your eternal damnation, it's mine, having to answer all these wretched questions. No, Hell itself is a marvellous place, and it has an excellent health club too. Look forward to seeing you there.~"
! 245204 (0x3bdd4): "~Don't worry, there's nothing written there. No need to look at the problem in a fresh light.~"
! 245264 (0x3be10): "~History never repeats itself, so it's pointless looking him up in the book.~"
! 245316 (0x3be44): "~The really interesting stuff is at the very start of his working life.~"
! 245360 (0x3be70): "~Forget it, there's no way to return from the museum, and Doktor Stein's medicine has no antidote.~"
! 245424 (0x3beb0): "~Merlyn doesn't really come into this. Try working on something else.~"
! 245472 (0x3bee0): "~Literally, Merlyn's actual hat. Green pointy felt, I wouldn't wonder.~"
! 245524 (0x3bf14): "~The answer's the same, whichever book you meant. That counts as your hint, I'm afraid. Not very fair, but then I am a demon.~"
! 245608 (0x3bf68): "~Ebenezer?  He's absolutely central to this. Concentrate on him, definitely.~"
! 245664 (0x3bfa0): "~Trouble with holiday snaps is, once somebody gets the old slide projector going, a boring time is on the cards for all.~"
! 245736 (0x3bfe8): "~You'll need to be wide awake and alert to work out what to do with them. Finding them is easy - just remember to keep an eye out for short, fat things.~"
! 245828 (0x3c044): "~Clairvoyantes are expert at detecting stacked decks, so it's no good cheating.~"
! 245880 (0x3c078): "~Phlebas runs a very badly-advertised service, I'm afraid. I've got no time for him.~"
! 245940 (0x3c0b4): "~Once the mouse is in the hole, forget it, it couldn't hear you even if you talked to the hole instead. But there is an alternative method.~"
! 246028 (0x3c10c): "~Your fault for letting the key get into the foundations - nothing can get in there to retrieve it.~"
! 246084 (0x3c144): "~Marvellous, marvellous contraption. Starts the moment you switch it on, and then nothing but solid gold classics all the way. You can really concentrate when that's playing.~"
! 246188 (0x3c1ac): "~What, the blocked-up old fireplace that doesn't lead anywhere?  You need to be carrying plenty of equipment to get down it - don't worry if it's dark at the bottom, after all there's nothing you can do about that.~"
! 246324 (0x3c234): "~The sandstone recess is probably impassible. Better try only when you're wide awake.~"
! 246380 (0x3c26c): "~Austin's a perfect devil, isn't he?  She, I should say. Good for nothing except getting in the way, of course. Walks into walls just when you don't want, but at least Jemima calms her down.~"
! 246508 (0x3c2ec): "~Smoke detectors like yours are specially rigged not to be triggered by accidental shafts of light.~"
! 246576 (0x3c330): "~Of course the ship is far too large and ungainly ever to fit in the bottle.~"
! 246624 (0x3c360): "~Cold comfort.~"
! 246636 (0x3c36c): "~A good blanket might be a plain, colourless sort of covering with no emblem to it.~"
! 246692 (0x3c3a4): "~The thing about the revolving door is, you can only revolve it when you're already standing inside.~"
! 246752 (0x3c3e0): "~Unbreakable glass.~"
! 246768 (0x3c3f0): "~A vital clue, and useful in its own right.~"
! 246800 (0x3c410): "~The greatest computer game of all time. I'm proud to be a part of it.~"
! 246844 (0x3c43c): "The demon blushes. ~Wasn't my fault!  My partner made a mess of it.~"
! 246892 (0x3c46c): "~Heaven?  Oh this isn't your eternal salvation, it's mine, able to serve by answering all these delightful questions. No, Heaven itself is a marvellous place, and it has an excellent health club too. Look forward to seeing you there.~"
! 247040 (0x3c500): "The angel acknowledges the question, but cannot bring herself to speak of Hell."
! 247088 (0x3c530): "~The rods definitely fit into all this somewhere.~"
! 247120 (0x3c550): "~If only you could have been there when the maze was being laid out!~"
! 247164 (0x3c57c): "~The master game is like a point at infinity to we mortals,~ the angel says wistfully."
! 247216 (0x3c5b0): "~All a matter of fitting the rods in somewhere.~"
! 247248 (0x3c5d0): "~How she must long to let her hair down now, instead of being chained to that rock,~ the angel says sorrowfully. ~But in deference to her wishes, I cannot help you rescue her.~"
! 247360 (0x3c640): "~Amazing fortune you must have in finding it, I can tell.~"
! 247396 (0x3c664): "~Ah yes, we must all lament for human folly,~ says the angel, misunderstanding completely."
! 247452 (0x3c69c): "~Zeus wasn't a true god, of course,~ the angel predictably insists, ~just a manifestation of the laws of physics to an Ancient Greek, a kind of symbol for the way the universe fundamentally worked.~"
! 247576 (0x3c718): "The angel maintains a tight-lipped silence."
! 247604 (0x3c734): "~That's too dangerous a rod to actually use, of course, and the Church no longer approves of martyrs.~"
! 247668 (0x3c774): "~Is there really such a thing as luck, or free will?  It's a theological grey area,~ says the angel with fine casuistry."
! 247748 (0x3c7c4): "~Certainly a thorny problem, that.~"
! 247776 (0x3c7e0): "~Old Evans would never give you his mascot of his own free will.~"
! 247820 (0x3c80c): "~One has to reflect on ugliness like that.~"
! 247852 (0x3c82c): "~It's quite hypnotically fascinating, don't you think?~"
! 247892 (0x3c854): "~Squirrels are very fond of nuts, but you can't trust them an inch.~"
! 247940 (0x3c884): "~Just think what that would do to a decent lawn!  Oh, it makes me go cold all over.~"
! 247996 (0x3c8bc): "~Whatever is a croquet lawn for, if not to play croquet?  Although, now I think about it, there is something else down there.~"
! 248080 (0x3c910): "~Ah yes, a code word understood by certain of Alexander the Great's slaves. But you'd have to be in the right place at the right time.~"
! 248164 (0x3c964): "~The mouth is the key, or rather the lock.~"
! 248192 (0x3c980): "~Do be careful. The sphinxes are only made of stone, but they could easily give you nightmares.~"
! 248256 (0x3c9c0): "~Jolly comfortable, some of those funeral couches.~"
! 248292 (0x3c9e4): "~A one-way ride, but that's life.~"
! 248320 (0x3ca00): "~Once fired with life, the knight will only be yours to command when he has discharged his chivalric duty.~"
! 248388 (0x3ca44): "~Some of those ancient knights were rather loose, but perhaps that's better than being screwed up.~"
! 248452 (0x3ca84): "~The Great Library isn't for passing hooligans, you know,~ says the angel reprovingly. ~Besides, the guards understand their duty by the Cat God far too well to let you through.~"
! 248564 (0x3caf4): "~They're always at each other's throats. I shudder to think what might happen if a real fight broke out.~"
! 248632 (0x3cb38): "~Oh, find yourself a costume, join the party!~"
! 248664 (0x3cb58): "~The green wood may one day make a really good staff, but it could take ages. Better leave it with someone for safe keeping.~"
! 248740 (0x3cba4): "~Some choices are inevitable and permanent, at least in this world.~"
! 248788 (0x3cbd4): "~Do be careful of the trap, won't you!  You might want to take precautions with the opening.~"
! 248844 (0x3cc0c): "~Let me see.~"
! 248856 (0x3cc18): "~You appreciate, in my position I can't really comment on graven images of pagan gods. Better try some dictionary or other.~"
! 248932 (0x3cc64): "~That woman will rabbit on, once you set her off. But only if you sacrifice something. Will you be joining us next Harvest Sunday, by the way?~"
! 249024 (0x3ccc0): "~Ooh, it does make me shiver, thinking of the way they used to pour oil over themselves, anointing they called it.~"
! 249096 (0x3cd08): "~Shabby old gossip, Homer, always reminds me of Peter Falk. Anyway, just give him his answers. Shouldn't be too hard, with what you're wearing and carrying.~"
! 249200 (0x3cd70): "~Going in round the front just scares the birds away, I fear.~"
! 249240 (0x3cd98): "~Find out what you can about your ancestor who built it - his tomb isn't far away. Then reflect as best you can on the problem.~"
! 249320 (0x3cde8): "~Well, if you know what the odour is, that's the main thing.~"
! 249360 (0x3ce10): "Hell, you always imagined, would contain fiery, sulphurous pits and a great many gentlemen with forked tails. You were right about the last part. A demon is sitting behind a flame-proofed desk at the bottom of the stairs. There are some disconcerting screams from further away, but nothing to worry about. Not in this life, anyway."
! 249560 (0x3ced8): "If you were to cast a film of your adventures so far, you would hire Donald Sutherland to play this gentleman."
! 249632 (0x3cf20): "Heaven, you always imagined, would be a world of marble pillars, fluffy clouds, harps and angelic ladies with serene expressions. You were right about the last part. An angel is sitting here behind some new office furniture, next to a blue Tourist Information sign. A bridge of cloud extends south across the sky to the beanstalk. There is some choral singing going on somewhere, but not loud enough for you to hear properly. Not in this life, anyway."
! 249908 (0x3d034): "If you were to cast a film of your adventures so far, you would hire Dame Judi Dench to play this lady."
! 249976 (0x3d078): "a cake of"
! 249984 (0x3d080): "That's the spirit, keep it up!"
! 250004 (0x3d094): "Really!  How disgraceful!"
! 250024 (0x3d0a8): "~For foulmouths everywhere~."
! 250048 (0x3d0c0): "Information is available on the following subjects:^^     Instructions    giving some basic information^     Commands        detailing some common commands^     Credits         game credits^     Release         release notes^     Legal           legal disclaimers^     Inform          advertising the compiler Inform^     Archive         and the interactive fiction archive"
! 250288 (0x3d1b0): "Curses"
! 250292 (0x3d1b4): "Instructions"
! 250300 (0x3d1bc): "Commands"
! 250308 (0x3d1c4): "Cast of Thousands"
! 250320 (0x3d1d0): "Release Notes"
! 250332 (0x3d1dc): "Legal Notes"
! 250344 (0x3d1e8): "Inform"
! 250352 (0x3d1f0): "ftp.gmd.de"
! 250360 (0x3d1f8): "Four be the things I'd been better without:"
! 250388 (0x3d214): "Love, curiosity, freckles and doubt."
! 250416 (0x3d230): "-- Dorothy Parker, ~Inventory~"
! 250444 (0x3d24c): "It seemed that the next minute they would discover"
! 250476 (0x3d26c): "a solution. Yet it was clear to both of them that"
! 250504 (0x3d288): "the end was still far, far off, and that the"
! 250532 (0x3d2a4): "hardest part was just beginning."
! 250556 (0x3d2bc): "-- Anton Chekhov, ~The Lady with the Dog~"
! 250588 (0x3d2dc): "                           The mouse"
! 250612 (0x3d2f4): "Behind the mouldering wainscot shrieked."
! 250636 (0x3d30c): "-- Alfred, Lord Tennyson, ~Mariana~"
! 250668 (0x3d32c): "Parturient montes, nascetur ridiculus mus."
! 250700 (0x3d34c): "-- Horace, ~Ars Poetica~"
! 250724 (0x3d364): "Zeus, whose will has marked for man"
! 250744 (0x3d378): "A single way where wisdom lies"
! 250764 (0x3d38c): "Ordained one eternal plan:"
! 250784 (0x3d3a0): "Man must suffer to be wise."
! 250804 (0x3d3b4): "-- Aeschylus, ~Agamemnon~"
! 250828 (0x3d3cc): "I might repeat to myself, slowly and soothingly,"
! 250860 (0x3d3ec): "a list of quotations beautiful from minds profound;"
! 250892 (0x3d40c): "if I can remember any of the damn things."
! 250916 (0x3d424): "-- Dorothy Parker"
! 250932 (0x3d434): "More ways of killing a cat"
! 250948 (0x3d444): "than choking her with cream."
! 250968 (0x3d458): "-- Charles Kingsley"
! 250984 (0x3d468): "I would like to be there,"
! 251004 (0x3d47c): "were it but to see how the cat jumps."
! 251028 (0x3d494): "-- Sir Walter Scott"
! 251044 (0x3d4a4): "Do not go gentle into that good night."
! 251068 (0x3d4bc): "Rage, rage against the dying of the light."
! 251092 (0x3d4d4): "-- Dylan Thomas"
! 251108 (0x3d4e4): "No, 'tis not so deep as a well, nor so wide as"
! 251140 (0x3d504): "a church door; but 'tis enough, 'twill serve."
! 251172 (0x3d524): "-- Shakespeare, ~Romeo and Juliet~"
! 251200 (0x3d540): "...I have just signed legislation that will outlaw"
! 251232 (0x3d560): "Russia for ever. We begin bombing in five minutes."
! 251268 (0x3d584): "-- President Reagan, mistakenly believing the TV"
! 251304 (0x3d5a8): "   cameras were switched off"
! 251324 (0x3d5bc): "What is a ship but a prison?"
! 251344 (0x3d5d0): "-- Robert Burton (1577-1640)"
! 251376 (0x3d5f0): "The remarkable fact is that the values of these"
! 251404 (0x3d60c): "numbers seem to have been very finely adjusted"
! 251436 (0x3d62c): "to make possible the development of life."
! 251460 (0x3d644): "-- Stephen Hawking, ~A Brief History of Time~"
! 251496 (0x3d668): "Remember that you are an Englishman, and have"
! 251524 (0x3d684): "consequently won first prize in the lottery of life."
! 251556 (0x3d6a4): "-- Cecil Rhodes (1853-1902)"
! 251584 (0x3d6c0): "Les plus desesperes sont les chants les plus beaux"
! 251620 (0x3d6e4): "Et j'en sais d'immortels quit sont de purs songlots."
! 251656 (0x3d708): "-- Alfred de Musset, ~La Nuit de mai~"
! 251688 (0x3d728): "There is no return game between a man and his stars."
! 251720 (0x3d748): "-- Samuel Beckett, ~Murphy~"
! 251744 (0x3d760): "Throw away thy rod,"
! 251760 (0x3d770): "Throw away thy wrath:"
! 251776 (0x3d780): "O my God."
! 251784 (0x3d788): "Take the gentle path."
! 251800 (0x3d798): "-- George Herbert, ~Discipline~"
! 251828 (0x3d7b4): "Speak gently, she can hear"
! 251848 (0x3d7c8): "The daisies grow."
! 251860 (0x3d7d4): "-- Oscar Wilde, ~Requiescat~"
! 251884 (0x3d7ec): "Too poor for a bribe, and too proud to importune"
! 251912 (0x3d808): "He had not the method of making a fortune."
! 251936 (0x3d820): "-- Thomas Grey, ~Sketch of His own Character~"
! 251972 (0x3d844): "Facilis descensus Averno:"
! 251992 (0x3d858): "Noctes atque dies patet atri ianua Ditis;"
! 252024 (0x3d878): "Sed revocare gradum superasque evadere ad auras,"
! 252056 (0x3d898): "Hoc opus, hic labor est."
! 252076 (0x3d8ac): "-- Virgil, ~The Aeneid~ Book VI:126"
! 252108 (0x3d8cc): "We are the children of primeval night; we bear"
! 252140 (0x3d8ec): "The name of Curses in our home deep under earth."
! 252172 (0x3d90c): "-- Aeschylus, ~The Eumenides~"
! 252196 (0x3d924): "Thou makest his beauty to consume away,"
! 252220 (0x3d93c): "Like as it were a moth fretting a garment:"
! 252248 (0x3d958): "Every man therefore is but vanity."
! 252272 (0x3d970): "-- Psalms 39:12 (Book of Common Prayer version)"
! 252312 (0x3d998): "White lilac bowed,"
! 252328 (0x3d9a8): "Lost lanes of Queen Anne's lace"
! 252352 (0x3d9c0): "And that high-builded cloud"
! 252372 (0x3d9d4): "Moving at summer's pace."
! 252392 (0x3d9e8): "-- Philip Larkin, ~Cut Grass~"
! 252420 (0x3da04): "At the end of the day victory belongs to the Curses,"
! 252452 (0x3da24): "Who shout in shrill triumph"
! 252472 (0x3da38): "Over the utter rout of the defeated house."
! 252496 (0x3da50): "-- Aeschylus, ~Seven Against Thebes~"
! 252524 (0x3da6c): "He shall separate them one from another,"
! 252548 (0x3da84): "as a shepherd divideth his sheep from the goats."
! 252576 (0x3daa0): "-- Matthew 25:32"
! 252592 (0x3dab0): "Quickly now the amber"
! 252604 (0x3dabc): "  Takes the fly with knees deranged"
! 252624 (0x3dad0): "To be buried unseen, unfound"
! 252644 (0x3dae4): "  And irrevocably changed."
! 252664 (0x3daf8): "-- Dean Waynflete, ~Substance~"
! 252692 (0x3db14): "Thus the devil played at chess with me, and yielding"
! 252724 (0x3db34): "a pawn, thought to gain a queen of me, taking"
! 252752 (0x3db50): "advantage of my honest endeavours."
! 252776 (0x3db68): "-- Sir Thomas Browne, ~Religio Medici~ pt I"
! 252812 (0x3db8c): "Art thou pale for weariness"
! 252832 (0x3dba0): "Of climbing heaven and gazing on the earth?"
! 252860 (0x3dbbc): "-- Shelley, ~To The Moon~"
! 252884 (0x3dbd4): "A nice, - respectable, - middle class, middle-aged maiden"
! 252924 (0x3dbfc): "lady, with time on her hands and the money to help her pass"
! 252956 (0x3dc1c): "it... Let us call her Aunt Edna... Aunt Edna is universal,"
! 253000 (0x3dc48): "and to those who may feel that all the problems of the"
! 253032 (0x3dc68): "modern theatre might be solved by her liquidation, let me"
! 253068 (0x3dc8c): "add that... she is also immortal."
! 253092 (0x3dca4): "-- Terence Rattigan, preface to the ~Collected Plays~"
! 253132 (0x3dccc): "I seemed to move among a world of ghosts,"
! 253160 (0x3dce8): "And feel myself the shadow of a dream."
! 253184 (0x3dd00): "-- Alfred, Lord Tennyson, ~The Princess~"
! 253216 (0x3dd20): "If the doors of perception were cleansed,"
! 253244 (0x3dd3c): "everything would appear to man as it is, infinite."
! 253276 (0x3dd5c): "-- William Blake"
! 253292 (0x3dd6c): "Follow the instructions,"
! 253308 (0x3dd7c): "tell us what you think:"
! 253324 (0x3dd8c): "they lose something in translation,"
! 253348 (0x3dda4): "they might as well be written in invisible ink."
! 253380 (0x3ddc4): "-- Peter Hammill, ~Invisible Ink~"
! 253408 (0x3dde0): "On a round ball"
! 253420 (0x3ddec): "A workman that hath copies by, can lay"
! 253448 (0x3de08): "An Europe, Afrique and an Asia,"
! 253472 (0x3de20): "And quickly make that, which was nothing, All."
! 253500 (0x3de3c): "-- John Donne, ~Valediction: Of Weeping~"
! 253532 (0x3de5c): "What you don't know would make a great book."
! 253564 (0x3de7c): "-- The Rev. Sydney Smith"
! 253584 (0x3de90): "Sir Walter Elliot, of Kellynch-hall, in Somersetshire,"
! 253624 (0x3deb8): "was a man who, for whose own amusement, never took up"
! 253660 (0x3dedc): "any book but the Baronetage; there he found occupation"
! 253696 (0x3df00): "in an idle hour, and consolation in a distressed one"
! 253728 (0x3df20): "-- Jane Austen, ~Persuasion~"
! 253752 (0x3df38): "I am the Love that dare not speak its name."
! 253780 (0x3df54): "-- Lord Alfred Douglas, ~Two Loves~"
! 253812 (0x3df74): "'I am inclined to think -' said I."
! 253840 (0x3df90): "'I should do so,' Sherlock Holmes remarked"
! 253872 (0x3dfb0): "impatiently."
! 253884 (0x3dfbc): "-- Sir Arthur Conan Doyle, ~The Valley of Fear~"
! 253924 (0x3dfe4): "Hell is a city much like London -"
! 253948 (0x3dffc): "A populous and a smoky city."
! 253968 (0x3e010): "-- Shelley, ~Peter Bell the Third~"
! 253996 (0x3e02c): "I hope I shall never be deterred from detecting"
! 254024 (0x3e048): "what I think a cheat, by the menaces of a ruffian."
! 254056 (0x3e068): "-- Dr Johnson (a letter from 1775)"
! 254084 (0x3e084): "Expatiate free o'er all this scene of man;"
! 254112 (0x3e0a0): "A mighty maze! but not without a plan."
! 254136 (0x3e0b8): "-- Alexander Pope, ~An Essay on Man~"
! 254168 (0x3e0d8): "It's hard to be religious when certain people"
! 254200 (0x3e0f8): "are never incinerated by bolts of lightning."
! 254228 (0x3e114): "-- Bill Watterson, ~Calvin & Hobbes~"
! 254260 (0x3e134): "Follow me, follow"
! 254272 (0x3e140): "Down to the hollow"
! 254284 (0x3e14c): "And there let us wallow"
! 254300 (0x3e15c): "In glorious mud."
! 254312 (0x3e168): "-- Flanders and Swann"
! 254328 (0x3e178): "Zoe, logic merely enables one"
! 254348 (0x3e18c): "to be wrong with authority"
! 254364 (0x3e19c): "-- Dr Who, aboard ~The Wheel In Space~"
! 254396 (0x3e1bc): "Then for as moche as a philosofre saith,"
! 254420 (0x3e1d4): "~he wrappith him in his frend, that condescendith"
! 254452 (0x3e1f4): "to the rightfulle praiers of his frend,~"
! 254476 (0x3e20c): "therefore have I yeven the a suffisant Astrolabie"
! 254508 (0x3e22c): "as for oure orizonte, compowned after the"
! 254532 (0x3e244): "latitude of Oxenforde;"
! 254552 (0x3e258): "-- Geoffrey Chaucer, ~A Treatise on the Astrolabe~"
! 254592 (0x3e280): "Upon a nyght in sleep as he hym leyde,"
! 254620 (0x3e29c): "Hym thoughte how that the wynged god Mercurie"
! 254648 (0x3e2b8): "Biforn hym stood and bad hym to be murie."
! 254676 (0x3e2d4): "His slepy yerde in hond he bar uprighte;"
! 254704 (0x3e2f0): "An hat he werede upon his heris brighte."
! 254728 (0x3e308): "-- Geoffrey Chaucer, ~The Knight's Tale~"
! 254760 (0x3e328): "Benedick:"
! 254768 (0x3e330): "  To bind me or undo me, one of those."
! 254792 (0x3e348): "-- Shakespeare, ~Much Ado About Nothing~"
! 254824 (0x3e368): "In the central display case, there is a curious"
! 254852 (0x3e384): "pottery model, either representing the Labyrinth"
! 254884 (0x3e3a4): "of Minos or a water-cooling system."
! 254908 (0x3e3bc): "-- W. J. Murnane's ~Guide to Ancient Egypt~"
! 254944 (0x3e3e0): "I don't know who was there before me:"
! 254972 (0x3e3fc): "One person, several, none;"
! 254992 (0x3e410): "It doesn't matter."
! 255008 (0x3e420): "There are marks on the slabs of rock,"
! 255032 (0x3e438): "Some beautiful, all mysterious;"
! 255056 (0x3e450): "Some certainly not made by human hands."
! 255084 (0x3e46c): "-- Primo Levi, ~A Valley~"
! 255108 (0x3e484): "It has always seemed to me that I had to answer"
! 255140 (0x3e4a4): "questions which fate had posed to my forefathers,"
! 255168 (0x3e4c0): "and which had not yet been answered, or as if I"
! 255196 (0x3e4dc): "had to complete, or perhaps continue, things which"
! 255224 (0x3e4f8): "previous ages had left unfinished."
! 255248 (0x3e510): "-- Carl Jung, ~Memories, Dreams, Reflections~"
! 255284 (0x3e534): "happy Tourist."
! 255296 (0x3e540): "very nearly happy Tourist."
! 255316 (0x3e554): "master Druid."
! 255328 (0x3e560): "journeyman Druid."
! 255344 (0x3e570): "apprentice Druid."
! 255360 (0x3e580): "Master Navigator."
! 255376 (0x3e590): "Navigator."
! 255384 (0x3e598): "Voyager."
! 255392 (0x3e5a0): "Explorer."
! 255400 (0x3e5a8): "expert Traveller."
! 255416 (0x3e5b8): "Traveller."
! 255424 (0x3e5c0): "Adventurer."
! 255436 (0x3e5cc): "Connoisseur."
! 255448 (0x3e5d8): "Jack-of-all-trades."
! 255464 (0x3e5e8): "amateur Adventurer."
! 255480 (0x3e5f8): "Dilettante."
! 255492 (0x3e604): "cynical Tourist."
! 255504 (0x3e610): "experienced Tourist."
! 255520 (0x3e620): "seasoned Tourist."
! 255536 (0x3e630): "casual Tourist."
! 255548 (0x3e63c): "gauche Tourist."
! 255560 (0x3e648): "hapless Tourist."
! 255572 (0x3e654): "accursed Tourist."
! 255584 (0x3e660): "irresponsible deity."
! 255600 (0x3e670): "There are paths only west and northwest."
! 255628 (0x3e68c): "The timber prop leans against the tottering Folly, supporting it."
! 255668 (0x3e6b4): "Drop the robot mouse where Austin can get at it"
! 255696 (0x3e6d0): "Shut Austin out of the attic with the trap door"
! 255724 (0x3e6ec): "Ram or knock on various doors"
! 255744 (0x3e700): "Cast all the rods on yourself"
! 255764 (0x3e714): "Ask the demon and angel about Heaven and Hell"
! 255796 (0x3e734): "Eat a genuine Ekmek special (look it up in the dictionary for details)"
! 255840 (0x3e760): "Other anagrams of ~Marie Swelldon~, found by Michael Kinyon, include..."
! 255896 (0x3e798): "Demeanor Wills"
! 255908 (0x3e7a4): "Domineer Walls"
! 255920 (0x3e7b0): "Amino Dwellers"
! 255932 (0x3e7bc): "Enrolled Swami"
! 255944 (0x3e7c8): "Lemonade Swirl"
! 255956 (0x3e7d4): "Mellowed Rains"
! 255968 (0x3e7e0): "Dowel Minerals"
! 255980 (0x3e7ec): "Seminole Drawl"
! 255992 (0x3e7f8): "Allowed Miners"
! 256004 (0x3e804): "Almoner Wields"
! 256016 (0x3e810): "Mellows Rained"
! 256028 (0x3e81c): "Mineral Slowed"
! 256040 (0x3e828): "Moraine Dwells"
! 256052 (0x3e834): "Mellow Sardine"
! 256064 (0x3e840): "Sawmill Redone"
! 256076 (0x3e84c): "Soldier Lawmen"
! 256088 (0x3e858): "Swindle Morale"
! 256100 (0x3e864): "The 1970s robot mouse is capable of speech recognition."
! 256136 (0x3e888): "Mentioning a bridge game (between Sir Joshua Meldrewe and the Prince of Wales) which took place a century before the invention of bridge. (In this release, they play piquet.)"
! 256244 (0x3e8f4): "Locating Alexandria in ~Upper Egypt~. Actually it's in Lower Egypt - the Nile flows from south to north."
! 256316 (0x3e93c): "The ~brass~ key is no longer really brass (examine it!) since brass is unmagnetic."
! 256372 (0x3e974): "The lighthouse in the fifth century BC, the period of city states, is named after the Pharos, yet to be built in Alexandria during the Hellenic era. (Quinquiremes are contemporary with the frieze, though.)"
! 256500 (0x3e9f4): "^^     Frivolous things to do^     About Callimachus and Apollonius^     An epigram by Callimachus^     Salmon Wielder^     Wistaria or wisteria?^     Great Curses mistakes^     The ancient languages^"
! 256644 (0x3ea84): "For your amusement"
! 256656 (0x3ea90): "Frivolous things to do"
! 256672 (0x3eaa0): "About Callimachus and Apollonius"
! 256696 (0x3eab8): "An epigram by Callimachus"
! 256716 (0x3eacc): "Salmon Wielder"
! 256728 (0x3ead8): "Wistaria or wisteria?"
! 256744 (0x3eae8): "Great Curses mistakes"
! 256760 (0x3eaf8): "The ancient languages"
! 256776 (0x3eb08): "Giving Aunt Jemima the wrapped parcel;"
! 256796 (0x3eb1c): "Or the chocolate biscuit;"
! 256816 (0x3eb30): "Or kissing her;"
! 256828 (0x3eb3c): "Attracting Bateau Phlebas by waving the poster (which can be torn down);"
! 256876 (0x3eb6c): "Casting the Rod of Fire at the medicine bottle to try and open it (as advised by demon);"
! 256936 (0x3eba8): "Trying the postcard in the slide projector;"
! 256964 (0x3ebc4): "Or the Alexandrian sketch when it's still framed;"
! 257000 (0x3ebe8): "Eighty-one. The inspiration for the radio station came about when the author was driving at midnight through Oxfordshire and the local station played, in succession, the Moonlight Sonata, the Four Seasons, You Take My Breath Away and Gold. So the radio plays the 80 most hackneyed radio tunes the author could think of."
! 257196 (0x3ecac): "Not counting everyday death, winning or the various ways of almost but not quite coming to an end..."
! 257260 (0x3ecec): "Missing the point entirely"
! 257276 (0x3ecfc): "Being spooked"
! 257288 (0x3ed08): "In checkmate"
! 257300 (0x3ed14): "Being transported to Australia"
! 257320 (0x3ed28): "Facing a prison term as a terrorist"
! 257344 (0x3ed40): "Being annihilated by a temporal paradox"
! 257372 (0x3ed5c): "Becoming a constellation"
! 257388 (0x3ed6c): "If magic, the daisy chain rustles (according to inventories) when you are carrying something which could turn into a rod if waved."
! 257472 (0x3edc0): "Likewise, the yellow daisy (from Roman Britain) twitches."
! 257516 (0x3edec): "Not only the title, but the plan and a good deal of the incidental symbolism of the Unreal City were taken from early poems of T. S. Eliot (which owed a bit to Baudelaire), and I recommend them (apart from the great interest of the poems themselves) to any who think such elucidation worth the trouble."
! 257696 (0x3eea0): "The handkerchief is not Jemima's but belongs to J. Alfred Prufrock (though cf. ~The Waste Land~ l. 178)."
! 257772 (0x3eeec): "By dropping it down the empty dumbwaiter shaft;"
! 257804 (0x3ef0c): "Putting it at the foot of the shaft, and dropping the dumbwaiter on it;"
! 257848 (0x3ef38): "Running over it in the garden roller;"
! 257872 (0x3ef50): "Dropping it from the top of the beanstalk;"
! 257896 (0x3ef68): "Or from the top of the mast of the Lady Magdalena;"
! 257928 (0x3ef88): "Aunt Jemima can open it..."
! 257940 (0x3ef94): "^^     1. What are the ~good but wrong guesses~?^     2. How many songs does the radio play?^     3. In what *** ways *** can the game end?^     4. What are the secret ways to detect a Rod?^     5. What can you see in the crystal ball?^     6. Where are Dame Judi Dench and Donald Sutherland?^     7. Explain the handkerchief initials and the graffiti.^     8. How many tarot cards are there altogether?^     9. How can the medicine bottle be opened?^     10. What is the mascot for in the premonition?^"
! 258284 (0x3f0ec): "Trivia questions"
! 258296 (0x3f0f8): "1. What are the ~good but wrong guesses~?"
! 258324 (0x3f114): "2. How many songs does the radio play?"
! 258352 (0x3f130): "3. In what *** ways *** can the game end?"
! 258392 (0x3f158): "4. What are the secret ways to detect a Rod?"
! 258420 (0x3f174): "5. What can you see in the crystal ball?"
! 258444 (0x3f18c): "6. Where are Dame Judi Dench and Donald Sutherland?"
! 258480 (0x3f1b0): "7. Explain the handkerchief initials and the graffiti."
! 258516 (0x3f1d4): "8. How many tarot cards are there altogether?"
! 258548 (0x3f1f4): "9. How can the medicine bottle be opened?"
! 258576 (0x3f210): "10. What is the mascot for in the premonition?"
! 258604 (0x3f22c): "^^     For your amusement^     Trivia questions^"
! 258640 (0x3f250): "Amusements"
! 258648 (0x3f258): "For your amusement"
! 258660 (0x3f264): "Trivia questions"
! 258672 (0x3f270): "Nine times she waved the fluttering wimple round,"
! 258704 (0x3f290): "And made a little plot of magic ground."
! 258728 (0x3f2a8): "And in that daisied circle, as men say,"
! 258756 (0x3f2c4): "Is Merlin prisoner till the judgement day..."
! 258788 (0x3f2e4): "-- Matthew Arnold, Tristram and Iseult III (1852)"
! 258832 (0x3f310): "Curses are like young chickens,"
! 258856 (0x3f328): "they always come home to roost."
! 258876 (0x3f33c): "-- Robert Southey (1774-1843),"
! 258908 (0x3f35c): "   ~The Curse of Kehama~"
! 258928 (0x3f370): "Let Rome in Tiber melt, and the wide arch"
! 258956 (0x3f38c): "Of the ranged empire fall! Here is my space."
! 258988 (0x3f3ac): "Kingdoms are clay."
! 259000 (0x3f3b8): "-- Shakespeare, ~Antony and Cleopatra~ I:1"
! 259036 (0x3f3dc): "                                                      "
