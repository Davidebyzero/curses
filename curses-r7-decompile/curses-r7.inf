

Verb 'xdetermine'
    * 							-> Xdeterministic
;

Verb 'xah'
    * special						-> XAngelHint
;

Verb 'xdh'
    * special						-> XDemonHint
;

Verb 'xasnc'
    * 							-> Xasnc
;

Verb 'xmaster'
    * 							-> Xmaster
;

Verb 'xtravel'
    * 							-> Xtravel
;

Verb 'xattic'
    * special						-> Xattic
;

Verb 'xcheat'
    * 							-> Xcheat
;

Verb 'xallow'
    * special						-> Xallow
;

Verb 'plover' 'plugh' 'xyzzy'
    * 							-> Xyzzy
;

Verb 'hop' 'jump' 'skip'
    * 							-> Jump
    * 'over' noun					-> JumpOver
;

Verb 'chop' 'cut' 'prune' 'slice'
    * noun						-> Cut
;

Verb 'fill'
    * noun						-> Fill
;

Verb 'drink' 'sip' 'swallow'
    * noun						-> Drink
;

Verb 'burn' 'light'
    * noun						-> Burn
;

Verb 'attach' 'fasten' 'fix' 'tie'
    * noun						-> Tie
    * noun 'to' special					-> Tie
;

Verb 'clean' 'polish' 'rub' 'shine'
    * noun						-> Clean
;

Verb 'feel' 'fondle' 'grope' 'touch'
    * 							-> Feel
    * noun						-> Touch
;

Verb 'taste'
    * 							-> Taste
;

Verb 'hear' 'listen'
    * 							-> Listen
    * noun						-> Listen
    * 'to' noun						-> Listen
;

Verb 'smell' 'sniff'
    * 							-> Smell
    * noun						-> Smell
;

Verb 'think'
    * 							-> Think
;

Verb 'embrace' 'hug' 'kiss'
    * creature						-> Kiss
;

Verb 'awake' 'awaken' 'wake'
    * 							-> Wake
    * 'up'						-> Wake
    * creature						-> WakeOther
    * 'up' creature					-> WakeOther
;

Verb 'pray'
    * 							-> Pray
;

Verb 'blow'
    * held						-> Blow
;

Verb 'swing'
    * noun						-> Swing
    * 'on' noun						-> Swing
;

Verb 'dive' 'swim'
    * 							-> Swim
;

Verb 'squash' 'squeeze'
    * noun						-> Squeeze
;

Verb 'buy' 'purchase'
    * special						-> Buy
;

Verb 'qq'
    * 							-> UnconditionalQuit
;

Verb 'ram'
    * noun						-> Ram
;

Verb 'climb' 'scale'
    * noun						-> Climb
;

Verb 'sing'
    * 							-> Sing
;

Verb 'peel'
    * noun						-> Take
    * 'off' noun					-> Take
;

Verb 'point'
    * noun 'at' noun					-> Point
;

Verb 'strike'
    * noun						-> Strike
;

Verb 'nap' 'sleep' 'snooze'
    * 							-> Sleep
;

Verb 'consume' 'eat' 'gobble' 'ingest' 'munch'
    * held						-> Eat
;

Verb 'ask'
    * creature 'about' special				-> Ask
;

Verb 'answer' 'say' 'shout' 'speak'
    * special 'to' creature				-> Answer
;

Verb 'help'
    * 							-> Help
    * special						-> HelpSpecial
;

Verb 'hint' 'hints'
    * 							-> Hints
;

Verb 'wait' 'z//'
    * 							-> Wait
;

Verb 'rip' 'tear'
    * 							-> Tear
    * 'down' noun					-> PullDown
    * noun						-> Tear
;

Verb 'attack' 'break' 'crack' 'destroy' 'fight' 'hit' 'kill' 'murder' 'smash' 'torture' 'wreck'
    * noun						-> Attack
;

Verb 'consult'
    * held 'about' special				-> Consult
;

Verb 'unlock'
    * noun 'with' held					-> Unlock
;

Verb 'lock'
    * noun 'with' held					-> Lock
;

Verb 'flip' 'switch' 'toggle'
    * noun						-> SwitchOn
    * noun 'on'						-> SwitchOn
    * noun 'off'					-> SwitchOff
    * 'on' noun						-> SwitchOn
    * 'off' noun					-> SwitchOff
;

Verb 'rotate' 'screw' 'turn' 'twist' 'unscrew'
    * noun						-> Turn
    * noun 'on'						-> SwitchOn
    * noun 'off'					-> SwitchOff
;

Verb 'clear' 'move' 'press' 'push' 'shift'
    * noun						-> Push
    * noun noun						-> PushDir
    * noun 'to' noun					-> Transfer
;

Verb 'drag' 'pull'
    * noun						-> Pull
    * 'down' noun					-> PullDown
;

Verb 'dig' 'exhume'
    * 							-> Dig
    * special						-> Dig
;

Verb 'set'
    * noun						-> Set
;

Verb 'wave'
    * 							-> WaveHands
    * noun						-> Wave
;

Verb 'frisk' 'search'
    * noun						-> Search
;

Verb 'places'
    * 							-> Places
;

Verb 'object'
    * 							-> Objects
;

Verb 'wash'
    * special 'with' held				-> Wash
;

Verb 'bother' 'curses' 'darn' 'drat'
    * 							-> Mild
    * special						-> Mild
;

Verb 'bugger' 'curse' 'damn' 'fuck' 'shit' 'sod'
    * 							-> Strong
    * special						-> Strong
;

Verb 'sorry'
    * 							-> Sorry
;

Verb 'no'
    * 							-> YesNo
;

Verb 'y//' 'yes'
    * 							-> YesNo
;

Verb 'noscript'
    * 							-> ScriptOff
;

Verb 'script'
    * 							-> ScriptOn
    * 'off'						-> ScriptOff
    * 'on'						-> ScriptOn
;

Verb 'save'
    * 							-> Save
;

Verb 'restart'
    * 							-> Restart
;

Verb 'restore'
    * 							-> Restore
;

Verb 'die' 'q//' 'quit'
    * 							-> Quit
;

Verb 'check' 'describe' 'examine' 'read' 'watch' 'x//'
    * noun						-> Examine
;

Verb 'exit' 'out'
    * 							-> Exit
;

Verb 'lie'
    * 							-> Lie
    * 'down'						-> LieDown
;

Verb 'enter' 'in'
    * noun						-> Enter
;

Verb 'close' 'cover' 'shut'
    * noun						-> Close
;

Verb 'open' 'uncover' 'undo' 'unwrap'
    * noun						-> Open
    * noun 'with' held					-> Unlock
;

Verb 'brief' 'normal'
    * 							-> Brief
;

Verb 'long' 'verbose'
    * 							-> Verbose
;

Verb 'short' 'superb'
    * 							-> Superbrief
;

Verb 'l//' 'look'
    * 							-> Look
    * 'at' noun						-> Examine
    * 'inside' noun					-> Search
    * 'in' noun						-> Search
    * 'under' noun					-> LookUnder
    * 'up' special					-> Consult
    * 'up' special 'in' held				-> ConsultT
    * 'through' noun					-> Search
;

Verb 'full' 'fullscore'
    * 							-> FullScore
;

Verb 'score'
    * 							-> Score
;

Verb 'i//' 'inventory'
    * 							-> Inv
;

Verb 'go' 'leave' 'run' 'walk'
    * 							-> VagueGo
    * noun						-> Go
    * 'into' noun					-> Enter
    * 'through' noun					-> Enter
;

Verb 'exhibition' 'reveal' 'show'
    * 'off'						-> Sing
    * noun 'to' creature				-> Show
;

Verb 'feed' 'give' 'offer' 'pay'
    * creature multiheld				-> Give
    * multiheld 'to' creature				-> Give
    * 'over' multiheld 'to' creature			-> Give
;

Verb 'discard' 'drop' 'throw'
    * multiheld						-> Drop
    * multiexcept 'in' noun				-> Insert
    * multiexcept 'into' noun				-> Insert
    * multiexcept 'down' noun				-> Insert
    * held 'at' noun					-> Throw
;

Verb 'transfer'
    * noun 'to' noun					-> Transfer
;

Verb 'empty'
    * noun						-> Empty
    * noun 'to' noun					-> EmptyT
    * noun 'into' noun					-> EmptyT
;

Verb 'insert'
    * multiexcept 'in' noun				-> Insert
    * multiexcept 'into' noun				-> Insert
;

Verb 'put'
    * multiexcept 'in' noun				-> Insert
    * multiexcept 'into' noun				-> Insert
    * multiexcept 'on' noun				-> Insert
    * 'on' held						-> Wear
    * 'down' multiheld					-> Drop
    * multiheld 'down'					-> Drop
;

Verb 'disrobe' 'doff'
    * held						-> Disrobe
;

Verb 'assume' 'don' 'wear'
    * held						-> Wear
;

Verb 'extract' 'remove' 'shed'
    * held						-> Disrobe
    * multi						-> Take
    * multiinside 'from' noun				-> Remove
;

Verb 'stand'
    * 							-> Exit
    * 'up'						-> Exit
;

Verb 'get' 'lift' 'pick' 'take'
    * 'out'						-> Exit
    * 'up'						-> Exit
    * 'inventory'					-> Inv
    * multi						-> Take
    * multiinside 'from' noun				-> Remove
    * 'in' noun						-> Enter
    * 'off' held					-> Disrobe
;



Object compass "compass"	
  has	concealed;

Object -> n_obj "north wall"	
  with	name 'n//' 'north' 'wall',
	article "the",
	door_dir n_to,
  has	scenery wall_attr;

Object -> s_obj "south wall"	
  with	name 's//' 'south' 'wall',
	article "the",
	door_dir s_to,
  has	scenery wall_attr;

Object -> e_obj "east wall"	
  with	name 'e//' 'east' 'wall',
	article "the",
	door_dir e_to,
  has	scenery wall_attr;

Object -> w_obj "west wall"	
  with	name 'w//' 'west' 'wall',
	article "the",
	door_dir w_to,
  has	scenery wall_attr;

Object -> ne_obj "northeast wall"	
  with	name 'ne' 'northeast' 'wall',
	article "the",
	door_dir ne_to,
  has	scenery wall_attr;

Object -> nw_obj "northwest wall"	
  with	name 'nw' 'northwest' 'wall',
	article "the",
	door_dir nw_to,
  has	scenery wall_attr;

Object -> se_obj "southeast wall"	
  with	name 'se' 'southeast' 'wall',
	article "the",
	door_dir se_to,
  has	scenery wall_attr;

Object -> sw_obj "southwest wall"	
  with	name 'sw' 'southwest' 'wall',
	article "the",
	door_dir sw_to,
  has	scenery wall_attr;

Object -> u_obj "ceiling"	
  with	name 'u//' 'up' 'ceiling',
	article "the",
	door_dir u_to,
  has	scenery wall_attr;

Object -> d_obj "floor"	
  with	name 'd//' 'down' 'floor',
	article "the",
	door_dir d_to,
  has	scenery wall_attr;

Object thedark "Darkness"	
  with	description "It is pitch dark, and you can't see a thing.",
  has	;

Object Grahams_Lair "Graham's Lair"	
  with	description "A home for the bewildered. NE to stream, NW to lighthouse, SE to cupboard, SW to Folly, N to onboat, S to projector room, E to Shaftmid, W to Infroom, U to cliffs, D to cave.",
	n_to On_board_the_Phlebas,
	s_to Souvenirs_Room,
	e_to Dark_Shaft,
	w_to Infinity_Symbol,
	ne_to Garden_Stream,
	se_to Inside_Cupboard,
	nw_to Lighthouse,
	sw_to Folly,
	u_to Cliffs,
	d_to Universe_Maintenance_Room,
  has	light;

Object Attic "Attic"	
  with	name 'beams' 'wiring' 'floor' 'floorboard',
	description "The attics, full of low beams and awkward angles, begin here in a relatively tidy area which extends north, south and east. The wooden floorboards seem fairly sound, just as well considering how heavy all these teachests are. But the old wiring went years ago, and there's no electric light.",
	n_to Old_Winery,
	s_to Old_Furniture,
	e_to Servants_Room,
	d_to hinged_trapdoor,
  has	;

Object -> hinged_trapdoor "hinged trapdoor"	
  with	name 'hinged' 'trap' 'door' 'trapdooor',
	initial "A hinged trapdoor in the floor stands open, and light streams in from below.",
	after TrapdoorAfter,
	door_dir d_to,
	door_to House,
	describe "There is a closed trapdoor in the middle of the floor.",
  has	light door open openable static;

Object -> teachests "teachests"	
  with	name 'tea' 'chests' 'teacher',
	description "Open-topped. You could easily look inside, if so minded.",
	article "some",
  has	container open scenery pluralname;

Object -> -> Meldrews_History "History of the Meldrews (vol. II)"	
  with	name 'book' 'history',
	description "It was to have been the Honourable Peter Meldrew's life's work, a two-volume edition giving the definitive family history. Unfortunately, although he claimed to have hunted for evidence to the ends of the earth, he never could find a detail he wanted for volume I, and it was never published. Somehow, this typifies your family, and consulting this worthy book about your ancestors makes you realise what an uncanny knack they had for never quite achieving anything.^^Unless, of course, you count having an awful lot of children. So many Meldrews are listed here that you'll have to look them up individually.",
	article "the",
	devil_hint "What a boring old book!  There's nobody worth looking up.",
  has	concealed;

Object -> antique_jewellery_box "antique jewellery box"	
  with	name 'antique' 'jewellery' 'box',
	description "A graceful lady's box, bearing the initials A. M. and engraved with a drawing of what seems to be a rabbit's foot.",
	article "an",
	initial "In one corner is a jewellery box, which had previously been hidden by the open trapdoor.",
	with_key delicate_gold_key,
	angel_hint "Try investigating the world of the romantic novel, out on the balconies of life.",
  has	concealed container transparent openable lockable locked;

Object -> -> four_leafed_clover "four-leafed clover"	
  with	name 'four' 'leafed' 'clover',
	description "The fabulously lucky plant has a long stalk.",
	rod_assoc rod_of_luck,
	angel_hint "Not much use as it is, is it?",
  has	hidden_rod;

Object -> yourself "yourself"	
  with	name 'me' 'myself' 'self',
	article "the",
	devil_hint "Perfect for little pointy forks.",
	angel_hint "Please, please. This isn't that kind of afterlife.",
  has	concealed animate proper;

Object -> -> crumpled_piece_of_paper "crumpled piece of paper"	
  with	name 'crumpled' 'paper',
	description "   Things to do:^   1. Find map^   2. Phone airport to check parking^   3. Health forms...^and so on. Let's face it, 1. is more enticing than the rest put together.",
	devil_hint "Immensely useful, that.",
  has	moved;

Object -> -> electric_torch "electric torch"	
  with	name 'electric' 'torch' 'compartment',
	description "The torch has a battery compartment which can be reached by opening it up.",
	article "an",
	after TorchAfter,
	devil_hint "Pity you can't change the batteries.",
  has	light moved container transparent openable;

Object -> -> -> old_smudged_battery "old smudged battery"	
  with	name 'old' 'smudge' 'battery',
	article "an",
	number 200,
  has	;

Object -> -> chocolate_biscuit "chocolate biscuit"	
  with	name 'chocolate' 'biscuit',
	description "Oatmeal covered with plain chocolate, since you ask.",
	devil_hint "I bet you didn't know that chocolate biscuit manufacturers are damned in perpetuity?  I'm afraid the chapters about that in the Old Testaments were lost, though, and now no-one can remember why.",
  has	moved edible;

Object rod_of_luck "Rod of Luck"	
  with	name 'rod' 'of' 'luck',
	article "the",
	rod_action RodOfLuckAction,
	angel_hint "Well, if there's such a thing as luck, maybe this would help.",
  has	rod_attr;

Object Servants_Room "Servant's Room"	
  with	description "Once upon a time, servants in great houses lived in awful little crevices and excuses for rooms like this one. They must have been in permanent danger of suffocation, for there are no windows and only a doorway to the west. A bed is still kept here, and the sight of it brings on drowsiness in all this warm stuffy air. All you want to do is curl up and sleep.",
	w_to Attic,
  has	;

Object -> servants_bed "servant's bed"	
  with	name 'servant' 'bed',
  has	open enterable scenery;

Object -> old_striped_scarf "old striped scarf"	
  with	name 'old' 'scarf',
	description "Made by Dunn and Co., naturally, with four stripes: royal blue, emerald, dark grey and scarlet.",
	article "an",
	initial "An old striped scarf is hung up behind the doorway.",
	devil_hint "The very height of fashion, if you ignore the colours and wear it regardless.",
  has	clothing;

Object House "House"	
  with	after HouseAfter,
  has	light;

Object Old_Furniture "Old Furniture"	
  with	name 'armchair' 'umbrella' 'table',
	description "Scruffy old furniture is piled up here: armchairs with springs coming out, umbrella stands, a badly scratched cupboard, a table with one leg missing... You try to remember why you keep all this rubbish, and fail. Anyway the attic continues to the southeast.",
	n_to Attic,
	se_to Over_the_East_Wing,
  has	;

Object -> furniture "furniture"	
  with	name 'furniture',
	description "Nothing there, but that cupboard looks interesting.",
  has	scenery;

Object -> scratched_cupboard "scratched cupboard"	
  with	name 'scratch' 'cupboard',
  has	container transparent open openable scenery;

Object -> -> gift_wrapped_parcel "gift-wrapped parcel"	
  with	name 'gift' 'parcel',
	before ParcelBefore,
	devil_hint "Shame the wrapping paper won't come off.",
  has	;

Object -> -> medicine_bottle "guaranteed-unbreakable medicine bottle with a child-proof lock"	
  with	name 'medicine' 'bottle',
	before MedicineBefore,
	devil_hint "These bottles can even survive long drops, so perhaps you should try fire.",
  has	container openable locked;

Object -> -> -> red_tablet "red tablet"	
  with	name 'red//p' 'pill' 'tablet',
	devil_hint "This drug is for fun, it isn't an antidote. And it tastes gorgeous...",
  has	edible scored;

Object box_of_chocolates "box of chocolates"	
  with	name 'box' 'of' 'chocolate',
	devil_hint "Far too nice to give to anybody else. In fact...",
  has	edible;

Object wrapping_paper "wrapping paper with reindeer on"	
  with	name 'wrapping' 'paper' 'reindeer',
	article "some",
	devil_hint "The reindeer have enormous significance.",
  has	;

Object postcard "postcard of the Champs-Elysees"	
  with	name 'postcard' 'card',
	description "It is addressed to the house, and postmarked 1963, but has no message. Odd, that.",
	after PostcardAfter,
	devil_hint "There's no message there to read.",
  has	;

Object Over_the_East_Wing "Over the East Wing"	
  with	name 'steps',
	description "The air is dusty and warm, almost making you choke in this rather empty area. The attic turns from northwest to east, and there is also a tight doorway leading west. A short flight of wooden steps leads down and to the south.",
	s_to Disused_Observatory,
	e_to East_Annexe,
	w_to Dark_Room,
	nw_to Old_Furniture,
	d_to Disused_Observatory,
  has	;

Object Dark_Room "Dark Room"	
  with	description "This is a roughly-furnished photographer's dark room, used by your grandfather years ago. There's nothing much here now, since you threw the chemicals out in case the children found them.",
	after DarkRoomAfter,
	e_to Over_the_East_Wing,
	cant_go "The only doorway is back east.",
  has	;

Object -> hanging_cord "hanging cord"	
  with	name 'hanging' 'cord',
	description "It is attached to the ceiling.",
	initial "You bump your head on the cord hanging from the ceiling, for the umpteenth time.",
	before HangingCordBefore,
  has	static;

Object -> sepia_photograph "sepia photograph"	
  with	name 'sepia' 'photo' 'photograph' 'roger//p',
	description "The photograph is one of the very early ones which looks as if it was taken in the dark because the chemicals have gradually oxidised. The poor man in the frame (Mr Roger Meldrew, Esquire) looks as if he was propped up by a big clamp to hold him still for five minutes, and that's because he was.",
	article "the old",
	initial "Mounted on a plaque is an old sepia photograph of a man.",
  has	static;

Object -> flash "photographer's flash"	
  with	name 'photograph' 'flash' 'compartment',
	description "It has an openable compartment on the side to hold a battery and a timer mechanism.",
	initial "A rather more modern photographer's flash lies on a shelf to one side.",
	angel_hint "When you can get this working, perhaps you should take it somewhere prominent.",
  has	container transparent openable;

Object Disused_Observatory "Disused Observatory"	
  with	name 'mural' 'zodiac' 'signs',
	description "Once upon a time, this small circular room had a dome and a telescope, but it leaked dreadfully and so now there's a proper roof. A circular mural painted with the signs of the zodiac is interrupted by a short flight of stairs leading up to the north, a west doorway to a shadowy alcove and the continuation of the stairs down and to the south.",
	n_to Over_the_East_Wing,
	s_to Souvenirs_Room,
	w_to Library_Storage,
	u_to Over_the_East_Wing,
	d_to Souvenirs_Room,
  has	;

Object -> solid_glass_ball "solid glass ball"	
  with	name 'glass' 'ball',
	description "The ball is scratched and misted up.",
	initial "Mounted on the old telescope stand is what looks like a solid glass ball.",
	before GlassBallBefore,
  has	static;

Object Library_Storage "Library Storage"	
  with	description "Once upon a time, the house library was used as a gun-room, and all the unwanted books kept up here. Now this is just another awkward cranny.",
	e_to Disused_Observatory,
	cant_go "From here, you can only squeeze back east to the observatory.",
  has	;

Object -> romantic_novel "romantic novel"	
  with	name 'romance' 'romantic' 'novel' 'book',
	description "~Coronets for the Cotton Girl~, by Miss Marie Swelldon, published London, 1912. It's all about the happy-go-lucky daughter of a Yorkshire mill owner and her adventures marrying into the aristocracy.",
	devil_hint "Don't bother reading or thinking about it. Nothing to do with your family.",
  has	;

Object -> poetry_book "book of Twenties poetry"	
  with	name 'poetry' 'book',
	before PoetryBefore,
	devil_hint "My my, a golden age for clear, simple poetry. At last, the dreary obscurity of Tennyson, Kipling, and [frothing at the mouth] Hardy gives way...",
  has	;

Object Souvenirs_Room "Souvenirs Room"	
  with	name 'souvenir' 'holiday' 'snaps',
	description "This is where you ought to have left the wretched map, in the family lumber-room of souvenirs and holiday snaps. You checked it thoroughly earlier, and can't bear the thought of searching it all again. A slide projector is aimed at the whitewashed south wall, one of the outside walls of the house. The only way to go is back up to the observatory.",
	before SouvenirRoomBefore,
	after SouvenirRoomAfter,
	n_to Disused_Observatory,
	s_to south_wall,
	u_to Disused_Observatory,
  has	;

Object -> slide_projector "slide projector"	
  with	name 'slide' 'projector' 'switch',
	description "It has an on/off switch on the side, and a slot for holding whatever is to be projected.",
	after ProjectorAfter,
  has	container open scenery switchable;

Object -> south_wall "south wall"	
  with	door_dir s_to,
	door_to nothing,
  has	concealed door open scenery static;

Object East_Annexe "East Annexe"	
  with	name 'gap' 'tiles' 'roof',
	description "This tight annexe at the eastern end of the house is piled up with old loft insulation rolls, left over from the last time the job was done (whenever that was). A gap between the tiles of the roof (which you really must mend before winter) lets a little natural light in, but the attics to the west and south are dark.",
	after EastAnnexeAfter,
	n_to cupboard_door,
	s_to Dead_End,
	w_to Over_the_East_Wing,
  has	light;

Object -> insulation_rolls "insulation rolls"	
  with	name 'insulation' 'rolls' 'roll',
	article "some",
  has	scenery pluralname;

Object -> -> new_battery "new-looking battery"	
  with	name 'new' 'battery',
	number 200,
	devil_hint "That is a difficult puzzle, yes.",
  has	;

Object -> cupboard_door "cupboard door"	
  with	name 'cupboard' 'door',
	initial "In the north wall is an open cupboard door, large enough to step inside.",
	door_dir n_to,
	door_to Inside_Cupboard,
	describe "In the north wall is an intriguing closed cupboard door.",
	with_key small_brass_key,
  has	door openable static lockable;

Object Dead_End "Dead End"	
  with	name 'soot' 'chimney' 'sweeping' 'gear',
	description "The winding attic comes to a dead end here, and particularly dirty it is too, what with soot everywhere from the broken old chimney-sweeping gear.",
	n_to East_Annexe,
	s_to secret_door,
  has	;

Object -> canvas_rucksack "canvas rucksack"	
  with	name 'canvas' 'rucksack' 'sack',
	description "On second thoughts, now you look at more closely, it seems to be the rucksack you bought to go to Paris with five years ago.",
	initial "Great Scott!  That old canvas rucksack must be the very one your famous ancestor, the African explorer Ebenezer Meldrew, brought back from the Zambeze Expedition of 1882!",
	devil_hint "It might be handy, if only it could carry anything.",
  has	clothing container transparent open openable;

Object -> secret_door "secret door"	
  with	name 'secret' 'door',
	initial "A secret door stands open in the south wall!",
	door_dir s_to,
	door_to Alisons_Writing_Room,
	describe "The secret door is closed.",
  has	concealed door open openable static;

Object Inside_Cupboard "Inside Cupboard"	
  with	description "This is a surprisingly spacious cupboard, which you can't recall ever visiting before today. You really ought to use this convenient empty room for something...",
	after InsideCupboardAfter,
	s_to East_Annexe,
	w_to big_iron_fireplace,
	u_to cranked_skylight,
  has	;

Object -> painting_of_Mad_Isaac_Meldrewe "painting of Mad Isaac Meldrewe"	
  with	name 'painting' 'of' 'mad' 'isaac//p',
	description "It used to hang in the downstairs landing, and the red, deranged eyes annoyed everybody who passed. Then Aunt Jemima picked up the ridiculous idea that it was by Sir Joshua Reynolds and had it valued. Happily it wasn't and, to cut a long story long, it ended up here.",
	initial "A large painting of Mad Isaac Meldrewe, your eighteenth-century ancestor, is propped up against the west wall.",
	after IsaacPaintingAfter,
	devil_hint "Carry this with you everywhere you go.",
  has	;

Object -> big_iron_fireplace "big iron fireplace"	
  with	name 'iron' 'fireplace' 'chimney',
	initial "There is a big iron fireplace in the west wall.",
	door_dir w_to,
	door_to Chimney,
  has	concealed door container open static;

Object -> cranked_skylight "cranked skylight"	
  with	name 'crank' 'skylight' 'handle',
	description "It was painted out black during the first wave of Zeppelin air raids in World War One. This is completely irrelevant, but you did ask.",
	initial "The skylight above is open, and the sky does indeed light the room.",
	door_dir u_to,
	door_to Roof,
	describe "Above you is a blacked-out skylight with a crank handle.",
  has	door static;

Object -> gas_mask "gas mask"	
  with	name 'gas' 'mask' 'gasmask',
	after MaskAfter,
	devil_hint "The cork filters have gone. It's useless now.",
  has	clothing;

Object Roof "Roof"	
  with	name 'roof' 'balcony',
	description "This is a recessed area of the roof, open to the skies but screened from below. There used to be a flagpole here, but not any more. An open skylight leads down, and a fairly safe catwalk leads northwest. However, the red-tiled roof is vertiginous and you have vertigo, which makes it especially annoying that there's an odd little balcony too far away to the south.",
	nw_to Battlements,
	d_to Inside_Cupboard,
	cant_go "William Wordsworth once described poetry as emotion recollected in tranquillity. If so, hospitals must be full of people turning out verses about what it was like to fall off the roof of a high building. Perhaps it might be better not to join them.",
  has	light;

Object Battlements "Battlements"	
  with	name 'battlements' 'crenellated',
	description "The old crenellated battlements of the house. An Englishman's home is, of course, his castle, but Meldrew Hall never saw much fighting and these military-looking features were just a seventeenth-century fashion. They also weren't intended for standing on, and the only safe way to proceed is back southeast.^^It is peculiarly cold here.",
	se_to Roof,
	cant_go "The rooftop is far too dangerous in that direction.",
  has	light;

Object -> iron_key "gothic-looking iron key"	
  with	name 'gothic' 'iron' 'key',
	before IronKeyBefore,
	devil_hint "Unfortunately, what you need this for is a very long way away.",
  has	scored;

Object -> Sir_Joshua_Meldrewe "Sir Joshua Meldrewe"	
  with	name 'ghost' 'sir' 'joshua//p',
	description "He is dressed in a grey shadow of Georgian finery.",
	number 0,
  has	concealed animate proper;

Object Chimney "Chimney"	
  with	description "The chimney is cramped, sooty, unpleasant and has no floor to speak of, so you are held up only by jamming your feet against the walls. To the east, through the fireplace, is the cupboard.",
	before ChimneyBefore,
	e_to Inside_Cupboard,
	d_to Priests_Hole,
	cant_go "Not a chance!",
  has	;

Object -> sooty_old_stick "sooty old stick"	
  with	name 'sooty' 'stick',
	initial "Wedged loosely in beside you is a sooty old stick.",
	rod_assoc rod_of_fire,
	devil_hint "It's exactly what it seems.",
  has	hidden_rod;

Object rod_of_fire "Rod of Fire"	
  with	name 'rod' 'of' 'fire',
	article "the",
	rod_action FireRodAction,
	angel_hint "This is rather dangerous, I'm afraid. Use only on vegetative matter.",
  has	rod_attr;

Object Priests_Hole "Priest's Hole"	
  with	name 'cross' 'padded' 'chute' 'crawl',
	description "Good heavens, so the house has a priest hole after all!  It was always a family legend but nobody seemed to know quite where it was. Apart from a cross painted on one wall and a padded floor (to absorb the noise), this spartan cranny is featureless. Nevertheless there is a spooky air of the supernatural about... A narrow crawl leads up into the chimney.",
	before PriestsHoleBefore,
	u_to Chimney,
	d_to hatch,
  has	scored;

Object -> hatch "hatch"	
  with	name 'hatch' 'door',
	description "Perhaps the attic key might unlock it?  It does look modern compared to everything else here.",
	initial "An open hatch-door in the floor reveals a chute leading down into darkness.",
	door_dir d_to,
	door_to Cellar_West,
	describe "Low down on one wall is little hatch door, which if it were open would be large enough to enter.",
	with_key small_brass_key,
  has	door openable static lockable locked;

Object -> ancient_prayer_book "ancient prayer book"	
  with	name 'diary' 'ancient' 'prayer' 'book',
	description "Despite appearances, this is not a prayer book after all but is Mad Isaac's diary of supernatural investigations!  The script is cursive and cursory as he rambles on through all those theories about the Curse. There's so much of it that you'd better just look up particular years.",
	initial "The dust and grime on the floor almost obscures an ancient prayer book.",
	devil_hint "The really good research was in his earlier years.",
  has	;

Object Alisons_Writing_Room "Alison's Writing Room"	
  with	description "A pleasantly furnished, if now mildewed, box room. A rather small door leads back north into the attics. The room is provided with a comfortable bed, which looks very inviting.",
	n_to Dead_End,
	s_to windows,
	cant_go "There's just the secret north door, unless of course you count the windows.",
  has	light;

Object -> comfortable_bed "comfortable bed"	
  with	name 'comfortble' 'bed',
  has	light open enterable scenery;

Object -> windows "windows"	
  with	name 'window' 'glass',
	initial "Black-latticed windows open on a beautiful summer's day.",
	before WindowsBefore,
	door_dir s_to,
	door_to Tiny_Balcony,
	describe "Blue skies can be seen through south-facing windows, latticed with black lead and shut tight.",
  has	door static;

Object Tiny_Balcony "Tiny Balcony"	
  with	name 'roof' 'motorway' 'garden',
	description "A tiny balcony around Miss Alison's windows, offering fresh air, blue skies and a magnificent view over the gardens down to the droning motorway in the distance. The roof is too perilous to scale even if you had a good reason (which you haven't), so you had better go back north.",
	n_to Alisons_Writing_Room,
	cant_go "The rooftop is far too dangerous in that direction.",
  has	light;

Object -> window_sill "window sill"	
  with	name 'window' 'sill',
	initial "The balcony is only a foot or so beneath the window-sill, and only about four feet square.",
  has	static;

Object -> delicate_gold_key "delicate gold key"	
  with	name 'delicate' 'gold' 'key',
	devil_hint "Gold and lead are naturally related, so you want to find a lead box to open.",
  has	concealed scored;

Object Old_Winery "Old Winery"	
  with	name 'banister' 'rail' 'crack' 'paraphernalia',
	description "This small cavity at the north end of the attic once housed all manner of home-made wine paraphernalia, now lost and unlamented. Steps, provided with a good strong banister rail, lead down and to the west, and the banister rail continues along a passage east.",
	after WineryAfter,
	s_to Attic,
	e_to Storage_Room,
	w_to Conservatory,
	d_to Conservatory,
	number 0,
  has	;

Object -> demijohn "labelXXXled glass demijohn"	
  with	name 'demijohn' 'glass' 'bottle' 'labelXXX',
	description "Faded ink on the labelXXX reads: Elderberry '63.",
	before DemijohnBefore,
  has	container openable static;

Object -> -> nasty_battery "nasty-looking red battery"	
  with	name 'nasty' 'red//p' 'battery',
	description "On the side is the word ~Achtung~.",
	devil_hint "It's provided for your torch, and not for anything else.",
  has	;

Object -> -> tourist_map "tourist map"	
  with	name 'hamburg' 'tourist' 'map',
	description "The good news is that it has excellent grid references, which are easy to look up. The bad news is that it is a map of central Hamburg.",
	devil_hint "Purely decorative.",
  has	;

Object Storage_Room "Storage Room"	
  with	description "A disused storage room off the winery. In one wall is an opening onto an ominous dark shaft, and beside it is a big Victorian-steam-engine style wheel with a handle on.",
	before StorageRoomAfter,
	after StorageRoomBefore,
	w_to Old_Winery,
	cant_go "The only doorway is back west to the winery.",
  has	;

Object -> wheel2 "wheel"	
  with	name 'wheel' 'handle' 'catch' 'safety',
	description "There is a concealed safety catch (poorly) hidden on the wheel.",
	before Wheel2Before,
  has	scenery switchable on;

Object -> dumbwaiter "dumbwaiter"	
  with	name 'dumb' 'waiter' 'dumbwaiter',
	article "the old",
	initial "Inside the dark shaft is the old dumbwaiter.",
  has	container open enterable static;

Object -> -> pulley_ropes "pulley ropes"	
  with	name 'pulley' 'rope' 'ropes',
	article "the",
	initial "The dumbwaiter hangs on strong pulley ropes which stretch up and down from here.",
	before PulleyBefore,
  has	static;

Object -> -> chicken_wishbone "chicken wishbone"	
  with	name 'wish' 'bone' 'wishbone' 'chicken',
	description "The half which didn't get the wish, actually.",
	devil_hint "It isn't even mentioned in any of the books I've read.",
  has	;

Object -> dark_shaft_obj "dark shaft"	
  with	name 'shaft' 'dark',
	description "Uninviting.",
  has	container transparent open scenery;

Object Dark_Shaft "Dark Shaft"	
  with	description "Halfway up, or else halfway down, and a dreary place it is too: nothing but a dark corridor leading north.",
	before DarkShaftBefore,
	after DarkShaftAfter,
	n_to Dark_Passage,
	d_to Cellars,
  has	;

Object Dark_Passage "Dark Passage"	
  with	name 'coal' 'dust',
	description "A passage which slants very slightly down to the south, which is full of coal dust, to which you are unfortunately allergic. Not somewhere to linger.",
	before PassageBefore,
	n_to metal_door,
	s_to Dark_Shaft,
	number 2,
  has	;

Object -> metal_door "metal door"	
  with	name 'metal' 'door',
	initial "At the north end is a metal door, standing open.",
	after MetalDoorAfter,
	door_dir n_to,
	door_to Garden_Stream,
	describe "At the north end is a closed metal door.",
	with_key small_brass_key,
  has	door openable static lockable locked;

Object Cellars "Cellars"	
  with	description "Cobwebbed old cellars. There is nothing to see except an opening in one wall onto a dark shaft, and a big Victorian-steam-engine style wheel beside it with a handle on. The cellar continues west and south.",
	before CellarsBefore,
	s_to Cellars_South,
	w_to Cellar_West,
  has	;

Object -> wheel "wheel"	
  with	name 'wheel' 'handle' 'safety' 'catch',
	description "There is a concealed safety catch on the wheel axle.",
	before WheelBefore,
  has	scenery switchable on;

Object -> dark_shaft "dark shaft"	
  with	name 'shaft' 'dark',
	description "Uninviting.",
  has	container transparent open enterable scenery;

Object -> old_timber_prop "old timber prop"	
  with	name 'prop' 'timber',
	article "an",
	rod_assoc rod_of_returning,
	devil_hint "A plain old piece of timber.",
  has	hidden_rod;

Object -> robot_mouse "robot mouse"	
  with	name 'robot' 'mouse',
	description "Remember the late 1970s, when a craze for home-made robots swept the home computing world?  No, perhaps not, but here is a left-over from it anyway. The mouse is quite large (almost a foot wide and tall), and has a big smile painted on its metal chassis.",
	initial "In one corner is a dust-covered robot mouse.",
	devil_hint "It can't even follow orders.",
  has	talkable;

Object rod_of_returning "Rod of Returning"	
  with	name 'rod' 'of' 'returning',
	article "the",
	rod_action transport_player,
	devil_hint "Well, that's not very useful, is it?  I'd go on strike if I were you.",
  has	rod_attr;

Object Cellars_South "Cellars South"	
  with	description "The bricking-up of this cellar seems incomplete, because there is a hole about ten or eleven inches across in the west wall. You peer at this with interest but nothing is within reach inside, and it is far too small for you to wriggle through. The cellars go back north, and so, it would appear, do you.",
	n_to Cellars,
  has	;

Object -> hole_in_the_wall "hole in the wall"	
  with	name 'hole' 'mousehole',
  has	scenery talkable;

Object -> -> small_brass_key "small brass key"	
  with	name 'small' 'brass' 'attic' 'key',
	initial "Lying where the mouse dropped it is a small brass key.",
	devil_hint "It isn't the attic key, I fear.",
  has	;

Object Cellar_West "Cellar West"	
  with	description "The west end of a disused and shadowy old cellar. It used to be a wine cellar, but was bricked up when you were a child - you never did find out why. Perhaps the golden, jewelled staircase leading down into smoky mists to the south might be something to do with it.",
	s_to Hellish_Place,
	e_to Cellars,
	nw_to Gothic_door,
	d_to Hellish_Place,
  has	;

Object -> Gothic_door "Gothic door"	
  with	name 'gothic' 'iron' 'door',
	initial "In the northwest wall the iron door stands open.",
	door_dir nw_to,
	door_to Infinity_Symbol,
	describe "In the northwest wall is a heavy, imposing Gothic iron door.",
	with_key iron_key,
  has	door openable static lockable locked;

Object Infinity_Symbol "Infinity Symbol"	
  with	name 'marble' 'disc' 'webs' 'icicle',
	description "An eerie, dark cave carved from crystal icicles of rock and strewn with great spiders' webs hung from the ragged stone, inhabited only by dead white insects. A narrow crevice opens out to an iron doorway and the warmth of the house.^^The rough stone floor levels out to a perfectly round, smooth white marble disc about five yards across, inscribed with a black lemniscus (or infinity) symbol.^^You shiver with foreboding, but inexplicably feel that the map you're looking for must be somewhere near here.",
	before InfinityBefore,
	after InfinityAfter,
	se_to Cellar_West,
  has	light scored;

Object -> lemniscus "lemniscus"	
  with	name 'infinity' 'lemniscus' 'symbol',
  has	scenery;

Object -> circular_arc "circular arc"	
  with	name 'wells' 'circular' 'arc' 'socket',
	number 0,
  has	scenery;

Object Conservatory "Aunt Jemima's Lair"	
  with	description "This used to be called the Conservatory, before Aunt Jemima took it over to potter about with plants, painting and indeed (on occasion) pottery. She has filled the place with objets trouves and bric-a-brac, and hung up a home-made calendar of watercolours. Even the old airing cupboard to the south is cluttered.^^An open doorway leads back southwest onto the upstairs landing, and you can hear the chaotic noise of suitcases being manhandled about - good thing nobody's seen you. A narrow staircase leads up and to the east into the attic.^^Jemima herself seems to be in the potting room to the west.",
	s_to Airing_Cupboard,
	e_to Old_Winery,
	w_to Potting_Room,
	sw_to House,
	u_to Old_Winery,
  has	light;

Object -> calendar "calendar"	
  with	name 'calendar' 'page' 'pages',
	before CalendarBefore,
	number 5,
  has	scenery;

Object Airing_Cupboard "Airing Cupboard"	
  with	name 'coffee' 'mugs' 'sculpture' 'racks',
	description "A space about six feet square. The old drying racks now contain odd ceramic sculptures almost but not quite unrecognisable as coffee mugs. One corner is filled with an enormous pile of tie-dyed sheets, from Aunt Jemima's infamous Sixties Revival period of last October.",
	n_to Conservatory,
	cant_go "The only way to go from here is back north.",
  has	light;

Object -> pile_of_sheets "pile of sheets"	
  with	name 'pile' 'of' 'sheets',
  has	scenery pluralname;

Object -> antiquated_wireless "antiquated wireless"	
  with	name 'switch' 'cabinet' 'radio' 'wireless',
	description "It rolls on casters, and has a bakelite on/off switch.",
	article "an",
	initial "To one side is a heavy cabinet on casters containing an antiquated wireless, the kind with glowing valves inside. On the top is a bakelite on-off switch.",
	after RadioAfter,
	describe "To one side is a heavy cabinet on casters containing an antiquated wireless, the kind with valves inside. On the top is a bakelite on-off switch.",
	number 0,
  has	concealed static switchable;

Object Potting_Room "Potting Room"	
  with	name 'plants' 'flower' 'seeds' 'trowel',
	description "This light room is full of pot plants, flowers, seeds, ornamental trowels and other miscellaneous garden implements.",
	after PottingRoomAfter,
	e_to Conservatory,
	cant_go "The only exit is back east to the conservatory.",
  has	light;

Object -> old_gardeners__gloves "old gardeners' gloves"	
  with	name 'garden' 'gloves',
	article "some",
	initial "A pair of yellow rubber gloves hangs from a hook on one wall.",
	before GlovesBefore,
	devil_hint "Good for nothing. Why would you want gloves on?",
  has	clothing scored;

Object -> Jemima "Jemima"	
  with	name 'aunt' 'jemima//p',
	description "She's been fiddling about with those cut flowers all afternoon. And she's a bit upset at being left alone in the house while you're off on holiday, so best not to get on her bad side. You really ought to make it up to her somehow.",
	article "Aunt",
	initial "Aunt Jemima, who has for years collected varieties of daisy, is engaged in her regular annual pastime of deciding which species make the best chains.",
	number 0,
  has	animate proper;

Object daisy_chain "daisy chain"	
  with	name 'daisy' 'chain' 'daisychain',
	before daisy_chain_after,
	number 11,
	devil_hint "Dangerous to wear. But at least any sort of daisies will do.",
  has	clothing;

Object Premonition "Premonition"	
  with	description "It is a frosty, clear night, but there is a scent of camp-fires burning in the distance. You are passing through the landscape as if a ghost, and all seems faintly unreal. To the east is one side of an animal-hide tent, but there is no way in from here. To southwest, some soldiers sit around the embers of a fire. There is a terrible sense of something about to happen.",
	e_to The_Generals_Tent,
	sw_to Camp_Fire,
  has	light;

Object The_Generals_Tent "The General's Tent"	
  with	description "This is the tent of a thin, reedy man who wears no uniform but has an obvious and commanding presence. He has an aquiline, patrician nose and, at five feet four, is taller than anyone else present. The others are advisers, junior officers, scheming politicians and their like. A strange, more solid figure stands by a trestle table at the north end of the tent.",
	n_to Beside_Table,
	w_to Premonition,
  has	light;

Object Beside_Table "Beside Table"	
  with	description "Beside the table is a more substantial adviser, as if she too walks in this strange spirit plane. She is wearing frightening druidical robes, of strange pelts and furs, with nasty-looking charms around her neck. Every so often, she seems to catch sight of you out of the corner of her eye, but then look round and see nothing. The military men do not believe in her power, and yet... they treat her with respect.",
	s_to The_Generals_Tent,
  has	light;

Object -> heavy_iron_mascot "heavy iron mascot"	
  with	name 'heavy' 'iron' 'mascot',
	description "The mascot is in the shape of an ankh, with a lemniscus (or infinity) symbol moulded onto it.",
	initial "On the table is a heavy iron mascot of some kind.",
	number 0,
	devil_hint "An absolute essential.",
  has	;

Object Camp_Fire "Camp Fire"	
  with	description "You can almost smell fear here. A motley platoon of soldiers are sitting about the embers of a fire. None are talking or sleeping, and the false good humour of the evening has died away. At first light, you realise, there will be a battle. It isn't a risk you'd like to run in their place. And there is a strange light already in the east... not yet a dawn, for the soldiers seem unaware of it.",
	e_to Near_Dolmen,
	ne_to Premonition,
  has	light;

Object Near_Dolmen "Near Dolmen"	
  with	description "A standing stone, perhaps a glacial erratic, stands here and on top of it is a shining blue stone, whose brightness almost blinds you. You feel irresistably drawn to it, and your hand reaches out...",
	after NearDolemnAfter,
  has	light;

Object Garden_Stream "Garden Stream"	
  with	name 'reeds',
	description "In the lush, verdant (which is to say, under-cared for) gardens of Meldrew House, where a stream gurgles pleasantly as it meanders through reeds. The house rises up high above you to the south and you do not dare go east for fear of being recaptured by the rest of the family, so you'll have to go northwest, deeper into the gardens.",
	s_to coal_bunker,
	nw_to Family_Tree,
	cant_go "Better not go that way... you might get caught.",
  has	light scored;

Object -> coal_bunker "coal bunker"	
  with	name 'coal' 'bunker' 'loading' 'door',
	initial "On the house wall is a coal bunker, whose door stands open.",
	after CoalBunkerAfter,
	door_dir s_to,
	door_to Dark_Passage,
	describe "On the house wall is a coal bunker, whose loading door is shut.",
  has	door openable static locked;

Object Family_Tree "Family Tree"	
  with	name 'sign' 'signpost' 'post',
	description "You stand in the shade of a great plane tree, seedlings for which were brought back from Spain by an ancestor of yours in 1806. To the southeast is a stream, to the west is a small clearing and to the north a single break in the green privet hedge marks the entrance to the famously difficult Meldrew House Maze. A signpost reading ~To the Mosaic~ points east.",
	before FamilyTreeBefore,
	n_to Maze,
	e_to Mosaic,
	w_to Clearing,
	se_to Garden_Stream,
	u_to Up_the_Plane_Tree,
  has	light;

Object -> plane_tree "plane tree"	
  with	name 'plane' 'tree' 'family',
  has	scenery;

Object Mosaic "Mosaic"	
  with	name 'perspephone' 'scenes' 'quadrants',
	description "This sunken corner of the garden has been excavated and then covered over with tough perspex to protect it from visitor's shoes. It consists of a time-worn Roman mosaic, divided into four quadrants, each showing scenes of idealised Roman life. There was probably a villa on this site, but your family has never been keen on archaeologists.",
	w_to Family_Tree,
	u_to Family_Tree,
	cant_go "From here you can only climb back up to the plane tree.",
  has	;

Object -> mosaic_object "mosaic"	
  with	name 'mosaic',
	description "Made of terra-cotta and ceramic fragments, it has held together surprisingly well.",
  has	scenery;

Object Clearing "Clearing"	
  with	description "A clearing at the edge of the garden, surrounded by walls and the privet hedges of the maze. To the east is the plane tree, to the west an opening in the wall makes a garage entrance and to the south is a small vegetable garden.",
	s_to Vegetable_Garden,
	e_to Family_Tree,
	w_to Garage,
  has	light;

Object Vegetable_Garden "Vegetable Garden"	
  with	description "A recently-turned vegetable garden, using up a shady corner of the garden. The patch testifies more to good intentions than horticulture.",
	n_to Clearing,
	u_to runner_bean_plant,
	cant_go "From this corner, you can only go back to the clearing.",
  has	light;

Object -> runner_bean_plant "runner-bean plant"	
  with	name 'runner' 'bean' 'plant',
	initial "A giant runner-bean plant leads up vertiginously into the sky from here.",
	door_to Up_the_Beanstalk,
	describe "Only a runner-bean plant graces the vegetable garden.",
  has	door;

Object Garage "Garage"	
  with	description "A modest brick garage, built into the garden walls. A big open doorway leads east onto the clearing.",
	e_to Clearing,
  has	;

Object -> garden_roller "garden roller"	
  with	name 'garden' 'roller' 'switch',
	description "A motorised garden roller of the kind you sit inside, among whose simple controls is a big on/off switch.",
	initial "The garden roller sits here, its engine still running.",
	describe "A big motorised garden roller is parked here.",
  has	enterable static switchable;

Object -> weed_killer "weed killer bottle"	
  with	name 'weed' 'killer' 'bottle',
	description "If squeezed, it squirts weed killer over the ground. There are many warning labelXXXs about getting it on one's hands.",
	initial "In the shadows is a weed killer bottle.",
	angel_hint "The funny thing is, they didn't have weedkillers in the early nineteenth century, and yet they still planned some marvellous gardens.",
  has	;

Object Up_the_Plane_Tree "Up the Plane Tree"	
  with	name 'jemima//p' 'conservatory' 'window',
	description "A magnificent view of the gardens would be yours, were it not for the branches and leaves which surround you. You can make out Aunt Jemima up at the conservatory window, but hide from her view. Down below, the privet-hedge layout of the maze can be seen through the lower branches.",
	d_to Family_Tree,
	cant_go "No, don't go out on a limb.",
  has	light;

Object -> maze_layout "maze layout"	
  with	name 'maze' 'layout',
	before MazeLayoutBefore,
  has	scenery;

Object Maze "Maze"	
  with	description "A maze of green privet passages, all alike.",
	before MazeBefore,
	after MazeAfter,
	s_to Family_Tree,
	w_to Viewpoint_Ledge,
	cant_go "The privet hedges are in the way.",
  has	light scored;

Object Patio_in_Maze "Patio in Maze"	
  with	name 'patio' 'flagstone',
	description "This is an old stone patio in the heart of the garden maze. A missing flagstone offers an intriguing dark prospect beneath.",
	before PatioBefore,
	after MazeAfter,
	d_to Crypt,
	cant_go "The privet hedges are in the way.",
  has	light scored;

Object Crypt "Crypt"	
  with	description "A dismal crypt, disused, full of leaves and rainswept. Light streams in from the square hole in the roof. There are no bones or urns on show.",
	n_to bronze_mural,
	u_to Patio_in_Maze,
	d_to bronze_mural,
  has	light;

Object -> bronze_mural "bronze mural"	
  with	name 'bronze' 'mural',
	description "The mural depicts an old bearded wise man following a star in the western sky. He has his right arm around an attractive young woman and holds a bundle of wands with his left hand. Around the border are astrological symbols of all kinds, from Tarot suits to zodiacal constellations.",
	initial "The mural stands slightly to one side, revealing a passage leading downward.",
	door_dir d_to,
	door_to Catacomb_Passage,
	describe "The north wall forms a giant bronze mural, which has stood the test of time.",
  has	door static;

Object Catacomb_Passage "Catacomb Passage"	
  with	name 'bones',
	description "An eerie passage, running down from an opening at the south to murky depths in the north. The walls are jagged, uneven and decorated with bones.",
	n_to Universe_Maintenance_Room,
	s_to Crypt,
	u_to Crypt,
	d_to Universe_Maintenance_Room,
  has	;

Object Universe_Maintenance_Room "Universe Maintenance Room"	
  with	name 'gauges' 'machine',
	description "You really should try to be more awestruck, for this is Merlin's cave, the hub of Creation. Every visitor perceives this place differently, according to his or her own myths and beliefs. Your particular creed being science, it is an unimpressive collection of gauges, dials and machines. A single passage leads up and out to the south.",
	s_to Catacomb_Passage,
	u_to Catacomb_Passage,
  has	scored;

Object -> large_dial "large dial"	
  with	name 'large' 'dial',
	description "Above the dial is a lower-case letter h with a slashed line through it. It is currently turned to 1.055 or thereabouts. There is something worryingly dangerous about its matter-of-factness.",
	initial "Particularly prominent are a large dial, like the volume control on an expensive hi-fi amplifier, and a big electrician's switch. Both are labelXXXled in small print.",
	before DialBefore,
  has	static;

Object -> big_electricians_switch "big electrician's switch"	
  with	name 'big' 'electric' 'switch',
	description "The lower, on, position is labelXXXled ~Determinism~. The upper, off, position is labelled ~Chance~.",
	after ChanceSwitchAfter,
  has	scenery static switchable on;

Object Viewpoint_Ledge "Viewpoint Ledge"	
  with	name 'motorway' 'coaches',
	description "This flagstoned rampart on the hillside looks across the valley, down (unfortunately) to the motorway below. Coaches pass by, reminding you of the rapidly approaching time when visitors will have to be let in again for the summer. The only safe way to go is back east into the maze. To one side is a plaque.",
	before LedgeBefore,
	e_to Maze,
	cant_go "The hillside is too steep.",
  has	light scored;

Object -> plaque "plaque"	
  with	name 'plaque',
	description "~This viewpoint, one of the finest in the county, was laid down by Capability Meldrew, a well-known landscape gardener of his day. It was intended as one of the rewards of the garden maze, and was constructed c. 1808 after an earlier folly on the site collapsed.~",
  has	scenery;

Object -> miniature "miniature"	
  with	name 'miniature' 'plastic' 'etching',
	description "No larger than a playing card, it depicts the Folly which used to stand on the hillside outcrop.",
	initial "A miniature plastic etching rests on the plaque.",
	door_to Folly,
	devil_hint "What's the point of a drawing so small it might almost be a playing card?",
  has	;

Object Folly "Folly"	
  with	name 'wain' 'hay' 'tower' 'valley',
	description "This is a rampart on the hillside, a natural ledge leading east. Down below in the valley, rough cottages surround a church. Labourers toil in the fields, and a hay wain is being pulled across the river far below.^^Towering over you is a monstrously awful piece of architecture, a Folly. The freestanding tower has no appreciable purpose and no apparent entrance. The latter is just as well since it looks extremely unsafe.",
	after FollyAfter,
	e_to Maze_Foundations,
	cant_go "The hillside is too steep.",
  has	light scored;

Object -> bean_pole "bean pole"	
  with	name 'bean' 'pole',
	initial "A bean pole, of the kind used to grow climbing plants, rests against the side of the tower.",
	after BeanPoleAfter,
	number 0,
	rod_assoc rod_of_stalking,
	devil_hint "Whatever you do, it'll always be a bean pole.",
  has	hidden_rod;

Object rod_of_stalking "Rod of Stalking"	
  with	name 'rod' 'of' 'stalking',
	article "the",
	rod_action stalking_rod_action,
	devil_hint "It has no horticultural application.",
  has	rod_attr;

Object Up_the_Beanstalk "Up the Beanstalk"	
  with	description "At the top of the beanstalk, in amongst the clouds. There is no safe way to go from here except back down, not surprisingly. A dangerous way might be to step out onto the clouds to the north, but even if this is a fairy-tale it would be taking a lot on trust.",
	n_to Heavenly_Place,
	d_to Vegetable_Garden,
	cant_go "The clouds are too tenuous that way.",
  has	light;

Object Maze_Foundations "Maze Foundations"	
  with	description "A square grid of plots of grass and seedbeds, all alike.",
	before MazeFoundationsBefore,
	after MazeFoundationsAfter,
	s_to Tree_Planting,
	w_to Folly,
  has	light;

Object Tree_Planting "Tree Planting"	
  with	description "Capability Meldrew and his gang of workmen are delicately planting a sapling plane tree here. Your disturbance annoys them immensely and you are immediately arrested for vagrancy and theft. After a few months in prison, you are hauled up before the County Assizes and sentenced...",
	after TreePlantingAfter,
  has	;

Object Museum_of_Arcana "Museum of Arcana"	
  with	name 'shadow',
	description "A dark hall, deserted after nightfall. Outside it is a stormy October night, and rain beats against the windowpanes. Shadows swoop and dive in the air like bats.",
	cant_go "There's no apparent way out of here.",
  has	scored;

Object -> Tarot_box "Tarot box"	
  with	name 'box' 'of' 'tarot',
	devil_hint "There's nothing worthwhile in it.",
  has	container transparent openable;

Object -> -> Castle_card "Castle"	
  with	name 'castle' 'card',
	description "A stone castle on a hill.",
	article "the",
	door_to Ruined_Castle_Cafe,
	devil_hint "It leads nowhere.",
  has	card;

Object -> -> Star_card "Star"	
  with	name 'star' 'card',
	description "A single bright light in the darkness.",
	article "the",
	door_to Lighthouse,
	devil_hint "Ugh, what a nasty bright light. Good thing you'll never go there.",
  has	card;

Object -> -> Eight_of_Wands_card "Eight of Wands"	
  with	name 'eight' 'of' 'wands' 'card',
	article "the",
	rod_assoc rod_of_infinity,
	devil_hint "There's less to this card than meets the eye.",
  has	hidden_rod card;

Object -> -> Maiden_card "Maiden"	
  with	name 'maiden' 'card',
	description "Andromeda chained to a rock on the sea-shore.",
	article "the",
	door_to Sea_Shore,
	devil_hint "What an ugly girl!  Bet she's good for a laugh though.",
  has	card;

Object rod_of_infinity "Rod of Infinity"	
  with	name 'rod' 'of' 'infinity' 'card',
	article "the",
	rod_action RodOfInfinityAction,
	angel_hint "Well, where might you have seen infinity before?",
  has	rod_attr;

Object Ace_of_Cups_card "Ace of Cups"	
  with	name 'ace' 'of' 'cups' 'card',
	description "It shows a great many crystal-glass cups and glasses.",
	article "the",
	door_to Cups_and_Glasses,
	devil_hint "It leads nowhere.",
  has	card;

Object Coven_Cell "Coven Cell"	
  with	description "An old administrative office of the museum, emptied and made into a prison cell: amateur but effective.",
	before CellBefore,
	number 0,
	cant_go "There's definitely no way out of here.",
  has	;

Object -> goat "anxious-looking goat"	
  with	name 'anxious' 'goat',
	article "an",
  has	static;

Object -> crook "shepherd's crook"	
  with	name 'shepherd' 'crook',
	rod_assoc rod_of_husbandry,
	devil_hint "Just a crook. And what's wrong with crooks, that's what I say.",
  has	hidden_rod;

Object -> cell_door "cell door"	
  with	name 'cell' 'door',
	initial "The door to the south stands open.",
	door_dir s_to,
	door_to Museum_of_Arcana,
	describe "As you might expect, the cell door is closed.",
  has	door openable static locked;

Object rod_of_husbandry "Rod of Husbandry"	
  with	name 'rod' 'of' 'husbandry',
	article "the",
	rod_action RodOfHusbandryAction,
	angel_hint "Perhaps you should look up ~husbandry~ in a dictionary.",
  has	rod_attr;

Object Unreal_City "Unreal City"	
  with	description "This is a city side street, but as if seen through the grey of despair. People stream by, some of whom you almost recognise, as if dead. The street runs east-west, and to the north is a doorway into a grubby tenement building.",
	n_to Shadowy_Hallway,
	e_to Near_Ring_Road,
	w_to Down_by_River,
  has	light scored;

Object Shadowy_Hallway "Shadowy Hallway"	
  with	description "A filthy wooden staircase leads up from here, off the street to the south. Peeling-away posters have been stuck up on top of each other on the walls, in such a way that you can only read the most recent.",
	s_to Unreal_City,
	u_to Consulting_Room,
  has	light;

Object -> poster "poster"	
  with	name 'poster',
	description "~Bateaux Phlebas - toujours le dernier mot~. You briefly wish you had a dog called Toto, so as to be able to say ~Toto, I've got a feeling we're not in England any more.~",
	before PosterBefore,
	devil_hint "What a very useful piece of paper. Pity there's writing on it.",
  has	scenery;

Object Consulting_Room "Consulting Room"	
  with	name 'sevenbranched' 'candelebra' 'sticks' 'table',
	description "The stairs end at a shabby room, with screened windows, lit by incense sticks and sevenbranched candelabra. A doorway with a hanging bead curtain leads west. In the centre of the room is a table, on which is an electric bell push and a wicked Tarot pack.",
	before ConsultingRoomBefore,
	d_to Shadowy_Hallway,
  has	light;

Object -> Tarot_pack "Tarot pack"	
  with	name 'wicked' 'tarot' 'pack',
  has	scenery;

Object -> curtain "curtain"	
  with	name 'curtain' 'bead',
  has	scenery;

Object -> bell_push "bell push"	
  with	name 'bell' 'push',
  has	scenery;

Object Madame_Sosostris "Madame Sosostris, famous clairvoyante"	
  with	name 'sosostris' 'madame' 'clairvoyant',
	description "She has a bad cold, but nevertheless is known to be the wisest woman in Europe.",
  has	concealed animate proper;

Object Death_card "Grim Reaper"	
  with	name 'death' 'grim' 'reaper' 'card',
	description "Hood, scythe, skeleton, implacable grin: yes, it's the Reaper all right.",
	article "the",
	door_to Ruined_Castle_Cafe,
	devil_hint "It's vital you slide right along with this one.",
  has	card;

Object Fool_card "Fool"	
  with	name 'fool' 'card',
	description "The Fool is a man looking directly ahead as he steps off the edge of a cliff.",
	article "the",
	door_to Ruined_Castle_Cafe,
	devil_hint "Don't worry, he won't slide down the cliff.",
  has	card;

Object Drowned_Sailor_card "Drowned Sailor"	
  with	name 'drowned' 'sailor' 'card',
	description "Those are pearls that were his eyes...",
	article "the",
	door_to Ruined_Castle_Cafe,
	devil_hint "He's one of my colleagues now, of course.",
  has	card;

Object oak_quarterstaff "oak quarterstaff"	
  with	name 'oak' 'staff' 'quarter',
	rod_assoc rod_of_bronze,
	devil_hint "Shoddy workmanship, but never mind, it's only a staff and who needs those any more?",
  has	hidden_rod;

Object rod_of_bronze "Rod of Bronze"	
  with	name 'rod' 'of' 'bronze',
	article "the",
	rod_action RodOfBronzeAction,
	angel_hint "Bronze is the key here. Have you seen any other bronze anywhere?",
  has	rod_attr;

Object Down_by_River "Down by River"	
  with	name 'rats' 'mounds' 'rubbish',
	description "Down at the end of the street, the brown urban waters carry by unpleasant rubbish, and rats scuttle up and over the mounds washed up around you.",
	e_to Unreal_City,
	w_to tourist_boat,
  has	light;

Object -> silk_handkerchief "silk handkerchief"	
  with	name 'silk' 'handkerchief' 'hanky' 'hankie',
	description "Monogrammed J. A. P., but that's no great matter.",
	initial "On one especially repellent mound is, of all things, a fine silk handkerchief.",
	devil_hint "People had no style in those days, before they invented paper tissues. I mean this tatty cloth wouldn't attract anyone, would it?",
  has	;

Object -> tourist_boat "tourist boat"	
  with	name 'boat' 'bateau',
	description "The side reads: PHLEBAS.",
	initial "Moored close to the bank is a glass-roofed tourist boat.",
	door_dir w_to,
	door_to On_board_the_Phlebas,
	describe "On the far bank is a glass-roofed tourist boat. As much as you like to explore, you can't see how to attract its attention.",
  has	door static;

Object On_board_the_Phlebas "On board the Phlebas"	
  with	name 'wheel',
	description "A tourist river-boat, glass-roofed. You can climb out to the shore to the east. At the helm is a very strange man, at times almost a straw dummy, almost perhaps a hollow cut-out made of paper. He (or it) turns the wheel and casts his eyes to windward.",
	e_to Down_by_River,
  has	light;

Object -> hollow_man "hollow man"	
  with	name 'hollow//p' 'man',
	description "Every now and then he whimpers.",
	article "the",
	initial "The hollow man mechanically says: ~Where to, guv'nor?  Me with my big mouth, I gone and done it again, calling you the guv'nor. I was down Margate Sands way once, had a bloke come on board, he thought any old destination would do, like a real place, like anywhere was real... We are the hollow men, I says, he didn't like that... Hurry up, please, it's time.~",
  has	animate;

Object Near_Ring_Road "Near Ring Road"	
  with	name 'metro' 'pedestal' 'army',
	description "A dry, desolate waste of buildings borders here on a main road, so full of black-suited pedestrians off to work at banks that you can't force your way any further east. Once in a while a few of the bowler-hatted army step into the street and down some steps below a Metropolitan sign.",
	w_to Unreal_City,
	d_to Chatelet_les_Halles,
	cant_go "You can't force your way through the tide of bankers.",
  has	light;

Object Chatelet_les_Halles "Chatelet-les-Halles"	
  with	name 'gates',
	description "This is a vast underground station in great rectangular caverns, deep beneath the streets. You are outside the ticket gates, near a flight of steps back up to the city, and since you haven't a ticket you're likely to stay that way.",
	u_to Near_Ring_Road,
	cant_go "Back up the stairs for you. Call yourself a traveller...",
  has	light;

Object -> surly_shopkeeper "surly shopkeeper"	
  with	name 'surly' 'man' 'shopkeeeper',
	description "His jumper is unstriped, and there are no onions around his neck. Nonetheless he has a rather Gallic, disgruntled look to him. Perhaps he's a former Socialist cabinet minister.",
	initial "Behind a kiosk, a surly-looking man is selling guide books and maps.",
  has	animate;

Object tourist_map_of_Paris "tourist map of Paris"	
  with	name 'tourist' 'map' 'of' 'paris',
	description "Just the way you remember yours having been.",
	devil_hint "Burn it!  Burn it at once!",
	angel_hint "What a very useful map!  Now you can go on holiday.",
  has	;

Object Ruined_Castle_Cafe "Ruined Castle Cafe"	
  with	name 'decor' 'arrows' 'quarter' 'waiter',
	description "This crowded, bohemian cafe bears only a passing resemblance to the ruined castle of the Tarot card: the decor imitates castle walls and arrowslits. You find yourself sitting at a table for one in the centre of the cafe floor. It is noisy, bustling and cheery, and a string quartet plays Strauss under the chattering of German voices. Your chances of attracting a waiter are very slight.",
	after RuinedCastleCafeAfter,
	cant_go "The crowd is lively and exciting, but also inconsiderate and bulky.",
  has	light scored;

Object -> cafe_table "cafe table"	
  with	name 'table',
  has	scenery;

Object complicated_looking_bomb "complicated-looking bomb"	
  with	name 'bomb',
	description "It contains a timer-detonater, a bundle of plastic explosives and many, many wires. The most obvious ones are green, red, blue and black. They would pull out of their loose sockets in the timer easily, so perhaps this bomb disposal nonsense isn't as tricky as people make out.",
	initial "Taped loosely to the underside of the table is a complicated-looking bomb.",
	after BombAfter,
	number 0,
  has	concealed container open;

Object -> timer_detonater "timer-detonater"	
  with	name 'timer' 'detonate',
	before DetonatorBefore,
	number 10,
	devil_hint "Time flies down here, you know. Eternity simply breezes by.",
	angel_hint "Good photographic gear that. You didn't get it from a... well, a bomb, I hope.",
  has	static;

Object -> green_wire "green wire"	
  with	name 'green//p' 'wire',
  has	static wire;

Object -> red_wire "red wire"	
  with	name 'red//p' 'wire',
  has	static wire;

Object -> blue_wire "blue wire"	
  with	name 'blue//p' 'wire',
  has	static wire;

Object -> black_wire "black wire"	
  with	name 'black' 'wire',
  has	static wire;

Object Cups_and_Glasses "Cups and Glasses"	
  with	name 'cups' 'glasses' 'skylight' 'crates',
	description "This basement room is filled with crate after crate of glasses and cups, enough for an entire hotel, or restaurant perhaps. A little light comes in from an opaque skylight which is at street level outdoors. There is no way out of here, since the only door is shut tight.",
	n_to windowed_door,
	number 0,
	cant_go "There's no apparent way out of here.",
  has	light;

Object -> windowed_door "windowed door"	
  with	name 'door' 'window',
	description "Through the square window in the door you can see a bar at which staff are serving, and a very crowded and lively cafe-restaurant beyond. The cabaret act has her back to you, and a considerable amount of her front to the diners.",
	door_dir n_to,
	door_to Cups_and_Glasses,
  has	door openable scenery locked;

Object Sea_Shore "Sea Shore"	
  with	description "A rough rocky sea shore below barely-climbable cliffs, against which an inviting deep blue sea laps. It seems to be early morning, soon after dawn, from the look of the sun on the water.",
	u_to Cliffs,
	cant_go "The rocks are too dangerous. You'll have to scale the cliff.",
  has	light;

Object -> Andromeda "Andromeda"	
  with	name 'andromeda' 'maiden',
	initial "Chained to the cliff face is the beautiful Andromeda, looking nobly out to sea as she awaits her fate.",
	before AndromedaBefore,
  has	animate proper;

Object -> amber_hairband "amber hairband"	
  with	name 'amber' 'hairband' 'hair' 'band',
	description "A long clasp of amber, pefect for long straggly Greek hair.",
	article "Andromeda's",
	rod_assoc rod_of_sacrifice,
	devil_hint "Mmm... it still has her perfume on it. Hehehehe. Bet she's dead now.",
  has	concealed static hidden_rod;

Object rod_of_sacrifice "Rod of Sacrifice"	
  with	name 'rod' 'of' 'sacrifice',
	article "the",
	rod_action RodOfSAcrificeAction,
	angel_hint "Far, far too dangerous. The age of martyrs in the church is long gone, you know.",
  has	rod_attr;

Object Cliffs "Cliffs"	
  with	name 'pharos//p' 'lighthouse//p' 'tower',
	description "On top of some exposed cliffs on the Mediterranean. A dangerous slither down leads on one side to the shore, all other ways down being even more hazardous. Atop the cliffs is the Pharos tower, a round stone pinnacle lighthouse, but there is no way in from here. A grassy walk leads east.",
	e_to Clifftop_Walk,
	d_to Sea_Shore,
	cant_go "There's only dull grassland that way.",
  has	light;

Object Clifftop_Walk "Clifftop Walk"	
  with	description "A long clifftop walk by the sea, from the lighthouse to the west to the village not far east. These fields are occupied by herds of hardy mountain goats, continually butting each other and frisking. To the south a path leads across sparse grassland to a great outgrowth of some kind.",
	before ClifftopWalkBefore,
	s_to Wall_of_Thorns,
	e_to Outside_Taverna,
	w_to Cliffs,
	cant_go "There's only dull grassland that way.",
  has	light;

Object -> herd_of_goats "herd of goats"	
  with	name 'goats' 'herd' 'of',
  has	scenery;

Object Wall_of_Thorns "Wall of Thorns"	
  with	description "The rather sparse rolling landscape is dominated here by a massive, and suspiciously unnatural, wall of thorns, which forms a great ring about an area perhaps a hundred yards in diameter. There are goat pastures to the north.",
	n_to Clifftop_Walk,
	s_to wall_of_thorns_object,
	cant_go "There's only dull grassland that way.",
  has	light;

Object -> wall_of_thorns_object "wall of thorns"	
  with	name 'gap' 'thorns' 'of' 'wall',
	description "It's hard to imagine what could possibly shift a wall like that.",
	initial "A ragged gap in the wall has been burnt out to the south.",
	door_dir s_to,
	door_to Sacred_Earth,
	describe "The wall rustles and clashes its thorns like a beast alive.",
  has	door static;

Object Sacred_Earth "Sacred Earth"	
  with	description "Here inside the thorn wall, a north-south path leads across sacred earth into the imposing marble Temple of Zeus. You feel distinctly uneasy walking on such hallowed turf. There are any number of myths about gods getting cross about that sort of thing.",
	before SacredEarthBefore,
	n_to Wall_of_Thorns,
	s_to Temple_of_Zeus,
	cant_go "The wall of thorns hems you in.",
  has	light;

Object Temple_of_Zeus "Temple of Zeus"	
  with	name 'pillar',
	description "The beautiful candle-lit Temple of Zeus, a cavern of marble pillars which is quite empty and featureless save for the entrance at the north. So much for all the rumours about hoards of treasure - it looks as if Zeus (who is, by the way howling with anger outside) was bluffing all along.",
	before TempleBefore,
	n_to Sacred_Earth,
	cant_go "Unfortunately for you (since Zeus is watching it), the temple has only one entrance.",
  has	light scored;

Object -> copper_coin "copper coin"	
  with	name 'copper' 'coin',
	article "one",
	angel_hint "This currency is only valid in ancient Greece. Where on earth have you been?",
  has	;

Object Outside_Taverna "Outside Taverna"	
  with	description "A long walk along the cliffs from the lighthouse leads naturally here, just outside the Eraina Taverna, whose open doorway lies to the south.",
	s_to Eraina_Taverna,
	w_to Clifftop_Walk,
	cant_go "There's only dull grassland that way.",
  has	light;

Object Eraina_Taverna "Eraina Taverna"	
  with	description "A plain but cheery taverna, fill of miserable and rather ashamed men who are drinking retsina heavily. The day is dawning outside the north door, but they strangely do not share your uplifted feeling at the sight.",
	n_to Clifftop_Walk,
	cant_go "The tavern entrance is to the north.",
  has	light scored;

Object -> Ekmek_Special "Ekmek Special"	
  with	name 'ekmek' 'special' 'dessert',
	description "A speciality dessert of the Taverna: ice cream, kateifi, raspberry sauce, cream. An acquired taste.",
	initial "Left untouched on one table is an Ekmek Special dessert.",
	before EkmekSpecialBefore,
	devil_hint "Better with chocolate ice cream, I think.",
	angel_hint "Doesn't somebody else need this more than you?",
  has	proper edible scored;

Object -> bartender "bartender"	
  with	name 'bar' 'tender' 'bartender',
	description "Morose and unconvivial at the best of times. This is not the best of times.",
	initial "Behind the bar, a depressed bartender polishes glasses.",
  has	animate;

Object Lighthouse "Lighthouse"	
  with	name 'smudge' 'quinquireme',
	description "You stand atop a pinnacle of stone, on an early Pharos, or lighthouse. Inconsiderately enough, the builders have provided no obvious way down from here. Still, there's a fine view out across the Mediterranean sea into the dim dawning sun. It's going to be a nice day, you can't help thinking.^^In the centre of the pinnacle is a marvellous device of polished bronze mirrors, its open end pointed out across the bay. There seems to be very little traffic at the moment, though a smudge on the horizon might possibly be a quinquireme.",
	cant_go "Being a lighthouse, this pinnacle is way up in the air. Point taken?",
  has	light scored;

Object -> mirrored_device "mirrored device"	
  with	name 'device//p' 'mirror' 'bronze',
  has	container transparent open scenery;

Object Murky_Cave "Murky Cave"	
  with	description "This is a murky hillside cave, whose mouth opens to the northeast, though a tight squeeze might lead a little way west. Outside is a clear starry night. There is no traffic noise, and the air smells fresh.",
	w_to Spur_of_Rock,
	ne_to Valley_Prospect,
  has	;

Object -> flaming_torch "flaming torch"	
  with	name 'flaming' 'torch',
	initial "Hanging up on an iron bracket is a flaming torch.",
  has	light;

Object -> historical_pamphlet "historical pamphlet"	
  with	name 'history' 'pamphlet',
	description "It is a summary of the writings of a polemical monk called Gildas, and relates to events following the fall of the tyrant Vortigern at the turn of the fifth century A.D. After dark decades of pillage by Saxon mercenaries, Britain was reunited by Ambrosius Aurelianus and then defended at the Battle of Badon Hill, some time in the early years of the sixth century.^^This remarkable victory was of no religious significance, so Gildas does not dwell upon it. He tends only to mention bad kings and leaders, and then only to insult them. (Talking about Gildas is an excellent way to annoy an Anglo-Saxon historian.)  Nobody even knows where Badon Hill is any more, or anything else about it, although some students of Welsh poetry believe Ambrosius was the source of the legend of King Arthur.",
	article "an",
  has	;

Object Spur_of_Rock "Spur of Rock"	
  with	description "An uncomfortable spur of rock on the hillside crags. The only natural access to this spot is a crevice in the hill to the east, but there is also a securely fastened rope hanging down into the darkness.",
	e_to Murky_Cave,
	d_to Hanging_on_Rope,
	cant_go "The crags are too precipitous.",
  has	light;

Object -> hanging_rope "hanging rope"	
  with	name 'rope',
  has	scenery;

Object Hanging_on_Rope "Hanging on Rope"	
  with	name 'patrol' 'men',
	description "You are hanging perilously on a hemp rope, suspended from an overhang of rock above, which drops down into the darkness of the valley. On the tracks below, patrols of men can be heard, and you feel instinctively that they are not friendly.",
	before HangingBefore,
	u_to Spur_of_Rock,
	cant_go "Up and down are it, quite frankly.",
  has	light;

Object -> hemp_rope "hemp rope"	
  with	name 'hemp' 'rope',
  has	scenery;

Object -> yellow_daisy "yellow daisy"	
  with	name 'yellow//p' 'daisy',
	initial "A single yellow daisy grows from a little tuft of grass on the crags.",
	before DaisyBefore,
	after DaisyAfter,
  has	clothing scored;

Object Valley_Prospect "Valley Prospect"	
  with	description "The geography is strangely familiar here. You are on a natural shelf on the hillside, overlooking the valley below. An all-but invisible cleft in the rock leads to a cave to the southwest, and the slope can safely be traversed to the east.^^It is a brightly moonlit night, cool as in late spring. There will be a sharp frost tomorrow. Down in the valley, a great cartwheel circle of camp fires illuminate some dark shapes, perhaps crude encampments. There is no other sign of civilisation.",
	e_to Roman_Villa,
	sw_to Murky_Cave,
	cant_go "The hillside is too steep.",
  has	light;

Object Roman_Villa "Roman Villa"	
  with	name 'timber' 'door',
	description "You stand beside a Roman villa, whose columns cast shadows of an Empire in the moonlight. It is thirty years since the fall of the West, and Britain is cut off from the continent, where soon even the existence of the Anglis will become a myth. This villa has survived the pestilence and devastation of the civil war, and although it must be a couple of centuries old, it is still standing. From here you could cut across the hillside east to west, or slip in through a none-too-secure timber door.",
	s_to Cloister,
	e_to Stream,
	w_to Valley_Prospect,
  has	light;

Object Stream "Stream"	
  with	name 'river' 'road' 'stream' 'roof',
	description "A stream runs past the villa and cascades down the hillside here, to join the river far below, near the Roman road which will, in 1500 years time, become the motorway which so spoils the view from your back garden. A rough ladder of wood lashed together with leather rests against the villa at the lowest point of the tiled roof.",
	before StreamBefore,
	w_to Roman_Villa,
  has	light;

Object -> ladder "ladder"	
  with	name 'ladder',
  has	scenery;

Object Cloister "Atrium Cloister"	
  with	name 'timber' 'door',
	description "The shadowy cloisters of the villa's atrium. You disturb a fieldmouse, and hear the scratching of tiny claws on stone. Moonlight filters in from the central courtyard to the south, and a rotten timber door leads back north.",
	n_to Roman_Villa,
	s_to Atrium,
  has	light;

Object -> summoning_horn "summoning horn"	
  with	name 'horn' 'summon' 'on' 'pole',
	initial "Resting against one pillar is a horn made from a tusk, mounted on a long spear-like pole.",
	rod_assoc rod_of_language,
  has	hidden_rod;

Object rod_of_language "Rod of Language"	
  with	name 'rod' 'of' 'language',
	article "the",
	rod_action RodOfLanguageAction,
  has	rod_attr;

Object Atrium "Atrium"	
  with	description "The central well of the villa, ringed with columns. On the north side is a cloister and stone-linteled doorways lead east, south and west. The central floor area is commanded by a beautiful Roman mosaic, quartered into individual scenes, around the edges of which are vents from the hypocaust. There is no roof over the courtyard, and the atrium is lit by moonlight.",
	n_to Cloister,
	s_to Entrance,
	e_to Triclinium,
	w_to Guard_Quarters,
  has	light;

Object -> mosaic "mosaic"	
  with	name 'mosaic',
	description "The four quarters show white-beards in the Forum, farmers in Italian fields, a military fortification and a grain ship unloading at Ossia.",
  has	scenery;

Object Guard_Quarters "Guard Quarters"	
  with	name 'armour' 'spears' 'hides' 'blankets',
	description "Whatever function this spacious room once had, now it is evidently home to military men, for it is filled with crude armour, spears, rough blankets which are little more than animal hides. Fortunately for you the guards are absent.",
	e_to Atrium,
  has	light;

Object -> bone_die "crude bone die"	
  with	name 'die' 'dice' 'bone',
	description "A crude six-sided die made from animal bone.",
	after DieAfter,
  has	;

Object -> sandals "leather sandals"	
  with	name 'sandal' 'shoes' 'leather',
	article "a pair of",
  has	clothing;

Object Triclinium "Triclinium"	
  with	description "What was once the villa's triclinium, or kitchen, is now deserted and long since ransacked for metal. (Nobody lives on their own in this century, and this villa wouldn't be easy to defend.)  A doorway to the west gives onto the atrium.",
	before TricliniumBefore,
	after TricliniumAfter,
	w_to Atrium,
	d_to kitchen_well,
  has	light;

Object -> kitchen_well "kitchen well"	
  with	name 'well' 'hinged' 'wooden' 'cover',
	description "The well has a hinged wooden cover. You can't tell by looking how deep it is.",
	initial "The hinged wooden cover is raised, revealing a circular well about a yard in diameter. It is very dark inside.",
	door_dir d_to,
	door_to Inside_Well,
	describe "In one corner is a hinged wooden cover of some kind, which is shut.",
	number 0,
  has	door container openable static;

Object Inside_Well "Inside Well"	
  with	name 'air',
	description "You are clinging perilously to the walls of the deep and dangerous well. You can hardly see a thing, even with the aid of the torch, but curiously enough you feel warm air blowing across you from the west.",
	before InsideWellBefore,
	w_to Hypocaust,
	u_to Triclinium,
	cant_go "Too risky. There might not be anything that way, for all you know.",
  has	;

Object Hypocaust "Hypocaust"	
  with	name 'fires' 'heating' 'log' 'logs',
	description "This very low almost-cellar underneath the atrium is a tiny access space for log fires which are kept going to provide a form of central heating for the villa. They are lit and going away nicely, interestingly. It isn't very warm by twentieth-century standards, but you have to admit it works. A tiny amount of light filters in from the vents in the roof, but nowhere near enough to see by. The only way in seems to be the way you came.",
	e_to Inside_Well,
	cant_go "The log fires are hot, and anyway the only way out large enough for you is back east.",
  has	light;

Object -> hypocaust_vents "hypocaust vents"	
  with	name 'vents',
	before HypocaustBefore,
  has	scenery;

Object Entrance "Entrance"	
  with	description "A well-flagstoned forecourt at the villa entrance, surrounded by lesser wooden buildings. Some of these are in use as stables, and figures of men slip between them. You hide from sight, not wishing to draw attention to yourself. Up on the hill, where Meldrew House will one day be built, men on horseback can be seen circling the access track. For a deserted villa, this is certainly well-guarded.",
	before EntranceBefore,
	after EntranceAfter,
	n_to Atrium,
  has	light scored;

Object Rough_Tent "Rough Tent"	
  with	name 'hides',
	description "Well, here you are, imprisoned again. This time the cell is a tent of stitched animal hides, perhaps twenty feet in diameter, supported by a central pole. You have no idea where the entrance is, because you were blindfolded on the way in. There is at least a dim light from the camp-fires outside the tent.",
	cant_go "This tent doesn't seem to have an exit, either.",
  has	light scored;

Object -> tent_pole "tent pole"	
  with	name 'pole' 'central',
	after TentPoleAfter,
	number 0,
	rod_assoc rod_of_returning2,
  has	concealed static hidden_rod;

Object rod_of_returning2 "Rod of Returning"	
  with	name 'rod' 'of' 'returning',
	article "the",
	rod_action transport_player,
  has	rod_attr;

Object saxon_spy "unconscious Saxon spy"	
  with	name 'saxon' 'spy',
	description "He is dishevelled, wiry and unconscious. He is also covered with dust and leaves, as if he has been lying down on his front outdoors for hours.",
	initial "An unconscious Saxon spy is slumped on the ground. Occasionally faint noises can be heard from him.",
	before SaxonBefore,
	number 0,
  has	animate;

Object Encampment "Encampment"	
  with	name 'fires' 'camp' 'dolmen',
	description "Luckily for you the tent, now collapsed, was hardly being watched at all, because all the attention is diverted to a ghastly ritual being carried out over beyond the camp-fires. But your luck cannot hold for long. You are so surrounded by hostile territory that you simply have nowhere to run or hide. Things are, not to put too fine a point on it, looking grim.",
	before EncampmentBefore,
	e_to dolmen,
	number 0,
	cant_go "Far, far too risky.",
  has	light scored;

Object -> dolmen "dolmen"	
  with	name 'dolmen' 'coals' 'hot' 'rock',
	initial "An erratic glacial rock, which seems in the feverish firelight to make a natural dolmen, can be made out to the east, on the other side of an almost-extinguished campfire of hot coals.",
	door_dir initial,
	door_to Beneath_Dolmen,
  has	door open;

Object Beneath_Dolmen "Beneath Dolmen"	
  with	name 'dolmen',
	description "You stand beside the eerie dolmen, surrounded by the terrible noises and incantations of a druidic rite.",
	w_to Encampment,
	cant_go "Far, far too risky.",
  has	light scored;

Object -> bluish_stone "bluish stone"	
  with	name 'stone' 'blue//p' 'bluish',
	initial "Resting on top of the dolmen is a polished blue stone.",
	rod_assoc fifty_franc_note,
  has	hidden_rod scored;

Object fifty_franc_note "fifty-franc note"	
  with	name 'fifty' 'franc' 'note' 'francs',
  has	;

Object Hellish_Place "Hellish Place"	
  with	name 'desk',
	description "Hell, you always imagined, would contain fiery, sulphurous pits and a great many gentlemen with forked tails. You were right about the last part. A demon is sitting behind a flame-proofed desk at the bottom of the stairs. There are some disconcerting screams from further away, but nothing to worry about. Not in this life, anyway.",
	after Hellish_Place_After,
	n_to Cellar_West,
	u_to Cellar_West,
	cant_go "That direction is not for the living.",
  has	light;

Object -> demon "demon"	
  with	name 'devil' 'demon',
	description "If you were to cast a film of your adventures so far, you would hire Donald Sutherland to play this gentleman.",
	number 4,
  has	animate scenery;

Object Heavenly_Place "Heavenly Place"	
  with	name 'furniture' 'cloud',
	description "Heaven, you always imagined, would be a world of marble pillars, fluffy clouds, harps and angelic ladies with serene expressions. You were right about the last part. An angel is sitting here behind some new office furniture, next to a blue Tourist Information sign. A bridge of cloud extends south across the sky to the beanstalk. There is some choral singing going on somewhere, but not loud enough for you to hear properly. Not in this life, anyway.",
	after Heavenly_Place_After,
	s_to Up_the_Beanstalk,
	cant_go "That direction is not for the living.",
  has	light;

Object -> angel "angel"	
  with	name 'angel',
	description "If you were to cast a film of your adventures so far, you would hire Dame Judi Dench to play this lady.",
	number 4,
  has	animate scenery;

Object carbolic_soap "carbolic soap"	
  with	name 'soap' 'carbolic',
	description "~For foulmouths everywhere~.",
	article "a cake of",
	devil_hint "That's the spirit, keep it up!",
	angel_hint "Really!  How disgraceful!",
  has	concealed;


Constant SCORE_HAMBURG = 0;
Constant SCORE_TORCH = 1;
Constant SCORE_JOSHUA = 2;
Constant SCORE_SECRETDOOR = 3;
Constant SCORE_DEMIJOHN = 4;
Constant SCORE_WAITER = 5;
Constant SCORE_WAND = 6;
Constant SCORE_AIMWAND = 7;
Constant SCORE_WIRELESS = 8;
Constant SCORE_CALENDAR = 9;
Constant SCORE_CHOCOLATE = 10;
Constant SCORE_ANDROMEDA = 11;
Constant SCORE_BATTERY = 12;
Constant SCORE_TOURIST = 13;
Constant SCORE_INFINITY = 14;
Constant SCORE_TRICLINIUM = 15;
Constant SCORE_DOLEMN = 16;
Constant SCORE_BISCUIT = 17;

Constant AT_HEAVEN = 1;
Constant AT_HELL = 2;
Constant AT_RODS = 3;
Constant AT_MAZE = 4;
Constant AT_MASTER = 5;
Constant AT_INFINITY = 6;
Constant AT_ANDROMEDA = 7;
Constant AT_MURAL = 8;
Constant AT_FOLLY = 9;
Constant AT_ZEUS = 10;
Constant AT_BOMB = 11;
Constant AT_SACRIFICE = 12;
Constant AT_LUCK = 13;
Constant AT_FIRE = 14;

Constant T_DREAM = 1;
Constant T_FLASHLIGHT = 2;
Constant T_JEMIMA = 3;
Constant T_NOVEL = 4;
Constant T_FLOWERS = 5;
Constant T_MEDICINE = 6;
Constant T_WINE = 7;
Constant T_BOTTLE = 8;
Constant T_HEAVEN = 9;
Constant T_HELL = 10;
Constant T_POSTCARD = 11;
Constant T_JOSHUA = 12;
Constant T_ISAAC = 13;
Constant T_ARCANUM = 14;
Constant T_MERLIN = 15;
Constant T_HAT = 16;
Constant T_BOOK = 17;
Constant T_EBENEZER = 18;
Constant T_CARDS = 19;
Constant T_RODS = 20;
Constant T_TAROT = 21;
Constant T_BOAT = 22;
Constant T_MOUSE = 23;
Constant T_KEY = 24;
Constant T_RADIO = 25;

Constant MODERN = 1;
Constant UNREAL = 2;
Constant HAMBURG = 3;
Constant TAROT = 4;
Constant GARDEN = 5;
Constant GARDEN_PAST = 6;
Constant ANCIENT_BRITAIN = 7;
Constant DREAMING = 8;

Constant DIED = 1;
Constant WON = 2;
Constant FAILED = 3;
Constant DESTROYED_UNIVERSE = 4;
Constant AUSTRALIA = 5;
Constant PARADOX = 6;
Constant MYTH = 7;
Constant PRISON = 8;


Global location = Attic;
Global score;
Global turns = 1;
Global player = yourself;
Global global4;
Global global5;
Global actor;
Global light_lvl = true;
Global deadflag;
Global verb;
Global noun;
Global second;
Global noun_word;
Global noun_number;
Global game_section = MODERN;
Global card_ptr;
Global MazeX = 4;
Global MazeY = 6;
Global WeedkillerX = 100;
Global WeedkillerY = 100;
Global Mouse_x = 8;
Global Mouse_y = 3;
Global BombTicking;
Global things_score;
Global places_score;
Global rod_score;
Global good_try_bonus;
Global CouncilCnt;
Global KnowLanguages;
Global debug_deterministic_transportation;
Global transcript_mode;
Global debug_mode;
Global lookmode = 1;
Global hollowman_cnt;
Global multiflag;
Global notheld_mode;
Global onotheld_mode;
Global global49;
Global num_words;
Global global51;
Global global52;
Global global53;
Global verb_word;
Global global57;
Global global58;
Global global59;
Global global60;
Global global61;
Global global62;
Global global65;
Global global66;
Global global67;
Global global68;
Global global69;
Global global70;
Global global72;
Global global73;
Global global74;
Global global75;
Global global76;
Global global77;
Global global78;
Global global79;
Global global80;
Global global81;
Global global82;
Global global83;
Global global84;
Global global85;
Global global86;
Global global87;
Global global88;
Global global89;
Global global90;
Global global91;
Global global92;
Global global93;
Global global94;
Global global95;
Global global96;
Global global97;
Global global98;
Global global99;
Global global100;
Global global101;
Global global102;
Global global103;
Global global104;
Global global105;
Global global106;
Global global107;
Global global108;
Global global109;
Global global110;
Global global111;
Global global112;
Global global113;
Global global114;
Global global115;
Global global116;
Global global117;
Global global118;
Global global119;
Global global120;
Global global121;
Global global122;
Global global123;
Global global124;
Global global125;
Global global126;
Global global127;
Global global128;
Global global129;
Global global130;
Global global131;
Global global132;
Global global133;
Global global134;
Global global135;
Global global136;
Global global137;
Global global138;
Global global139;
Global global140;
Global global141;
Global global142;
Global global143;
Global global144;
Global global145;
Global global146;
Global global147;
Global global148;
Global global149;
Global global150;
Global global151;
Global global152;
Global global153;
Global global154;
Global global155;
Global global156;
Global global157;
Global global158;
Global global159;
Global global160;
Global global161;
Global global162;
Global global163;
Global global164;
Global global165;
Global global166;
Global global167;
Global global168;
Global global169;
Global global170;
Global global171;
Global global172;
Global global173;
Global global174;
Global global175;
Global global176;
Global global177;
Global global178;
Global global179;
Global global180;
Global global181;
Global global182;
Global global183;
Global global184;
Global global185;
Global global186;
Global global187;
Global global188;
Global global189;
Global global190;
Global global191;
Global global192;
Global global193;
Global global194;
Global global195;
Global global196;
Global global197;
Global global198;
Global global199;
Global global200;
Global global201;
Global global202;
Global global203;
Global global204;
Global global205;
Global global206;
Global global207;
Global global208;

Array buffer --> 30720[?];	! 9520 (0x2530)
Array parse --> 16384[?];	! 9641 (0x25a9)
Array global11 --> 30720[?];	! 9706 (0x25ea)
Array global12 --> 16384[?];	! 9827 (0x2663)
Array global13 --> 1;	! 9892 (0x26a4)
Array global17 --> 1;	! 9908 (0x26b4)
Array card_deck -->	! 9972 (0x26f4)
    nothing
    nothing
    nothing
    nothing
    invalidObj12593
    invalidObj12593
;
Array garden_array -->	! 9980 (0x26fc)
    12593
    12593
    12593
    12593
    12592
    12336
    12336
    12592
    12337
    12593
    12337
    12336
    12592
    12593
    12336
    12337
    12336
    12337
    12593
    12337
    12593
    12593
    12593
    12336
;
Array mouse_maze -->	! 10043 (0x273b)
    12593
    12593
    12593
    12593
    12593
    12593
    12336
    12592
    12337
    12593
    12593
    12336
    12592
    12593
    12593
    12593
    12336
    12336
    12593
    12593
    12336
    12593
    12593
    12593
    12593
    12336
    12593
;
Array task_scores -->	! 10106 (0x277a)
    775
    1802
    771
    1285
    514
    818
    769
    2052
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
;
Array score_array2 --> 18;	! 10124 (0x278c)
Array BombWires --> 4;	! 10149 (0x27a5)
Array global55 --> 1;	! 10154 (0x27aa)
Array global56 --> 1;	! 10170 (0x27ba)
Array global63 --> 1;	! 10186 (0x27ca)
Array global64 --> 1;	! 10202 (0x27da)
Array global71 --> 1;	! 10266 (0x281a)
Array verb_routine_array -->	! 11869 (0x2e5d)
    ExitSub
    InvSub
    TakeSub
    RemoveSub
    EnterSub
    DisrobeSub
    WearSub
    InsertSub
    DropSub
    EmptySub
    EmptyTSub
    TransferSub
    ThrowSub
    GiveSub
    SingSub
    ShowSub
    VagueGoSub
    GoSub
    ScoreSub
    FullScoreSub
    LookSub
    ExamineSub
    SearchSub
    LookUnderSub
    ConsultSub
    ConsultTSub
    SuperbriefSub
    VerboseSub
    BriefSub
    OpenSub
    UnlockSub
    CloseSub
    LieSub
    LieDownSub
    QuitSub
    RestoreSub
    RestartSub
    SaveSub
    ScriptOnSub
    ScriptOffSub
    YesNoSub
    SorrySub
    StrongSub
    MildSub
    WashSub
    ObjectSub
    PlacesSub
    WaveHandsSub
    WaveSub
    SetSub
    DigSub
    PullSub
    PullDownSub
    PushSub
    PushDirSub
    TurnSub
    SwitchOnSub
    SwitchOffSub
    LockSub
    AttackSub
    TearSub
    WaitSub
    HintsSub
    HelpSub
    HelpSpecialSub
    AnswerSub
    AskSub
    EatSub
    SleepSub
    StrikeSub
    PointSub
    ClimbSub
    RamSub
    UnconditionalQuitSub
    BuySub
    SqueezeSub
    SwimSub
    SwingSub
    BlowSub
    PraySub
    WakeSub
    WakeOtherSub
    KissSub
    ThinkSub
    SmellSub
    ListenSub
    TasteSub
    FeelSub
    TouchSub
    CleanSub
    TieSub
    BurnSub
    DrinkSub
    FillSub
    CutSub
    JumpSub
    JumpOverSub
    XyzzySub
    XDebugSub
    XCheatSub
    XatticSub
    XtravelSub
    XMasterSub
    XasncSub
    XDemonHintSub
    XAngelHintSub
    XdeterministicSub
    XatticSub
    XtravelSub
    XMasterSub
;


[ Main ;	
    InsertCardIntoDeck(Drowned_Sailor_card);	! not popped
    @pop;
    InsertCardIntoDeck(Fool_card);	! not popped
    @pop;
    InsertCardIntoDeck(Death_card);	! not popped
    @pop;
    print "^^^^It's become a matter of pride now not to give up. That tourist map of Paris must be up here somewhere in all this clutter, even if it has been five years since your last trip. And it's your own fault. It looks as if your great-grandfather was the last person to tidy up these lofts...^^";
    Banner();	! not popped
    @pop;
    LookSub();	! not popped
    @pop;
    PlayTheGame();	! not popped
    @pop;
    rtrue;
];

[ PlayTheGame i j k l aflag metaverb nonexit ;	
    j = 'invalidDictWord1';
    --j;
  .labelXXX;
    if (j < 100) {
        ++j;
        k = random(j);
        jump labelXXX;
    }
  .labelXXX;
    if (deadflag == 0) {
      .labelXXX;
        noun = nothing;
        second = nothing;
        verb = ##Exit;
        Parser(global13);	! not popped
        @pop;
        onotheld_mode = notheld_mode;
        notheld_mode = false;
        if (actor == hole_in_the_wall) {
            j = 'invalidDictWord98';
            j = parent(j);
            if (j == 'invalidDictWord100') {
                actor = robot_mouse;
            }
        }
        if (actor == robot_mouse) {
            noun = global13->2;
            second = global13->3;
            verb = global13->0;
            MouseMove();	! not popped
            @pop;
        } else if (actor ~= player) {
            CDefart(actor);	! not popped
            @pop;
            print " has better things to do.^";
        } else {
            if (global5 == 1[?]) {
                global5 = 0;
                print "(taking the first sixteen objects only)^";
            }
            nonexit = false;
            if (verb ~= ##Exit) {
                nonexit = true;
            }
            if (verb == ##Exit) {
                verb = global13->0;
            }
            metaverb = false;
            if (verb == ##Score) {
                metaverb = true;
            }
            if (verb == ##FullScore) {
                metaverb = true;
            }
            if (verb == ##ScriptOn) {
                metaverb = true;
            }
            if (verb == ##ScriptOff) {
                metaverb = true;
            }
            if (verb == ##Save) {
                metaverb = true;
            }
            if (verb == ##Restore) {
                metaverb = true;
            }
            if (verb == ##HelpSpecial) {
                metaverb = true;
            }
            if (verb == ##Help) {
                metaverb = true;
            }
            if (verb == ##Objects) {
                metaverb = true;
            }
            if (verb == ##Places) {
                metaverb = true;
            }
            if (verb >= 99 && debug_mode == false) {
                print "You can't do that.^";
                metaverb = true;
            } else {
                if (game_section == DREAMING && metaverb == false) {
                    if (verb == ##Go) {
                        ! no code
                    } else if (verb == ##Take) {
                        ! no code
                    } else if (verb == ##Look) {
                        ! no code
                    } else if (verb == ##Inv) {
                        ! no code
                    } else if (verb == ##Wake) {
                        ! no code
                    } else {
                        print "You seem unable to concentrate sufficiently.^";
                        jump labelXXX;
                    }
                }
                if (nonexit == false) {
                    j = global13->1;
                    noun = global13->2;
                    second = global13->3;
                }
                if (nonexit ~= false) {
                    j = 'invalidDictWord2';
                }
                multiflag = false;
                if (j > 3) {
                    print "Madness!  Stack corrupted^";
                    jump labelXXX;
                }
                if (j < 0) {
                    print "Madness!  Stack corrupted^";
                    jump labelXXX;
                }
                if (j == 0) {
                    RunRoutines(nothing,nothing,verb);	! not popped
                    @pop;
                }
                if (j > 0) {
                    if (noun ~= nothing) {
                        RunRoutines(noun,second,verb);	! not popped
                        @pop;
                    }
                    if (noun == nothing) {
                        multiflag = true;
                        k = global17->0;
                        if (k == 0) {
                            print "Nothing to do!^";
                            jump labelXXX;
                        }
                        l = 1[?];
                        --l;
                      .labelXXX;
                        if (l < k) {
                            ++l;
                            aflag = global17->l;
                            print (name) aflag, ": ";
                            RunRoutines(aflag,second,verb);	! not popped
                            @pop;
                            jump labelXXX;
                        }
                    }
                }
            }
        }
      .labelXXX;
        if (notheld_mode == true) {
            metaverb = true;
        }
        if (deadflag == 0 && metaverb == false) {
            Time();	! not popped
            @pop;
        }
        jump labelXXX;
    }
    print "^^    ***";
    if (deadflag == DIED) {
        print " You have died ";
    }
    if (deadflag == WON) {
        print " You have won ";
    }
    if (deadflag == FAILED) {
        print " You have missed the point entirely ";
    }
    if (deadflag == DESTROYED_UNIVERSE) {
        print " You have disembodied the entire universe ";
    }
    if (deadflag == AUSTRALIA) {
        print " You have been transported to Australia ";
    }
    if (deadflag == PARADOX) {
        print " You have been annihilated by a temporal paradox ";
    }
    if (deadflag == MYTH) {
        print " You have become a constellation ";
    }
    if (deadflag == PRISON) {
        print " You have been imprisoned as a terrorist ";
    }
    print "***^^^";
    ScoreSub();	! not popped
    @pop;
  .labelXXX;
    print "^Would you like to RESTART, RESTORE a saved game, give the FULL score for that game or QUIT?^";
  .labelXXX;
    print '?', ' ';
    @sread buffer parse;
    j = parse-->1;
    if (j == 'quit') {
        @quit;
    }
    if (j == 'q//') {
        @quit;
    }
    if (j == 'restart') {
        @restart;
    }
    if (j == 'restore') {
        RestoreSub();	! not popped
        @pop;
        jump labelXXX;
    }
    if (j == 'fullscore') {
        FullScoreSub();	! not popped
        @pop;
        jump labelXXX;
    }
    if (j == 'full') {
        new_line;
        FullScoreSub();	! not popped
        @pop;
        jump labelXXX;
    }
    print "Please answer RESTART, RESTORE or QUIT.^";
    jump labelXXX;
];

[ RunRoutines i j k ;	
    noun = i;
    second = j;
    verb = k;
    if (location ~= nothing) {
        i = location.before;
        if (i ~= invalidObj65535 && i() ~= 0) {
            rtrue;
        }
    }
    if (noun ~= nothing) {
        i = noun.before;
        if (i ~= invalidObj65535 && i() ~= 0) {
            rtrue;
        }
    }
    j = verb_routine_array-->k;
    j();	! not popped
    @pop;
    rtrue;
];

[ AfterRoutines i o ;	
    o = location;
    i = o.after;
    if (i == 65535) {
        ! no code
    } else if (i() ~= 0) {
        rtrue;
    }
    o = nothing;
    i = global13->1;
    if (i ~= 0) {
        o = noun;
    }
    if (o == nothing) {
        rfalse;
    }
    i = o.after;
    if (i == 65535) {
        rfalse;
    }
    i = i();
    return i;
];

[ RunAfter l func ;	
    func = location;
    if (func == 0) {
        rfalse;
    }
    l = func.after;
    if (l == invalidObj65535) {
        rfalse;
    }
    l = l();
    return l;
];

[ Banner i ;	
    print "CURSES", "^An Interactive Diversion^Copyright (c) 1993 by Graham Nelson. New players should type ~help~.^Release ", 0-->1 & 1023, " / Serial number ";
    i = 18;
    --i;
  .labelXXX;
    if (i < 23) {
        ++i;
        print (char) 0->i;
        jump labelXXX;
    }
    print "  (Compiled by Inform v", "549", ")^";
    rtrue;
];

[ Time i j k ;	
    ++turns;
    if (heavy_iron_mascot has moved) {
        i = 119[heavy_iron_mascot?];
        i = parent(i);
        if (i == player) {
            if (0 ~= ResetTimer(heavy_iron_mascot)) {
                deadflag = DIED;
                "^In an astonishing freak accident, a meteorite hurtles through the Earth's atmosphere and then straight through your head. Anyone would think you had a curse on you (anyone, that is, still able to think).";
            }
            i = CountDown(heavy_iron_mascot);
            if (i == 10[u_obj?]) {
                print "^You feel very nervous indeed, for some reason.^";
            }
            if (i == 5[w_obj?]) {
                print "^You scratch yourself, unable to get rid of an itching sensation.^";
            }
            if (i == 2[?]) {
                print "^Something feels very wrong indeed. Your hand begins to burn.^";
            }
        }
    }
    if (electric_torch has light) {
        i = 23[electric_torch?];
        TorchTimer(child(i));	! not popped
        @pop;
    }
    if (Sir_Joshua_Meldrewe hasnt concealed && location == Battlements) {
        JoshuaDaemon();	! not popped
        @pop;
    }
    if (0 ~= ResetTimer(Old_Winery)) {
        print "^Sorry. Thinking about it again, the score only gets in a muddle this way, so the bonus points had better go after all.^";
        good_try_bonus = false;
        score = score - 5;
    }
    if (0 ~= ResetTimer(bean_pole) && game_section == GARDEN_PAST) {
        print "^There is a great rumbling sound and then a thunderous avalanche of stone cascades down the hillside into the valley. The Folly has collapsed!  Capability Meldrew and his workmen come running to investigate. In the ensuing confusion, they come across you and, of course, blame you for their incompetent masonry. You are hauled up before the county assizes...^";
        deadflag = AUSTRALIA;
    }
    if (game_section ~= GARDEN_PAST && WeedkillerX < 100) {
        i = WeedkillerX + 9 * WeedkillerY;
        garden_array->i = 48[poetry_book?];
        WeedkillerX = 100;
    }
    if (location == Hellish_Place) {
        i = random(10);
        if (i == 1[?]) {
            print "^There is a horrid grinding noise from far away.^";
        }
        if (i == 2[?]) {
            print "^A flash of light sears your eyes, as the sulphurous flames grumble.^";
        }
        if (i == 3[s_obj?]) {
            print "^You can almost, but not quite, make out the noise of shouting.^";
        }
        if (i == 4[e_obj?]) {
            print "^Thunder and lightning can be heard from the fiery depths.^";
        }
    }
    if (location == Heavenly_Place) {
        i = random(10);
        if (i == 1[?]) {
            print "^Angels with harps float by, gossiping about you in a kindly way.^";
        }
        if (i == 2[?]) {
            print "^Babies float by, just counting their toes.^";
        }
        if (i == 3[s_obj?]) {
            print "^Burnished-gold sunlight strokes the tops of the clouds here.^";
        }
        if (i == 4[e_obj?]) {
            print "^The choir invisible almost, for a moment, becomes audible.^";
        }
    }
    if (location == Eraina_Taverna) {
        i = random(13);
        if (i == 1[?]) {
            print "^The diners grumble and play backgammon viciously.^";
        }
        if (i == 2[?]) {
            print "^The bartender gives you a hard stare.^";
        }
        if (i == 3[s_obj?]) {
            print "^A fight breaks out, over an obscure question to do with somebody's second cousin.^";
        }
        if (i == 4[e_obj?]) {
            print "^The gentle sound of bazouki music strikes up in the background, and gradually rises to an intolerable pitch. After a moment comes a dull thud and a strangled noise, then blessed quiet.^";
        }
    }
    if (location == parent(antiquated_wireless) && antiquated_wireless has general) {
        print "^The radio plays a ";
        i = random(10);
        if (i == 1[?]) {
            print "synthesized";
        }
        if (i == 2[?]) {
            print "light orchestra";
        }
        if (i == 3[s_obj?]) {
            print "choral";
        }
        if (i == 4[e_obj?]) {
            print "snare drum and strings";
        }
        if (i == 5[w_obj?]) {
            print "country-and-western";
        }
        if (i == 6[ne_obj?]) {
            print "one-finger piano";
        }
        if (i == 7[nw_obj?]) {
            print "Welsh coal-miners' Eisteddfod choir";
        }
        if (i == 8[se_obj?]) {
            print "Hammond organ";
        }
        if (i == 9[sw_obj?]) {
            print "easy-listening";
        }
        if (i == 10[u_obj?]) {
            print "~lite-n-mellow~";
        }
        i = random(5);
        if (i == 1[?]) {
            print " version of ";
        }
        if (i == 2[?]) {
            print " rendition of ";
        }
        if (i == 3[s_obj?]) {
            print " travesty of ";
        }
        if (i == 4[e_obj?]) {
            print " arrangement of ";
        }
        if (i == 5[w_obj?]) {
            print " transcription of ";
        }
        i = random(70);
        if (i == 1[?]) {
            print "Queen's ~I Want To Break Free~.";
        }
        if (i == 2[?]) {
            print "Bach's ~Air on a G-string~.";
        }
        if (i == 3[s_obj?]) {
            print "Mozart's ~Musical Joke~.";
        }
        if (i == 4[e_obj?]) {
            print "Stockhausen's ~Piano Pieces I-IX~.";
        }
        if (i == 5[w_obj?]) {
            print "Beethoven's ~Moonlight Sonata~.";
        }
        if (i == 6[ne_obj?]) {
            print "Summer from Vivaldi's ~Four Seasons~.";
        }
        if (i == 7[nw_obj?]) {
            print "the especially slow movement of Gorecki's ~Symphony no. 3~.";
        }
        if (i == 8[se_obj?]) {
            print "Spandau Ballet's ~Gold~.";
        }
        if (i == 9[sw_obj?]) {
            print "Duran Duran's ~Is There Something I Should Know?~.";
        }
        if (i == 10[u_obj?]) {
            print "Derek and the Dominos' ~Layla~.";
        }
        if (i == 11[d_obj?]) {
            print "Don Maclean's ~American Pie~.";
        }
        if (i == 12[thedark?]) {
            print "Chopin's ~Nocturne no. 1~.";
        }
        if (i == 13[Grahams_Lair?]) {
            print "something by Jean-Michel Jarre.";
        }
        if (i == 14[Attic?]) {
            print "the Beatles' ~Yellow Submarine~.";
        }
        if (i == 15[hinged_trapdoor?]) {
            print "the Beatles' ~She Loves You~.";
        }
        if (i == 16[teachests?]) {
            print "the Beatles' ~Hey Jude~.";
        }
        if (i == 17[Meldrews_History?]) {
            print "the Beatles' ~Lucy in the Sky with Diamonds~.";
        }
        if (i == 18[antique_jewellery_box?]) {
            print "Queen's ~Bohemian Rhapsody~.";
        }
        if (i == 19[four_leafed_clover?]) {
            print "the Beatles' ~Magical Mystery Tour~.";
        }
        if (i == 20[rod_of_luck?]) {
            print "the Beatles' ~I Am The Walrus~.";
        }
        if (i == 21[yourself?]) {
            print "Bill Haley's ~Rock Around the Clock~.";
        }
        if (i == 22[crumpled_piece_of_paper?]) {
            print "the old Elvis Presley number ~Jailhouse Rock~.";
        }
        if (i == 23[electric_torch?]) {
            print "the old Elvis Presley number ~Blue Suede Shoes~.";
        }
        if (i == 24[old_smudged_battery?]) {
            print "ELO's ~Mr Blue Sky~.";
        }
        if (i == 25[chocolate_biscuit?]) {
            print "Sky's arrangement of Bach's Toccata in D minor for organ.";
        }
        if (i == 26[Servants_Room?]) {
            print "ABC's ~The Look of Love~.";
        }
        if (i == 27[servants_bed?]) {
            print "the Beach Boys' ~Californian Girls~.";
        }
        if (i == 28[old_striped_scarf?]) {
            print "the Stranglers' ~Golden Brown~.";
        }
        if (i == 29[House?]) {
            print "Genesis' ~That's All~.";
        }
        if (i == 30[Old_Furniture?]) {
            print "Grieg's piano concerto.";
        }
        if (i == 31[furniture?]) {
            print "Bruce Springsteen's ~Born in the USA~.";
        }
        if (i == 32[scratched_cupboard?]) {
            print "Beethoven's Symphony no. 5.";
        }
        if (i == 33[gift_wrapped_parcel?]) {
            print "Beethoven's ~Emperor~ piano concerto.";
        }
        if (i == 34[box_of_chocolates?]) {
            print "Mozart's ~Elvira Madigan~ concerto.";
        }
        if (i == 35[wrapping_paper?]) {
            print "Bach's Brandenburg Concerto no. 5.";
        }
        if (i == 36[postcard?]) {
            print "Deep Purple's ~Smoke On The Water~.";
        }
        if (i == 37[medicine_bottle?]) {
            print "Faure's Requiem.";
        }
        if (i == 38[red_tablet?]) {
            print "Tchaikovsky's ~1812 Overture~.";
        }
        if (i == 39[Over_the_East_Wing?]) {
            print "the Dying Swan from Saint-Saens' ~Carnival of the Animals~.";
        }
        if (i == 40[Dark_Room?]) {
            print "the ~O Fortuna~ from Carl Orff's ~Carmina Burana~.";
        }
        if (i == 41[hanging_cord?]) {
            print "Led Zeppelin's ~Stairway to Heaven~.";
        }
        if (i == 42[sepia_photograph?]) {
            print "the Bugs Bunny theme tune.";
        }
        if (i == 43[flash?]) {
            print "Strauss' ~Blue Danube~ waltz.";
        }
        if (i == 44[Disused_Observatory?]) {
            print "the Star Wars theme tune.";
        }
        if (i == 45[solid_glass_ball?]) {
            print "the Star Trek theme tune.";
        }
        if (i == 46[Library_Storage?]) {
            print "the Dallas theme tune.";
        }
        if (i == 47[romantic_novel?]) {
            print "Wagner's ~Ride of the Valkyries~ overture.";
        }
        if (i == 48[poetry_book?]) {
            print "Dire Straits' ~Money For Nothing~.";
        }
        if (i == 49[Souvenirs_Room?]) {
            print "Dire Straits' ~Brothers In Arms~.";
        }
        if (i == 50[slide_projector?]) {
            print "Dire Straits' ~Tunnel Of Love~.";
        }
        if (i == 51[south_wall?]) {
            print "Wham's ~Wake Me Up Before You Go-Go~.";
        }
        if (i == 52[East_Annexe?]) {
            print "something abysmal by Leo Sayer.";
        }
        if (i == 53[insulation_rolls?]) {
            print "Lionel Richie's ~Hello~.";
        }
        if (i == 54[new_battery?]) {
            print "Hot Chocolate's ~Happy Birthday~.";
        }
        if (i == 55[cupboard_door?]) {
            print "Abba's ~Mama Mia~.";
        }
        if (i == 56[Dead_End?]) {
            print "Abba's ~Knowing Me, Knowing You~.";
        }
        if (i == 57[canvas_rucksack?]) {
            print "Barry Manilow's ~I Write The Songs~.";
        }
        if (i == 58[secret_door?]) {
            print "Ian Dury and the Blockheads' ~Hit Me With Your Rhythm Stick~.";
        }
        if (i == 59[Inside_Cupboard?]) {
            print "Ravel's ~Bolero~.";
        }
        if (i == 60[painting_of_Mad_Isaac_Meldrewe?]) {
            print "~Nessun Dorma~, as sung simultaneously by Pavarotti, Carreras and Dolly Parton.";
        }
        if (i == 61[big_iron_fireplace?]) {
            print "Michael Jackson's ~Thriller~.";
        }
        if (i == 62[cranked_skylight?]) {
            print "Michael Jackson's ~Billy Jean~.";
        }
        if (i == 63[gas_mask?]) {
            print "Michael Jackson's ~Beat It~.";
        }
        if (i == 64[Roof?]) {
            print "Kylie Minogue's ~I Should Be So Lucky~.";
        }
        if (i == 65[Battlements?]) {
            print "the Eurovision Song Contest's finest five minutes, ~Diggy-Loo Diggy-Lay (Life Is Going My Way)~.";
        }
        if (i == 66[iron_key?]) {
            print "Dexy's Midnight Runners' ~Come on Eileen~.";
        }
        if (i == 67[Sir_Joshua_Meldrewe?]) {
            print "Steppenwolf's ~Born to be Wild~.";
        }
        if (i == 68[Chimney?]) {
            print "John Cage's tuneful ~Four minutes and thirty-three seconds~.";
        }
        if (i == 69[sooty_old_stick?]) {
            print "Toto's ~The Eye of the Tiger~.";
        }
        if (i == 70[rod_of_fire?]) {
            print "Cindi Lauper's ~Girls Just Wanna Have Fun~.";
        }
        new_line;
    }
    if (0 ~= ResetTimer(antiquated_wireless)) {
        give antiquated_wireless general;
        i = 111[antiquated_wireless?];
        i = parent(i);
        if (location == i) {
            print "^The radio valves glow, and execrable so-called easy listening music fills the air with a sort of bland aural candy-floss.^";
        }
        if (location == Potting_Room && i == 107[Conservatory?]) {
            print "^Execrable music begins to sound from the conservatory, and Aunt Jemima hums vacantly.^";
        }
    }
    if (game_section == ANCIENT_BRITAIN) {
        if (0 ~= ResetTimer(kitchen_well)) {
            i = parent(player);
            if (i == 236[Triclinium?]) {
                give kitchen_well general;
                print "^You hear a splash from far down in the depths of the well.^";
            }
        }
        if (CouncilCnt == 1) {
            print "^From up on the hill you hear the blowing of a horn.^";
        }
        if (CouncilCnt == 2) {
            print "^Horses are approaching the villa, coming down the hill.^";
        }
        if (CouncilCnt == 3) {
            print "^The sound of horses draws nearer.^";
        }
        if (CouncilCnt == 4 && location == Entrance) {
            print "^Horsemen suddenly gallop into the courtyard and you are soon ringed by guards!^";
            Capture();	! not popped
            @pop;
        }
        if (CouncilCnt == 4) {
            print "^There is definitely activity outside the villa.^";
        }
        if (CouncilCnt >= 5) {
            if (location == Entrance) {
                print "^You walk straight into the guards.^";
                Capture();	! not popped
                @pop;
            }
            if (location == Roman_Villa) {
                print "^You walk straight into the guards at the back door.^";
                Capture();	! not popped
                @pop;
            }
        }
        if (CouncilCnt == 7) {
            print "^There is sudden activity as the guards make a thorough search of the villa, just to be on the safe side. ";
            if (location == Hypocaust) {
                print "Luckily, they don't even think of looking down in here.^";
            } else {
                if (location == Inside_Well) {
                    print "Unfortunately, they do think of looking into the kitchen well, and drag you out onto the triclinium floor.^";
                }
                if (location ~= Inside_Well) {
                    print "The virtue of doing so is demonstrated when they find you without difficulty.^";
                }
                Capture();	! not popped
                @pop;
            }
        }
        if (CouncilCnt > 7 && location == Triclinium) {
            print "^An industrious-looking slave (who cooks for the horsemen) is rather surprised to see you, but with creditable presence of mind he summons the guard at once.^";
            Capture();	! not popped
            @pop;
        }
        if (location == Hypocaust) {
            if (CouncilCnt == 8) {
                print "^You hear men walking across the mosaic just above your head.^";
            }
            if (CouncilCnt == 9) {
                print "^A voice, which can just be heard through the vent, says ";
                if (KnowLanguages == false) {
                    print "something in Anglo-Saxon or Celtic (hard to say which).^";
                    jump labelXXX;
                }
                print "~Welcome, great masters. We are convened in secret conclave to decide the fate of Britain. Lament, for the old ways are passing!  There will be a dark age, a collapse into many monarchies, and any man who can hold a town will call himself King and heir to Vortigern.~^";
            }
            if (CouncilCnt == 10) {
                print "^A younger, more impatient voice, says ";
                if (KnowLanguages == false) {
                    print "something else.^";
                    jump labelXXX;
                }
                print "~This is an opportunity!  We must be the power behind the thrones, we will in secret unite and be the true force of the land...~^";
            }
            if (CouncilCnt == 11) {
                print "^There is cynical laughter for a moment, and a third voice interjects ";
                if (KnowLanguages == false) {
                    print "something.^";
                    jump labelXXX;
                }
                print "~And who will lead this, this unity?  We take all sides and none, you know that. There are potent druids in the tents of each general down there in the rabble. They'd kill each other without hesitation on the battlefield.~^";
            }
            if (CouncilCnt == 12) {
                print "^The first voice speaks once more. ";
                if (KnowLanguages == false) {
                    new_line;
                    jump labelXXX;
                }
                print "~Far worse is to come. The jumped-up kings and their new men will no longer believe in the ancient powers. Already I can feel the druidic magic weakening away, and we are perilously close to the nexus now. In the valleys below, armies wait to fight the decisive battle. Whichever side wins, they will no longer need us. In a matter of hours, the power will be broken forever.~^";
            }
            if (CouncilCnt == 13) {
                print "^After a sombre silence, a much older voice says ";
                if (KnowLanguages == false) {
                    print "something wise. It really is a pity you can't understand them.^";
                    jump labelXXX;
                }
                print "~You did right to call us together. There is a path prepared for us, but the sacrifice will be terrible. We must concentrate all the remaining druidical energy into this sacred hill, that it may last through all time, and we must ensure that druids live on this site forever and keep the faith.~^";
            }
            if (CouncilCnt == 14) {
                print "^The younger voice speaks again. ";
                if (KnowLanguages == false) {
                    new_line;
                    jump labelXXX;
                }
                print "~For now, yes, for a century or two, yes, but what then?  They will forget the old ways, they will no longer truly be druids.~^";
            }
            if (CouncilCnt == 15) {
                print "^The older voice replies triumphantly. ";
                if (KnowLanguages == false) {
                    new_line;
                } else {
                    print "~This is what must be done. They will forget, so we must give them a substitute. We shall accurse them to always seek after this magical stone, which it will be all but impossible for them to find. It will take the form of whatever they most desire. In six hundred years, by my prophecy, religious wars in the East will capture men's hearts, and then they will think it is the Holy Grail, the cup which held the blood of Christ. A thousand years later they will think it is -~  But at this moment the voices move away.^";
                }
            }
        }
      .labelXXX;
        if (CouncilCnt ~= 0) {
            ++CouncilCnt;
        }
        if (0 ~= ResetTimer(tent_pole)) {
            print "^Without warning a Saxon spy (or, as the guards would no doubt put it, another Saxon spy) is thrown bodily into the tent, careering into the central pole and slumping unconscious on the ground as a result. For a moment the whole tent rocks with the force - the pole was nearly broken.^";
            give tent_pole ~static;
            i = 245[saxon_spy?];
            remove i;
            move i to Rough_Tent;
            StartTimer(saxon_spy,5);	! not popped
            @pop;
        }
        if (location == Rough_Tent && 0 ~= ResetTimer(saxon_spy)) {
            i = 245[saxon_spy?];
            i = parent(i);
            if (i == 242[Rough_Tent?]) {
                print "^Men arrive to drag the Saxon spy away to some unguessable grisly fate. They grimace at you as if to say, ~You're next.~^";
                j = 245[saxon_spy?];
                remove j;
                StartTimer(saxon_spy,5);	! not popped
                @pop;
            }
            if (i == 0) {
                deadflag = DIED;
                print "^The men arrive once more and this time they securely grab you by the arms. If you were an anthropologist, you'd be fascinated by the ritual in which you are bound up, then garotted with a cord and laid into a peat swamp. Instead, your last thought is to remember the celebrated body they found when they drained the marshes in 1974 to build a motorway service station.^";
            }
        }
        if (0 ~= ResetTimer(Encampment)) {
            print "^It had to happen sooner or later. One of the druids looks round, sees you and raises an instant alarm. It is absolutely hopeless and you are dragged away screaming to your fate.^";
            deadflag = DIED;
        }
    }
    if (location == Potting_Room && 0 ~= ResetTimer(Jemima)) {
        print "^~There we are!  All done now.~  Jemima hangs a daisy chain around your neck, then frowns and adjusts your hair in an exceedingly annoying way.^";
        i = 115[daisy_chain?];
        move i to player;
        give daisy_chain worn;
    }
    if (deadflag ~= 0) {
        ! no code
    } else if (BombTicking == true) {
        if (0 ~= DecrementTimer(timer_detonater)) {
            BombTicking = false;
            i = 191[timer_detonater?];
            j = parent(i);
          .labelXXX;
            if (nothing ~= parent(i)) {
                i = parent(i);
                jump labelXXX;
            }
            if (location == i) {
                print "^You hear a sharp click!^";
                if (j == 43[flash?]) {
                    k = child(j);
                    if (k == timer_detonater) {
                        k = sibling(k);
                    }
                    if (k == nothing) {
                        print "But the flash does nothing.^";
                        jump labelXXX;
                    }
                    if (k ~= nasty_battery) {
                        print "And the flash gives a pathetically small flash of light.^";
                        jump labelXXX;
                    }
                    print "The flash suddenly gives an enormous magnesium-flare flash, almost blinding in its intensity. Your eyes take a little while to adjust. ";
                    k = flash;
                    k = parent(k);
                    if (k == mirrored_device && flash hasnt general) {
                        give flash general;
                        print "Consequently you can only hear as the smudge on the horizon rises from the waves, becomes an enormous Kraken sea monster and lunges for the stone tower. (Considering this is supposed to be a Greek myth it feels surprisingly like a Japanese 1960s creature film.)  The Kraken swipes at you, overreaches itself and falls over forward, impaling itself extremely messily on the pharos. Your eyes just about recover by the time the rest of your body is crushed by its weight.^^Up on Mount Olympus, Zeus is still cross. ~Take me to your Leda~, you wittily demand, but this does not seem to improve matters. Poseidon also looks rather fed up, but luckily a sizeable faction of goddesses take your side and arrange to have you resurrected...^";
                        Achieved(SCORE_ANDROMEDA);	! not popped
                        @pop;
                        location = Souvenirs_Room;
                        remove player;
                        move player to location;
                        LookSub(true);	! not popped
                        @pop;
                        jump labelXXX;
                    }
                    new_line;
                }
            }
        }
    } else {
        if (location == Cups_and_Glasses) {
            if (Cups_and_Glasses hasnt general) {
                i = 196[Cups_and_Glasses?];
                i.number = turns;
                give Cups_and_Glasses general;
            }
            i = 196[Cups_and_Glasses?];
            i = turns - i.number;
            if (i == 2[?]) {
                print "^There is a scuffling noise as some men gather up on the pavement outside the skylight.^";
            }
            if (i == 3[s_obj?]) {
                print "^The men begin to talk like conspirators. You catch occasional sounds, but can make little sense of them.^";
            }
            if (i == 4[e_obj?]) {
                print "^Alarmingly, you catch the odd word ~bomb~ and are almost sure you can make out someone say ~get that Meldrew~. Paranoia, bound to be.^";
            }
            if (i == 5[w_obj?]) {
                print "^The men walk away, perhaps a few feet, perhaps a mile.^";
            }
        }
        if (location == Ruined_Castle_Cafe) {
            if (complicated_looking_bomb hasnt edible) {
                if (complicated_looking_bomb hasnt concealed) {
                    new_line;
                    DescribeDetonator();	! not popped
                    @pop;
                }
                if (complicated_looking_bomb has concealed) {
                    print "^The table rattles again.^";
                }
            }
            if (0 ~= DecrementTimer(timer_detonater)) {
                give complicated_looking_bomb edible;
                if (complicated_looking_bomb has general) {
                    if (194[blue_wire?] ~= BombWires->0) {
                        ! no code
                    } else if (192[green_wire?] ~= BombWires->1) {
                        ! no code
                    } else if (195[black_wire?] ~= BombWires->2) {
                        ! no code
                    } else if (193[red_wire?] ~= BombWires->3) {
                        ! no code
                    } else {
                        print "^Click!  The timer runs out, but the bomb was disarmed. You pocket the timer and hide the rest of the evidence under the table.^";
                        i = 191[timer_detonater?];
                        remove i;
                        move i to player;
                        give timer_detonater ~static;
                        i = 190[complicated_looking_bomb?];
                        remove i;
                        jump labelXXX;
                    }
                    print "Click!  Perhaps there's more to bomb disposal than you thought.^";
                }
                print "^In a sudden cataclysm, there is an enormous explosion from your table, blowing out all the arrowslit windows, making a thunderous noise, starting a minor fire, and of course having one other consequence:^";
                deadflag = DIED;
            }
        }
    }
  .labelXXX;
    if (0 ~= ResetTimer(Coven_Cell)) {
        if (location == Museum_of_Arcana) {
            print "^Doktor Stein appears and steps toward you, clapping his hands sharply. Suddenly dozens of robed figures leap out of the darkness. Their faces are painted hideously and they betray no emotion as they pinion you tight...^^Stein forces your mouth open and makes you swallow a violet pill. ~One of your apothecary ancestors made this drug!  Appropriate, no?~^^", "You feel queasy, but this is perhaps the least of your problems as they drag you off...^^";
            location = Coven_Cell;
            remove player;
            move player to Coven_Cell;
            give player general;
            StartTimer(Coven_Cell,5);	! not popped
            @pop;
            LookSub();	! not popped
            @pop;
        } else if (location == Coven_Cell) {
            print "^A key turns in the door and Doktor Stein bursts in. He stops to pat the goat affectionately. ~Cheer up, Dobbin. As soon as I've finished this brutal human sacrifice I'll take you for your walk.~  He feeds Dobbin some sugar-cake. ~They make such marvellous cheese,~ he explains confidentially.^";
            deadflag = DIED;
            if (player has general) {
                "^In a trance, you go willingly to your (somewhat messy) sacrifice...";
            }
            "^Kicking and screaming, you are are dragged off to a grisly sacrifice...";
        }
    }
    i = light_lvl;
    light_lvl = HasLightSource(parent(player));
    if (i == 0 && light_lvl == true) {
        new_line;
        location = parent(player);
        LookSub(true);	! not popped
        @pop;
    }
    if (i == 1[?] && light_lvl == false) {
        new_line;
        print "It is now pitch dark in here!^";
        location = thedark;
    }
    rtrue;
];

[ ResetTimer obj i ;	
    i = obj.number;
    if (i > turns) {
        rfalse;
    }
    if (i == 0) {
        rfalse;
    }
    obj.number = 0;
    rtrue;
];

[ DecrementTimer o i ;	
    i = o.number;
    if (i == 0) {
        rfalse;
    }
    --i;
    o.number = i;
    if (i > 0) {
        rfalse;
    }
    rtrue;
];

[ StartTimer o i ;	
    i = turns + i;
    o.number = i;
    rtrue;
];

[ CountDown o i ;	
    i = o.number - turns;
    return i;
];

[ TorchTimer o i var3 ;	
    i = o.number - 1;
    if (i < 100) {
        o.number = i;
    }
    if (i == 2) {
        print "^The torch flickers ominously.^";
    }
    if (i == 0) {
        print "^The torch finally dies out.^";
        give electric_torch ~light;
    }
    rtrue;
];

[ JoshuaDaemon who num var3 ;	
    who = Sir_Joshua_Meldrewe;
    num = who.number - 1;
    who.number = num;
    if (num == 4) {
        print "^The ghost laughs in a gurgling kind of way, as it were always coughing and spluttering.^";
    }
    if (num == 3) {
        print "^The ghost begins to speak:^^                       My hour is almost come^   When I to sulph'rous and tormenting flames^   Must render up myself...^^Can this possibly be the infamous Sir Joshua Meldrewe?^";
    }
    if (num == 2) {
        print "^~But not yet it hasn't, mark my word. And there's the burden of my inheritance, little wart!  Get thee from my sight ere I slice thee as befits a hog!~^";
    }
    if (num == 1) {
        print "^~I prithee once more, begone!~^";
    }
    if (num == 0) {
        print "^The ghost swoops around and through you, making you scream with panic. Somehow you manage to run back to safety, where your family (who never believe a word of it) give you plenty of tea and occupy you with holiday arrangements. As for you, you are so traumatised that you never venture into the attic again.^";
        deadflag = FAILED;
    }
    rtrue;
];

[ HasLightSource i ;	
    if (i has light) {
        rtrue;
    }
    if (i has container && i has transparent && i hasnt open) {
        rfalse;
    }
    i = child(i);
  .labelXXX;
    if (i ~= nothing) {
        if (true == HasLightSource(i)) {
            rtrue;
        }
        i = sibling(i);
        jump labelXXX;
    }
    rfalse;
];

[ Achieved ndx i ;	
    i = score_array2->ndx;
    if (i == 0) {
        score_array2->ndx = 1[?];
        if (ndx ~= SCORE_DOLEMN) {
            score = score + task_scores->ndx;
        }
        if (ndx == SCORE_DOLEMN) {
            score = score - 50;
        }
    }
    rtrue;
];

[ MouseMove o rm var3 x1 y1 ;	
    if (verb ~= ##Go) {
        "The mouse emits a querulous, unhappy bleep.";
    }
    if (noun == ne_obj) {
        noun = u_obj;
    }
    if (noun == nw_obj) {
        noun = u_obj;
    }
    if (noun == se_obj) {
        noun = u_obj;
    }
    if (noun == sw_obj) {
        noun = u_obj;
    }
    if (noun == d_obj) {
        noun = u_obj;
    }
    if (noun == u_obj) {
        "The mouse bleeps with annoyance.";
    }
    o = robot_mouse;
    o = parent(o);
    if (o == Cellars_South) {
        if (noun == n_obj) {
            rm = Cellars;
            jump labelXXX;
        }
        if (noun == w_obj) {
            rm = hole_in_the_wall;
            Mouse_x = 8;
            Mouse_y = 3;
            jump labelXXX;
        }
    } else if (o == Cellar_West) {
        if (noun == e_obj) {
            rm = Cellars;
            jump labelXXX;
        }
    } else if (o == Cellars) {
        if (noun == w_obj) {
            rm = Cellar_West;
            jump labelXXX;
        }
        if (noun == s_obj) {
            rm = Cellars_South;
            jump labelXXX;
        }
    } else {
        if (o == hole_in_the_wall) {
            if (Mouse_x == 8 && Mouse_y == 3 && noun == e_obj) {
                rm = Cellars_South;
                jump labelXXX;
            }
            if (noun == n_obj) {
                x1 = Mouse_x;
                y1 = Mouse_y - 1;
            }
            if (noun == e_obj) {
                x1 = Mouse_x + 1;
                y1 = Mouse_y;
            }
            if (noun == s_obj) {
                x1 = Mouse_x;
                y1 = Mouse_y + 1;
            }
            if (noun == w_obj) {
                x1 = Mouse_x - 1;
                y1 = Mouse_y;
            }
            if (MouseMove2(x1,y1) == true) {
                "From somewhere inside the hole, you hear a disconsolate bleep.";
            }
            Mouse_x = x1;
            Mouse_y = y1;
            if (Mouse_x == 4 && Mouse_y == 1) {
                o = small_brass_key;
                o = parent(o);
                if (o == hole_in_the_wall) {
                    o = small_brass_key;
                    remove o;
                    move o to robot_mouse;
                    "From somewhere inside the hole, you hear the spinning of tiny wheels, followed by an excitable high-pitched beep and a dull clanging noise.";
                }
            }
            "From somewhere inside the hole, you hear tiny wheels spin.";
        }
        "The mouse wheels spin, but can't get a good enough grip to move.";
      .labelXXX;
        var3 = o;
        o = robot_mouse;
        remove o;
        move o to rm;
        give robot_mouse moved;
        if (location == var3) {
            if (rm == hole_in_the_wall) {
                "The mouse just squeezes through the hole, and disappears from view. Unfortunately you can't very easily talk to it now...";
            }
            if (rm ~= hole_in_the_wall) {
                "The mouse runs off as ordered.";
            }
        }
        if (location == rm) {
            print "The mouse runs back out of the hole, looking dustier but none the worse for its adventure";
            o = small_brass_key;
            o = parent(o);
            if (o ~= robot_mouse) {
                ".";
            }
            o = small_brass_key;
            remove o;
            move o to Cellars_South;
            ", and then almost looks proud as a magnet cuts out and something metal drops off the underside of the mouse onto the floor. The lost key is found!";
        }
        rtrue;
    }
    "The mouse emits a low-pitched bleep.";
];

[ ScoreSub score_var ;	
    if (deadflag == 0) {
        if (game_section == MODERN) {
            print "This is the afternoon of June 3rd, 1993, and you are in Meldrew House. ";
        }
        if (game_section == UNREAL) {
            print "It is early morning on October 5th, 1922, and you are in the Unreal City. ";
        }
        if (game_section == HAMBURG) {
            print "It is nearly midnight on October 31st, 1988, and you are in a museum in Hamburg. ";
        }
        if (game_section == TAROT) {
            print "You are passing among the ancient, unearthly world of the Tarot box. ";
        }
        if (game_section == GARDEN) {
            print "It is the afternoon of June 3rd, 1993, and you are in the gardens. ";
        }
        if (game_section == GARDEN_PAST) {
            print "It is about noon on March 14th, 1808, and you are in the gardens. ";
        }
        if (game_section == ANCIENT_BRITAIN) {
            print "It is some time in the sixth century A.D., and you are in the Master Game. ";
        }
        if (game_section == DREAMING) {
            print "Time seems to have no meaning, and you are dreaming. ";
        }
        print "You have so far scored ";
    }
    if (deadflag > 0) {
        print "In that game you scored ";
    }
    print score, " out of a possible 300, in ", turns, " turns, earning you the rank of ";
    score_var = score;
    if (0 ~= score_array2->11) {
        score_var = score_var - 50;
    }
    if (score_var >= 250) {
        "happy Tourist.";
    }
    if (score_var == 249) {
        "very nearly happy Tourist.";
    }
    if (score_var >= 225) {
        "Druid.";
    }
    if (score_var >= 200) {
        "Master Navigator.";
    }
    if (score_var >= 175) {
        "Master Voyager.";
    }
    if (score_var >= 150) {
        "Voyager.";
    }
    if (score_var >= 125) {
        "Explorer.";
    }
    if (score_var >= 100) {
        "Adventurer.";
    }
    if (score_var >= 75) {
        "Connoisseur.";
    }
    if (score_var >= 50) {
        "Dilletante.";
    }
    if (score_var >= 35) {
        "cynical Tourist.";
    }
    if (score_var >= 20) {
        "experienced Tourist.";
    }
    if (score_var >= 5) {
        "casual Tourist.";
    }
    if (score_var >= 1) {
        "gauche Tourist.";
    }
    if (score_var >= 0) {
        "hapless Tourist.";
    }
    if (0 == 99 + score_var) {
        "highly negligent deity.";
    }
    "accursed Tourist.";
];

[ PadInteger i j ;	
    print "  ";
    j = i;
    if (j < 0) {
        j = 0 - i;
        j = j * 10;
    }
    if (j < 10) {
        print "   ";
    } else if (j < 100) {
        print "  ";
    } else if (j < 1000) {
        print " ";
    }
    print i, " ";
    rtrue;
];

[ PrintTaskName task_number final_score ;	
    if (task_number == SCORE_DOLEMN) {
        final_score = 0;
        final_score = final_score - 50;
    }
    PadInteger(final_score);	! not popped
    @pop;
    if (task_number == SCORE_HAMBURG) {
        "reading postcard";
    }
    if (task_number == SCORE_TORCH) {
        "recharging torch";
    }
    if (task_number == SCORE_JOSHUA) {
        "exorcism";
    }
    if (task_number == SCORE_SECRETDOOR) {
        "opening secret door";
    }
    if (task_number == SCORE_DEMIJOHN) {
        "opening demijohn";
    }
    if (task_number == SCORE_WAITER) {
        "using dumbwaiter";
    }
    if (task_number == SCORE_WAND) {
        "charging a rod";
    }
    if (task_number == SCORE_AIMWAND) {
        "firing a rod";
    }
    if (task_number == SCORE_WIRELESS) {
        "exposing radio";
    }
    if (task_number == SCORE_CALENDAR) {
        "turning calendar";
    }
    if (task_number == SCORE_CHOCOLATE) {
        "placating Aunt Jemima";
    }
    if (task_number == SCORE_ANDROMEDA) {
        "rescuing Andromeda";
    }
    if (task_number == SCORE_BATTERY) {
        "uncovering battery";
    }
    if (task_number == SCORE_TOURIST) {
        "buying map of Paris";
    }
    if (task_number == SCORE_INFINITY) {
        "filling the arc";
    }
    if (task_number == SCORE_TRICLINIUM) {
        "getting into the well";
    }
    if (task_number == SCORE_DOLEMN) {
        "acquiring the mascot";
    }
    if (task_number == SCORE_BISCUIT) {
        "eating between meals";
    }
    "(something else)";
];

[ FullScoreSub local1 local2 local3 local4 ;	
    ScoreSub();	! not popped
    @pop;
    if (score == 0) {
        rfalse;
    }
    new_line;
    local4 = 0;
    if (deadflag > 0) {
        print "The score was ";
    }
    if (deadflag == 0) {
        print "The score is ";
    }
    print "made up as follows:^^";
    local1 = 0;
    --local1;
  .labelXXX;
    if (local1 < 17) {
        ++local1;
        local2 = task_scores->local1;
        local3 = score_array2->local1;
        if (local3 == 1[?]) {
            PrintTaskName(local1,local2);	! not popped
            @pop;
            local4 = local4 + local2;
        }
        jump labelXXX;
    }
    if (rod_score ~= 0) {
        PadInteger(rod_score);	! not popped
        @pop;
        print "discovering rods^";
    }
    if (things_score ~= 0) {
        PadInteger(things_score);	! not popped
        @pop;
        print "finding sundry items^";
    }
    if (places_score ~= 0) {
        PadInteger(places_score);	! not popped
        @pop;
        print "visiting various places^";
    }
    if (good_try_bonus ~= false) {
        PadInteger(5);	! not popped
        @pop;
        print "bonus for a good try^";
    }
    local4 = local4 + (rod_score + (things_score + places_score));
    if (good_try_bonus ~= false) {
        local4 = local4 + 5;
    }
    if (score + 99 == 0) {
        local4 = local4 + 99;
        local4 = 0 - local4;
        PadInteger(local4);	! not popped
        @pop;
        print "destroying universe^";
    }
    new_line;
    PadInteger(score);	! not popped
    @pop;
    print "total (out of 300)^";
    if (deadflag == WON && 0 == score_array2->11) {
        print "^You missed out on the 50-point bonus for rescuing Andromeda, sad to tell.^";
    }
    rfalse;
];

[ QuitSub i ;	
    print "Are you sure you want to quit? ";
  .labelXXX;
    @sread buffer parse;
    i = parse-->1;
    if (i == 'yes') {
        @quit;
    }
    if (i == 'y//') {
        @quit;
    }
    if (i == 'no') {
        rtrue;
    }
    if (i == 'n//') {
        rtrue;
    }
    print "Please answer yes or no.", '>', ' ';
    jump labelXXX;
    rtrue;
];

[ UnconditionalQuitSub ;	
    @quit;
    rtrue;
];

[ RestartSub i ;	
    print "Are you sure you want to restart? ";
  .labelXXX;
    @sread buffer parse;
    i = parse-->1;
    if (i == 'yes') {
        @restart;
    }
    if (i == 'y//') {
        @restart;
    }
    if (i == 'no') {
        rtrue;
    }
    if (i == 'n//') {
        rtrue;
    }
    print "Please answer yes or no.", '>', ' ';
    jump labelXXX;
];



