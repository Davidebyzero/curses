Constant DEBUG;
Constant SACK_OBJECT = rucksack;
Constant MAX_CARRIED = 5;

Constant T_MODERN = 1;
Constant T_UNREAL = 2;
Constant T_HAMBURG = 3;
Constant T_TAROT = 4;
Constant T_GARDEN = 5;
Constant T_GARDEN_PAST = 6;
Constant T_ANCIENT_BRITAIN = 7;
Constant T_DREAMING = 8;
Constant T_CATACOMBS = 9;
Constant T_DREAMING_EGYPT = 10;
Constant T_ALEXANDRIA = 11;
Constant T_NE_OF_HOME = 12;
Constant T_SPIRIT_WORLD = 13;
Constant T_AFTERLIFE = 14;

Constant DIED = 1;
Constant WON = 2;
Constant FAILED = 3;
Constant DESTROYED_UNIVERSE = 4;
Constant AUSTRALIA = 5;
Constant PARADOX = 6;
Constant MYTH = 7;
Constant PRISON = 8;
Constant CHECKMATED = 9;
Constant SPOOKED = 10;

Constant SCORE_HAMBURG = 0;
Constant SCORE_TORCH = 1;
Constant SCORE_JOSHUA = 2;
Constant SCORE_SECRETDOOR = 3;
Constant SCORE_DEMIJOHN = 4;
Constant SCORE_WAITER = 5;
Constant SCORE_WAND = 6;
Constant SCORE_AIMWAND = 7;
Constant SCORE_WIRELESS = 8;
Constant SCORE_DAISY = 9;
Constant SCORE_CHOCOLATE = 10;
Constant SCORE_ANDROMEDA = 11;
Constant SCORE_BATTERY = 12;
Constant SCORE_PLUMBING = 13;
Constant SCORE_SMELL = 14;
Constant SCORE_REFLECTING = 15;
Constant SCORE_HENRIPOST = 16;
Constant SCORE_ORB = 17;
Constant SCORE_MAP = 18;
Constant SCORE_ARC = 19;
Constant SCORE_WELL = 20;
Constant SCORE_MASCOT = 21;
Constant SCORE_BISCUIT = 22;
Constant SCORE_SMOKE = 23;
Constant SCORE_SHIP = 24;
Constant SCORE_FLAG = 25;
Constant SCORE_SLEEP = 26;
Constant SCORE_SECRET_PASS = 27;
Constant SCORE_ROD_IDENT = 28;
Constant SCORE_WATCH = 29;
Constant SCORE_HYPNOSIS = 30;
Constant SCORE_SECURITY = 31;
Constant SCORE_TEMPLE = 32;
Constant SCORE_HOMER = 33;
Constant SCORE_ORACLE = 34;
Constant SCORE_STRONGBOX = 35;
Constant SCORE_AUSTIN = 36;
Constant SCORE_WASH = 37;
Constant SCORE_LIBRARY = 38;
Constant SCORE_SPHINX = 39;
Constant SCORE_QUARTERSTAFF = 40;
Constant SCORE_AFTERLIFE = 41;
Constant SCORE_KNIGHT = 42;
Constant SCORE_KNIGHT_ENCOURAGE = 43;
Constant SCORE_HIGHROD = 44;

Array garden_array ->
    49
    49
    49
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    48
    49
    48
    48
    49
    49
    49
    48
    49
    48
    48
    49
    48
    49
    49
    48
    48
    48
    49
    48
    48
    48
    49
    49
    49
    48
    49
    49
    49
    49
    49
    49
    49
    48
    48
    48
    48
    48
    49
    48
    49
    49
    49
    49
    49
    48
    49
    49
    49
    49
;

Global ball_polished;
Global rod_identity;
Global OldDigX;
Global OldDigY;
Global HighRodWarn;
Global OzoneSmelled;
Global PlanckWarning;
Global DigX;
Global DigY;
Global deterministic_transportation;
Global WeedkillerX;
Global WeedkillerY;
Global Mouse_x;
Global Mouse_y;
Global hollow_man_cnt;
Global DreamCnt;
Global game_section;
Global KnowLanguages;
Global CouncilCnt;
Global ContainerSave;
Global LocationSave;
Global MazeX;
Global MazeY;
Global StrongboxY;
Global StrongboxX;
Global tablet_eaten;
Global daisy_given;
Global projector_reversed;
Global palace_move3;
Global palace_move2;
Global palace_move1;
Global PalaceCnt;
Global HighRodBalance;
Global SpiritCnt;
Global MummyWarning;
Global card_ptr;
Global LeftHand;
Global SkullFit;
Global priest_cnt;
Global poseiden_warning;
Global good_try_bonus;
Global one_time_try_bonus;
Global displaying_quote;

Array henri_post_array ->
    8
    2
    16
    14
    5
    12
    1
    3
    15
    18
    11
    19
    0
    9
    20
;
Array henry_post_initial_layout ->
    8
    2
    16
    5
    12
    15
    14
    1
    19
    18
    3
    20
    9
    11
    0
;

Array bomb_wires -> 4;

Array rank_levels -->
    48
    500 "happy Tourist."
    499 "very nearly happy Tourist."
    450 "master Druid."
    425 "journeyman Druid."
    400 "apprentice Druid."
    375 "Master Navigator."
    340 "Navigator."
    310 "Voyager."
    280 "Explorer."
    250 "expert Traveller."
    210 "Traveller."
    170 "Adventurer."
    150 "Connoisseur."
    125 "Jack-of-all-trades."
    100 "amateur Adventurer."
    75 "Dilettante."
    50 "cynical Tourist."
    35 "experienced Tourist."
    20 "seasoned Tourist."
    10 "casual Tourist."
    1 "gauche Tourist."
    0 "hapless Tourist."
    65438 "accursed Tourist."
    64536 "irresponsible deity."
;

Array card_deck --> 10;

Array type_of_tune table
    "a synthesized"
    "a light orchestra"
    "a choral"
    "a snare drum and strings"
    "a country-and-western"
    "a one-finger piano"
    "a Welsh coal-miners' Eisteddfod choir"
    "a Hammond organ"
    "an easy-listening"
    "a ~lite-n-mellow~"
    "a jazz trio"
    "a Big Band"
;
Array tune_version table
    " version of "
    " rendition of "
    " travesty of "
    " arrangement of "
    " transcription of "
;
Array horrible_tunes table
    "Queen's ~I Want To Break Free~."
    "Bach's ~Air on a G-string~."
    "Mozart's ~Musical Joke~."
    "Stockhausen's ~Piano Pieces I-IX~."
    "Beethoven's ~Moonlight Sonata~."
    "Summer from Vivaldi's ~Four Seasons~."
    "the especially slow movement of Gorecki's ~Symphony no. 3~."
    "Spandau Ballet's ~Gold~."
    "Duran Duran's ~Is There Something I Should Know?~."
    "Derek and the Dominos' ~Layla~."
    "Don McLean's ~American Pie~."
    "Chopin's ~Nocturne no. 1~."
    "Oxygene by Jean-Michel Jarre."
    "the Beatles' ~Yellow Submarine~."
    "the Beatles' ~She Loves You~."
    "the Beatles' ~Hey Jude~."
    "the Beatles' ~Lucy in the Sky with Diamonds~."
    "Queen's ~Bohemian Rhapsody~."
    "the Beatles' ~Magical Mystery Tour~."
    "the Beatles' ~I Am The Walrus~."
    "Bill Haley's ~Rock Around the Clock~."
    "the old Elvis Presley number ~Jailhouse Rock~."
    "the old Elvis Presley number ~Blue Suede Shoes~."
    "ELO's ~Mr Blue Sky~."
    "Bach's Toccata in D minor for organ."
    "ABC's ~The Look of Love~."
    "the Beach Boys' ~California Girls~."
    "the Stranglers' ~Golden Brown~."
    "Genesis' ~That's All~."
    "Grieg's piano concerto."
    "Bruce Springsteen's ~Born in the USA~."
    "Beethoven's Symphony no. 5."
    "Beethoven's ~Emperor~ piano concerto."
    "Mozart's ~Elvira Madigan~ concerto."
    "Bach's Brandenburg Concerto no. 5."
    "Deep Purple's ~Smoke On The Water~."
    "Faure's Requiem."
    "Tchaikovsky's ~1812 Overture~."
    "the Swan from Saint-Saens' ~Carnival of the Animals~."
    "the ~O Fortuna~ from Carl Orff's ~Carmina Burana~."
    "Led Zeppelin's ~Stairway to Heaven~."
    "the Bugs Bunny theme tune."
    "Strauss' ~Blue Danube~ waltz."
    "the Star Wars theme tune."
    "the Star Trek theme tune."
    "the Dallas theme tune."
    "Wagner's ~Ride of the Valkyries~ overture."
    "Dire Straits' ~Money For Nothing~."
    "Dire Straits' ~Brothers In Arms~."
    "Dire Straits' ~Tunnel Of Love~."
    "Wham's ~Wake Me Up Before You Go-Go~."
    "something abysmal by Leo Sayer."
    "Lionel Richie's ~Hello~."
    "Hot Chocolate's ~Happy Birthday~."
    "Abba's ~Mama Mia~."
    "Abba's ~Knowing Me, Knowing You~."
    "Barry Manilow's ~I Write The Songs~."
    "Ian Dury and the Blockheads' ~Hit Me With Your Rhythm Stick~."
    "Ravel's ~Bolero~."
    "~Nessun Dorma~, as sung simultaneously by Pavarotti, Carreras and Dolly Parton."
    "Michael Jackson's ~Thriller~."
    "Michael Jackson's ~Billy Jean~."
    "Michael Jackson's ~Beat It~."
    "Kylie Minogue's ~I Should Be So Lucky~."
    "the Eurovision Song Contest's finest five minutes, ~Diggy-Loo Diggy-Lay (Life Is Going My Way)~."
    "Dexy's Midnight Runners' ~Come on Eileen~."
    "Steppenwolf's ~Born to be Wild~."
    "Toto's ~The Eye of the Tiger~."
    "Cyndi Lauper's ~Girls Just Wanna Have Fun~."
    "the traditional air ~Greensleeves~."
    "Hoagy Carmichael's ~Skylark~."
    "Noel Coward's ~Don't Put Your Daughter On The Stage~."
    "Chas and Dave's ~Rabbit Song~."
    "Paul McCartney's ~Mull of Kintyre~."
    "John Lennon's ~Imagine~."
    "that grisly carol, ~We Wish You A Merry Christmas~."
    "that hoary old favourite, ~Oh Come All Ye Faithful~."
    "~My Way~, crooned over by Frank Sinatra."
;

Attribute cat_nofollow;
Attribute charged;
Attribute battery_flag;
Attribute card;
Attribute consultable;
Attribute hidden_Rod;
Attribute rod_attr;
Attribute unidentifed_rod;
Attribute high_rod;
Attribute wire;
Attribute statue_flag;
Attribute ship_flag;
Attribute lucky;

Replace SaveSub;
Replace StrongSub;
Replace MildSub;
Replace SorrySub;
Replace JumpSub;
Replace DarkToDark;

Include "Parser";
Include "VerbLib";

Include "rods.inf";
Include "cards.inf";

Include "house.inf";
Include "garden.inf";
Include "maze.inf";
Include "dreams.inf";
Include "unreal.inf";
Include "hamburg.inf";
Include "tarot.inf";
Include "northeast.inf";
Include "master.inf";
Include "crypt.inf";
Include "alexandria.inf";
Include "afterlife.inf";

[ Initialise; ;
    StartSplash();
    location = Attic;

    move crumpled_piece_of_paper to player;
    move electric_torch to player;
    move chocolate_biscuit to player;

    StartDaemon(electric_torch);

    InsertCardIntoDeck(Drowned_Sailor_card);
    InsertCardIntoDeck(Fool_card);
    InsertCardIntoDeck(Death_card);

    StrongboxX = random(18) - 9;
    StrongboxY = random(18) - 9;

    "^^^^It's become a matter of pride now not to give up. That tourist map of Paris must be up here 
     somewhere in all this clutter, even if it has been five years since your last trip. And it's your own fault. It
     looks as if your great-grandfather was the last person to tidy up these lofts...^";
];

[ GoodTry ;
    if( one_time_try_bonus == true ) {
        rtrue;
    }
    one_time_try_bonus = true;
    displaying_quote = true;
    StartTimer(Old_Winery,4);
    score = score + 5;
    good_try_bonus = 1;
    "^A shame to see such a good try unrewarded... oh, go on, have an extra five points.";
];

[ GoodTryRevoked ;
    if( good_try_bonus == 1 ) {
        score = score - 5;
        good_try_bonus = 0;
        "^Under the circumstances, the 5-point bonus is forfeit.";
    }
    rtrue;
];

[ DarkToDark ;
    deadflag = DIED;
    if( game_section ~= T_MODERN ) {
        "As you step falteringly through the darkness, the air falls ice-cold, whispering in secret languages. 
         Suddenly a great bear rears up before you, savagely sweeping its paw!";
    }
    deadflag = FAILED;
    print "As you unwisely blunder about in the dark, you ";
    if( location == Priests_Hole ) 
        "slip down a side passage of the chimney, further and further, blindly landing in a cloud of soot in the 
         fireplace of the lounge downstairs. Fortunately your family is on hand to clean you up and put you back
         to work packing.";

! TODO: handle this
    if( location >= 123 ) 
        "miss your footing, trip over and bang your head... Some time later you wake up in hospital, 
         very confused and not on holiday. Fortunately Aunt Jemima comes to visit you every afternoon with plenty
         of things for you to do...";
    "put a foot wrong and crash through a thin plaster roof into one of the upstairs bedrooms, happily landing 
     on the bed. In later years it becomes a family joke that you demolished half the house for a tatty old
     tourist map.";
];

Object carbolic_soap "carbolic soap"
  with  name 'soap' 'carbolic',
        before [; Eat: << Wash self >>; ],
        description "~For foulmouths everywhere~.",
        article "a cake of",
        devil_hint "That's the spirit, keep it up!",
        angel_hint "Really!  How disgraceful!",
  has   concealed;

[ PrintTaskName n ;
    if( n == SCORE_HAMBURG ) {
        "reading postcard";
    }
    if( n == SCORE_TORCH ) {
        "recharging torch";
    }
    if( n == SCORE_JOSHUA ) {
        "exorcism";
    }
    if( n == SCORE_SECRETDOOR ) {
        "opening secret door";
    }
    if( n == SCORE_DEMIJOHN ) {
        "opening demijohn";
    }
    if( n == SCORE_WAITER ) {
        "using dumbwaiter";
    }
    if( n == SCORE_WAND ) {
        "charging a rod";
    }
    if( n == SCORE_AIMWAND ) {
        "firing a rod";
    }
    if( n == SCORE_WIRELESS ) {
        "exposing radio";
    }
    if( n == SCORE_DAISY ) {
        "sporting a daisy chain";
    }
    if( n == SCORE_CHOCOLATE ) {
        "placating Aunt Jemima";
    }
    if( n == SCORE_ANDROMEDA ) {
        "rescuing Andromeda";
    }
    if( n == SCORE_BATTERY ) {
        "uncovering battery";
    }
    if( n == SCORE_PLUMBING ) {
        "mending the plumbing";
    }
    if( n == SCORE_SMELL ) {
        "scenting a passage";
    }
    if( n == SCORE_REFLECTING ) {
        "reflecting";
    }
    if( n == SCORE_HENRIPOST ) {
        "solving the grid";
    }
    if( n == SCORE_ORB ) {
        "winning the orb";
    }
    if( n == SCORE_MAP ) {
        "buying map of Paris";
    }
    if( n == SCORE_ARC ) {
        "filling the arc";
    }
    if( n == SCORE_WELL ) {
        "getting into the well";
    }
    if( n == SCORE_MASCOT ) {
        "acquiring the mascot";
    }
    if( n == SCORE_BISCUIT ) {
        "eating between meals";
    }
    if( n == SCORE_SMOKE ) {
        "smoke detecting";
    }
    if( n == SCORE_SHIP ) {
        "putting a ship in a bottle";
    }
    if( n == SCORE_FLAG ) {
        "parachuting on deck";
    }
    if( n == SCORE_SLEEP ) {
        "sleeping in Alison's bed";
    }
    if( n == SCORE_SECRET_PASS ) {
        "opening sandstone crevice";
    }
    if( n == SCORE_ROD_IDENT ) {
        "identifying a rod";
    }
    if( n == SCORE_WATCH ) {
        "dislodging the watch";
    }
    if( n == SCORE_HYPNOSIS ) {
        "hypnosis";
    }
    if( n == SCORE_SECURITY ) {
        "passing security";
    }
    if( n == SCORE_TEMPLE ) {
        "restoring the Temple";
    }
    if( n == SCORE_HOMER ) {
        "answering Homer";
    }
    if( n == SCORE_ORACLE ) {
        "summoning the oracle";
    }
    if( n == SCORE_STRONGBOX ) {
        "unearthing strongbox";
    }
    if( n == SCORE_AUSTIN ) {
        "startling Austin";
    }
    if( n == SCORE_WASH ) {
        "washing away the stone";
    }
    if( n == SCORE_LIBRARY ) {
        "provoking the librarians";
    }
    if( n == SCORE_SPHINX ) {
        "twisting the sphinx's nose";
    }
    if( n == SCORE_QUARTERSTAFF ) {
        "depositing the quarterstaff";
    }
    if( n == SCORE_AFTERLIFE ) {
        "rising in the afterlife";
    }
    if( n == SCORE_KNIGHT ) {
        "reviving the knight";
    }
    if( n == SCORE_KNIGHT_ENCOURAGE ) {
        "encouraging the knight";
    }
    if( n == SCORE_HIGHROD ) {
        "choosing a High Rod";
    }
    "** Nameless task **";
];

[ DeathMessage ;
    if( deadflag == FAILED ) {
        print "You have missed the point entirely";
    }
    if( deadflag == DESTROYED_UNIVERSE ) {
        print "You have disembodied the entire universe";
    }
    if( deadflag == AUSTRALIA ) {
        print "You have been transported to Australia";
    }
    if( deadflag == PARADOX ) {
        print "You have been annihilated by a temporal paradox";
    }
    if( deadflag == MYTH ) {
        print "You have become a constellation";
    }
    if( deadflag == PRISON ) {
        print "You have been imprisoned as a terrorist";
    }
    if( deadflag == CHECKMATED ) {
        print "You have been checkmated";
    }
    if( deadflag == SPOOKED ) {
        print "You have been spooked";
    }
    rtrue;
];

[ GamePreRoutine ;
    if( action == ##Go && carbolic_soap hasnt concealed ) {
        trigger_quotation(13);
        "You're going nowhere until you make amends for that nasty bad language.";
    }
    if( gas_mask has worn ) {
        if( action == ##Smell ) {
            "With the gas mask on all you can smell is old cork and rubber.";
        }
        if( action == ##Eat ) {
            "Not with a gas mask on!";
        }
        if( action == ##Order or ##Answer or ##Ask ) {
            "Your speech is muffled into silence by the gas mask.";
        }
    }
    rfalse;
];

Include "Grammar";
Include "newverbs.inf";
