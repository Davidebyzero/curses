Constant DEBUG;
Constant SACK_OBJECT = canvas_rucksack;
Constant MAX_CARRIED = 5;

Constant Story "CURSES";
Constant Headline ": An Interactive Diversion^Copyright (c) 1993 by Graham Nelson. New players should type ~help~.^";

Property angel_hint;
Property devil_hint;
Property rod_assoc;

Array score_array2 -> 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;

Attribute hidden_rod;
Attribute rod_attr;
Attribute rod_charged;
Attribute card;
Attribute wire;

Replace ScoreSub;
Replace WaveSub;

Include "Parser";
Include "variables.inf";
Include "VerbLib";

Global rod_score;

[ StrikeSub ;
    if( parent(noun) ~= player )
        "But you aren't holding it.";
    if( noun hasnt rod_attr )
        print_ret "You ineffectually bash ", (the) noun, " on the ground.";
    if( noun has rod_charged ) {
        deadflag = DIED;
        "The already-charged rod explodes with cataclysmic violence, burying everything nearby in rubble!";
    }
    give noun rod_charged;
    Achieved(SCORE_WAND);
    if( location == Ruined_Castle_Cafe )
        "You look rather conspicuous striking the rod on the cafe table, 
         but everyone else assumes you're part of the cabaret. Anyway,
         the rod charges up as usual.";

    "The rod charges up with etherial power, drawn up from the earth through ley lines...";
];

[ PointSub func;
    if( parent(noun) ~= player )
        "But you aren't holding it.";
    if( parent(second) == player )
        "It's too fiddly pointing the rod at something you're holding.";
    if( noun hasnt rod_attr )
        "Ok. (Why?)";
    if( noun hasnt rod_charged )
        "Nothing happens.";
    Achieved(SCORE_AIMWAND);
    
    func = noun.rod_action;
    if( func == -1 )
        "Not implemented yet.";
    give noun ~rod_charged;
    func();
    rtrue;
];
    
[ PrintRank score_var;
    print ", earning you the rank of ";
    if( score_array2->11 )
        score_var = score_var - 50;

    if (score_var >= 250)
        "happy Tourist.";
    if (score_var == 249)
        "very nearly happy Tourist.";
    if (score_var >= 225)
        "Druid.";
    if (score_var >= 200) 
        "Master Navigator.";
    if (score_var >= 175) 
        "Master Voyager.";
    if (score_var >= 150) 
        "Voyager.";
    if (score_var >= 125) 
        "Explorer.";
    if (score_var >= 100) 
        "Adventurer.";
    if (score_var >= 75) 
        "Connoisseur.";
    if (score_var >= 50) 
        "Dilletante.";
    if (score_var >= 35) 
        "cynical Tourist.";
    if (score_var >= 20) 
        "experienced Tourist.";
    if (score_var >= 5) 
        "casual Tourist.";
    if (score_var >= 1) 
        "gauche Tourist.";
    if (score_var >= 0) 
        "hapless Tourist.";
    if (0 == 99 + score_var) 
        "highly negligent deity.";
    "accursed Tourist.";
];

[ ScoreSub ;
    if( deadflag == 0 ) {
        switch( game_section ) {
            MODERN: print "This is the afternoon of June 3rd, 1993, and you are in Meldrew House. ";
            UNREAL: print "It is early morning on October 5th, 1922, and you are in the Unreal City. ";
            HAMBURG: print "It is nearly midnight on October 31st, 1988, and you are in a museum in Hamburg. ";
            TAROTAREA: print "You are passing among the ancient, unearthly world of the Tarot box. ";
            GARDEN: print "It is the afternoon of June 3rd, 1993, and you are in the gardens. ";
            GARDEN_PAST: print "It is about noon on March 14th, 1808, and you are in the gardens. ";
            ANCIENT_BRITAIN: print "It is some time in the sixth century A.D., and you are in the Master Game. ";
            DREAMING: print "Time seems to have no meaning, and you are dreaming. ";
        }
        print "You have so far scored ";
    } else
        print "In that game you scored ";
    print (number) score, " out of a possible 300, in ", turns, " turns";
    PrintRank();
    rtrue;
];

[ WaveSub o ;
    o = parent(noun);
    if( o ~= player )
        "But you aren't holding it.";
    o = noun;
    if( o has hidden_rod ) {
        if (daisy_chain has worn) {
            if( daisy_chain.number == 1 ) {
                score = score + 6;
                rod_score = rod_score + 6;
                print "Light pulses around the daisy chain, then leaps out to engulf ", 
                    (the) noun, " which melts into the ";
                remove noun;
                o = noun.rod_assoc;
                move o to player;
                print_ret (name) o, "!";
            }
        }
        if( yellow_daisy has worn ) {
            score = score + 6;
            rod_score = rod_score + 6;
            print "Light pulses from the daisy behind your ear, leaping out to engulf ", 
                (the) noun, " which melts into ";
            remove noun;
            o = noun.rod_assoc;
            move o to player;
            if( o has rod_attr ) {
                print (the) o;
            }
            if( o hasnt rod_attr ) {
                print (a) o;
            }
            "!";
        }
    }
    if( o has rod_attr ) {
        "That seems to be not quite how they work...";
    }
    "You look ridiculous waving ", (the) o, ".";
];


[ DeathMessage;
    if (deadflag == DIED) {
        print " You have died ";
    }
    if (deadflag == WON) {
        print " You have won ";
    }
    if (deadflag == FAILED) {
        print " You have missed the point entirely ";
    }
    if (deadflag == DESTROYED_UNIVERSE) {
        print " You have disembodied the entire universe ";
    }
    if (deadflag == AUSTRALIA) {
        print " You have been transported to Australia ";
    }
    if (deadflag == PARADOX) {
        print " You have been annihilated by a temporal paradox ";
    }
    if (deadflag == MYTH) {
        print " You have become a constellation ";
    }
    if (deadflag == PRISON) {
        print " You have been imprisoned as a terrorist ";
    }
];

class Tarot
  with  article "the"
  has   card;

! early versions of Timers. Leaving in until I recode them

[ ResetTimer obj i ;
    i = obj.number;
    if (i > turns) {
        rfalse;
    }
    if (i == 0) {
        rfalse;
    }
    obj.number = 0;
    rtrue;
];

[ DecrementTimer o i ;
    i = o.number;
    if (i == 0) {
        rfalse;
    }
    --i;
    o.number = i;
    if (i > 0) {
        rfalse;
    }
    rtrue;
];

Include "house.inf";
Include "unreal.inf";
Include "hamburg.inf";
Include "premonition.inf";
Include "greece.inf";
Include "endgame.inf";

[ Initialise;
    location = Attic;
    move crumpled_piece_of_paper to player;
    move electric_torch to player;
    move chocolate_biscuit to player;
    StartDaemon(old_smudged_battery);
];

Include "newverbs.inf";
Include "Grammar";
